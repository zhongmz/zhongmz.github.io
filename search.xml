<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>组合数学</title>
    <url>/2020/04/06/%20%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>n阶幻方，其幻和为：</p>
<script type="math/tex; mode=display">
\frac {n*(1+n^2)}{2}</script><p>存在性：存在除2阶外的任意阶幻方。</p>
<p>计数与分类：奇数阶幻方；4n阶幻方；4n+2阶幻方。</p>
<p>构造方法：见课本</p>
<p>优化问题：略</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>鸽巢原理</p>
<p>Ramsey定理</p>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>线排列</p>
<p>圆排列</p>
<p>n元素集合的$r-$圆排列数为</p>
<script type="math/tex; mode=display">
\frac {1}{r}P(n,r)=\frac {n!}{r(n-r)!}</script><p>集合的排列数和组合数</p>
<p>多重集合的排列</p>
<script type="math/tex; mode=display">
M=\{ \infty \cdot a_1,\infty \cdot a_2...\infty \cdot a_n\}的r-排列数是n^r\\</script><script type="math/tex; mode=display">
M=\{ k_1\cdot a_1,k_2\cdot a_2...k_n\cdot a_n\}的全排列数为\frac {(k_1+k_2...+k_n)!}{k_1!k_2!...k_n!}</script><p>常利用公式(4)和分类法来解题目</p>
<p><strong>多重集合的组合</strong></p>
<script type="math/tex; mode=display">
M=\{ \infty \cdot a_1,\infty \cdot a_2...\infty \cdot a_n\}的r-组合数为\dbinom{n+r-1}{r}</script><script type="math/tex; mode=display">
M=\{ \infty \cdot a_1,\infty \cdot a_2...\infty \cdot a_n\},r \geq n,则M中每一个元素至少取一个的r-组合数为 \dbinom{r-1}{n-1}</script><p><strong>排列的生成</strong></p>
<p>​    (a)      邻位互换法，要得到${1,2…n}$的全排列，可以先得到${1,2…n-1}$的全排列，然后将n插入到其排列中。</p>
<p>​        活动状态：当一个数上方的箭头所指的一侧，相邻的数比该数小，那么该数处于活动状态。</p>
<p>​    (b)     字典序法</p>
<p>$x_1+x_2…+x_n=r$的非负整数解集个数为：$\frac{(n+r-1)!}{(n-1)!*r!}=\dbinom{n+r-1}{r}$</p>
<p>其中，$x_i\geq 0$</p>
<p><strong>二项式定理</strong></p>
<script type="math/tex; mode=display">
{(x+y)}^n=\dbinom{n}{0}x^0y^n+\dbinom{n}{1}x^1y^{n-1}...+\dbinom{n}{n-1}x^{n-1}y^1+\dbinom{n}{n}x^ny^0，其中n\geq 0</script><script type="math/tex; mode=display">
\dbinom{n}{k}\\
(1)\     \dbinom{n}{k}=\dbinom{n}{n-k} \\
(2)\     \dbinom{n}{k}=\dbinom{n-1}{k}+\dbinom{n-1}{k-1}\\
(3)\     \dbinom{n}{\frac{n}{2}}为max\\</script><h3 id="4-容斥原理"><a href="#4-容斥原理" class="headerlink" title="4 容斥原理"></a>4 容斥原理</h3><p>$S中不具有性质P_1,P_2\dots,P_m的元素个数为$$​</p>
<script type="math/tex; mode=display">
|\overline{A_1}\cap\overline{A_2}\cap\dots\cap\overline{A_m}|\\=|S|-\sum_{ i= 1}^{m}|A_i|+\sum_{1\leq i<j\leq m}|A_i\cap A_j|-\sum_{1\leq i<j<k\leq m}|A_i\cap A_j\cap A_k|+\dots +(-1)^{m}|A_1\cap A_2\cap\dots\cap A_m|</script><p>不妨设</p>
<p>$W(0)=|S|$</p>
<p>$W(1)=\displaystyle\sum_{i=1}^{m}|A_i|$</p>
<p>$W(2)=\displaystyle\sum_{1\leq i&lt;j\leq m}|A_i\cap A_j|$</p>
<p>$\dots$</p>
<p>$W(m)=|A_1\cap A_2\cap \dots A_m|$</p>
<p>那么有原式为$W(0)-W(1)+\dots+(-1)^mW(m)$</p>
<p><strong>Jordon公式</strong></p>
<p>集合S中恰好具有$r(0\leq r\leq m)$种特性质的元素个数</p>
<p>$M(r)=W(r)-\dbinom{r+1}{r}W(r+1)+\dots+(-1)^{m-r}\dbinom{m}{r}W(m)=\displaystyle\sum_{i=0}^{m-r}(-1)^i\dbinom{r+i}{r}W(r+i)$</p>
<p><strong>对称筛公式</strong></p>
<p>$即当\N=|S|\N(1)=|A<em>1|=|A_2|=\dots=|A_m|\N(2)=|A_1\cap A_2|=\dots=|A</em>{m-1}\cap A_{m}|\…$</p>
<p>有</p>
<script type="math/tex; mode=display">
|\overline{A_1}\cap \overline{A_2}\cap\dots\cap \overline{A_m}|=N-\dbinom{m}{1}N(1)+\dots+\dbinom{m}{m}N(m)</script><p><strong>错位排列</strong></p>
<p>​    每个物体$i$都不在第$i$个位置上的排列称为错位排列$Derangement$，通常使用$D_n$表示错位排列数</p>
<p>对于$n\geq 1$有</p>
<script type="math/tex; mode=display">
D_n=n!(1-\frac{1}{1!}+\frac{1}{2!}-\dots+(-1)^n\frac{1}{n!})</script><p><strong>有限制条件的排列问题</strong></p>
<p>​    一般来说，令$I={ 1,2,\dots ,n}$在$I$的排列中不出现12，23，34，…，(n-1)n的排列称为有限制条件的排列。通常把排列的个数记作$Q_n$</p>
<p>对于$n\geq 1$有</p>
<script type="math/tex; mode=display">
Q_n=n!-\dbinom{n-1}{1}(n-1)!+\dbinom{n-1}{2}(n-2)!-\dots+(-1)^{n-1}\cdot 1!</script><p><strong>棋盘多项式与有禁区的排列</strong></p>
<p>设$C$是一个棋盘，$r_k(C)$表示把$k$个棋子布到$C$中的方案数。</p>
<p>设$C_i$是从棋盘$C$中删除指定方格所在行所在列所剩余的棋盘，$C_l$是从棋盘$C$中删除指定方格后所剩余的棋盘，则有</p>
<script type="math/tex; mode=display">
r_k(C)=r_{k-1}(C_i)+r_k(C_l)\  其中k\geq 1</script><p>设棋盘$C$是由$C_1$和$C_2$两部分组成，且其布棋方案是互相独立的，则有</p>
<script type="math/tex; mode=display">
r_k(C)=\displaystyle\sum_{i=0}^{k}r_i(C_1)\cdot r_{k-i}(C_2)</script><p><strong>棋盘多项式，车多项式</strong></p>
<script type="math/tex; mode=display">
R(C)=\displaystyle\sum_{k=0}^{\infty}r_k(C)x^k</script><p>有</p>
<p>$R(C)=xR(C_i)+R(C_l)$</p>
<p>$R(C=R(C_1)\cdot R(C_2)$</p>
<h3 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h3><p>设有一个有限或无限的数列 ${a_0,a_1,…,a_k,..}$，做形式幂级数</p>
<script type="math/tex; mode=display">
G(x)=a_0+a_1x+\dots+a_kx^k+\dots,</script><p>称$G(x)$为数列${ a_0,a_1,…,a_k,..}$的（普通）生成函数，并记作$G{a_k}$</p>
<script type="math/tex; mode=display">
b_k=\begin{cases}
0,& k<r\\
a_{k-r},&k\geq r
\end{cases} \qquad B(x)=x^rA(x)\\

b_k=a_{k+r} \quad B(x)=\frac{1}{x}(A(x)-\displaystyle\sum_{k=0}^{r-1}a_kx^k)\\
b_k=\displaystyle\sum_{i=0}^{k}a_i \quad B(x)=\frac{A(x)}{1-x}\\
b_k=\displaystyle\sum_{i=k}^{\infty}a_i\quad B(x)=\frac{A(1)-xA(x)}{1-x}\\
b_k=ka_i \quad B(x)=xA^{'}(x)\\
c_k=\alpha a_k+\beta b_k\quad C(x)=\alpha A(x)+\beta B(x)\\
c_k=a_0b_k+a_1b_{k-1}+a_2b{k-2}+\dots+a_kb_0\quad C(x)=A(x)B(x)\\
b_k={\alpha}^{k}a_k\quad B(x)=A(\alpha x)\\</script>]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
  </entry>
  <entry>
    <title>随机数学</title>
    <url>/2020/04/03/%20%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h3 id="随机事件及其概率"><a href="#随机事件及其概率" class="headerlink" title="随机事件及其概率"></a>随机事件及其概率</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5><p>随机试验，简称为试验；若均满足：<strong>可重复性；可观测性；随机性。</strong></p>
<p>$E:$    试验</p>
<p>$w$:    样本点</p>
<p>$\Omega = ${ $w_1,w_2…w_i$ } :    样本空间</p>
<p>$A$，其中$A\subseteqq \Omega$:    事件</p>
<p>{$w_i$} :    基本事件</p>
<p>$\Omega$:    必然事件</p>
<p>$\phi$:    不可能事件</p>
<p>若 试验结果 $w\in A$,则称事件A发生</p>
<h5 id="事件的关系"><a href="#事件的关系" class="headerlink" title="事件的关系"></a>事件的关系</h5><p>$A\subseteqq B $:    包含</p>
<p>$A=B$:    相等</p>
<p>互斥：    不能同时发生</p>
<p>$\bar{A}=B$:    互逆，对立</p>
<h5 id="事件的运算"><a href="#事件的运算" class="headerlink" title="事件的运算"></a>事件的运算</h5><p>$A\cup B=${$w|w\in A或w\in B$}</p>
<p>$A\cap B或AB=${$w|w\in A或w\in B$}</p>
<p>$A-B=${$w|w\in A且 w\notin B$}</p>
<p>$\overline {A\cup B}=\overline A\cap \overline B$</p>
<p>$\overline {A\cap B}=\overline A\cup \overline B$</p>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>$n_A$:    事件A发生的频数</p>
<p>$f_n(A)$:    事件A发生的频率</p>
<p>$其中 f_n(A)=\frac{n_A}{n}$</p>
<p><strong>减法公式：</strong>$P(B-A)=P(B)-P(AB)$</p>
<p><strong>加法公式：</strong>$P(A\cup B)=P(A)+P(B)-P(AB)$</p>
<p><strong>古典概型：有限个样本点；基本事件发生的可能性相同。</strong></p>
<p><strong>几何概型</strong></p>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p><strong>条件概型：</strong>$P(B|A)=\frac{P(AB)}{P(A)} \Longrightarrow P(AB)=P(A)P(B|A)$</p>
<p>条件概型的性质：非负性；<strong>规范性：$P(\Omega |A)=1$</strong>；可列可加性：对于<strong>不相容</strong>的事件$B_1,B_2,\cdot \cdot \cdot $有</p>
<script type="math/tex; mode=display">
P((\cup_{i=1}^\infty B_i )|A)=\sum_{i=1}^\infty P(B_i|A)</script><p><strong>全概率公式：</strong></p>
<script type="math/tex; mode=display">
P(B)=\sum\limits_{i=1}^nP(A_i)P(B|A_i)</script><p>其中：</p>
<script type="math/tex; mode=display">
\cup _{i=1} ^n A_i=\Omega 且 \cap _{i=1} ^n A_i=\Phi</script><p><em>推导：</em></p>
<p><em>对任意事件B，有</em></p>
<script type="math/tex; mode=display">
B=B\cap \Omega =B\cap (\cup _{i=1} ^n A_i)=\cup _{i=1} ^n {A_iB}</script><p><img src="https://i.loli.net/2020/04/08/lSNC6yKmUEb7RgW.jpg" alt="概率_25.jpg"></p>
<p>由条件概型的性质可得全概率公式。若某问题可画出概率树，那么该问题属于条件概型，甚至符合全概率公式。</p>
<p><strong>贝叶斯公式：</strong></p>
<script type="math/tex; mode=display">
P(A_j|B)=\frac{P(A_jB)}{P(B)}=\frac{P(B|A_j)P(A_j)}{\sum_{i=1}^nP(A_i)P(B|A_i)}</script><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>如果</p>
<script type="math/tex; mode=display">
P(AB)=P(A)P(B)</script><p>则称事件A与事件B相互独立。</p>
<p>若某试验$E$是n重伯努利试验，即试验$E$只有两个对立的结果，将其进行n次。设$P(A)=p$。</p>
<p>有</p>
<script type="math/tex; mode=display">
P_n(k)=(_k^n)p^k(1-p)^{n-k}=C_n^kp^k(1-p)^{n-k}</script><h3 id="随机变量及其概率分布"><a href="#随机变量及其概率分布" class="headerlink" title="随机变量及其概率分布"></a>随机变量及其概率分布</h3><h5 id="1-随机变量"><a href="#1-随机变量" class="headerlink" title="1 随机变量"></a>1 随机变量</h5><p>性质：</p>
<p>$P${$a&lt;X\leq b$}$=P{ X\leq b}-P{ X\leq a}=F(b)-F(a)$</p>
<p>单调不减</p>
<p>$F(-\infty )=lim_{x\rightarrow -\infty }F(x)=0$</p>
<p>$F(+\infty )=lim_{x\rightarrow +\infty }F(x)=1$</p>
<p>F(x)是右连续的，即$F(x^{+})=F(x)$</p>
<h5 id="2离散型随机变量"><a href="#2离散型随机变量" class="headerlink" title="2离散型随机变量"></a>2离散型随机变量</h5><p>两点分布</p>
<p>二项分布，伯努利试验记作$X ~B(n,p) X在(n+1)p处取得最大值$</p>
<p>几何分布</p>
<p>泊松分布：</p>
<script type="math/tex; mode=display">
P\{ X=k\}=\frac{\lambda ^ke^{-\lambda}}{k!}\\
其中，\lambda为服从参数,记作X P(\lambda)</script><h5 id="3连续型随机变量"><a href="#3连续型随机变量" class="headerlink" title="3连续型随机变量"></a>3连续型随机变量</h5><p><strong>均匀分布</strong></p>
<script type="math/tex; mode=display">
f(x)=\left\{    \begin{array}{lr}        \frac{1}{b-a},a<x<b\\        0,其他            \end{array}\right.\\</script><p><strong>指数分布</strong></p>
<script type="math/tex; mode=display">
f(x)=\left\{    \begin{array}{lr}        \lambda e^{-\lambda x} &x>0,\\        0&x\leq 0            \end{array}\right.\\F(x)=\left\{    \begin{array}{lr}    1-e^{-\lambda x}&x>0\\    0&x\leq0\\    \end{array}    \right.\\其中，\lambda>0是常数，称为X服从参数为\lambda的指数分布\\</script><p><strong>正态分布</strong></p>
<p>$N(\mu ,\sigma^2)$有概率密度函数</p>
<script type="math/tex; mode=display">
f(x)=\frac{1}{\sqrt{2\pi }\sigma}e^{-\frac{(x-u)^2}{2\sigma^2}},-\infty <x<+\infty\\F(\mu)=\frac{1}{2}\\f(\mu)=\frac{1}{\sqrt{2\pi}\sigma}</script><p>标准正态分布</p>
<p>$N(\mu,\sigma^2)=N(0,1)$</p>
<script type="math/tex; mode=display">
f(x)=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}</script><p>其中$u,\sigma$为服从参数。当$u,\sigma$分布为0，1时，则称$X$服从标准正态分布</p>
<script type="math/tex; mode=display">
F(x)=\Phi (\frac{x-\mu}{\sigma})</script><h5 id="5-二维连续型随机变量"><a href="#5-二维连续型随机变量" class="headerlink" title="5 二维连续型随机变量"></a>5 二维连续型随机变量</h5><script type="math/tex; mode=display">
F(x,y)=\int_{-\infty}^{x}\int_{-\infty}^yf(u,v)dudv\\其中F(x,y)为概率分布函数,f(x,y)为联合概率密度。\\</script><script type="math/tex; mode=display">
1.f(x,y)\ge 0\\
2. \int_{-\infty}^{+\infty}\int_{-\infty}^{+\infty}f(u,v)dudv=1\\
3.若G是xOy上的一个区域，则,P\{(X,Y)\in G\}=\displaystyle\iint_{G}f(x,y)dxdy\\
4.关于Y的边缘概率密度函数f_Y(y)=\displaystyle\int_{-\infty}^{+\infty}f(x,y)dx\\</script><p>若随机变量X和Y相互独立，那么有$f(x,y)=f_X(x)f_Y(y)$</p>
<p><strong>均匀分布</strong></p>
<script type="math/tex; mode=display">
设D是xOy面上的有界区域，其面积为A，若\\f(x,y)=\left\{    \begin{array}{lr}        \frac{1}{A}&(x,y)\in D,\\        0&其他            \end{array}\right.\\则称(X,Y)在区域D上服从均匀分布。</script><p><strong>正态分布</strong></p>
<script type="math/tex; mode=display">
f(x,y)=\frac{1}{2\pi \sigma_1 \sigma_2 \sqrt{1-\rho^2} }\cdot e^{\frac{-1}{2(1-\rho^2)}[\frac{(x-\mu_1)^2}{\sigma_1^2}-2\rho \frac{(x-\mu_1)(y-\mu_2)}{\sigma_1\sigma_2}+\frac{(y-\mu_2)^2}{\sigma_2^2}]},(x,y)\in R^2\\其中\sigma_i>0,-1<\rho<1,记作(X,Y) ~N(\mu_1,\mu_2,\sigma_1^2,\sigma_2^2,\rho)</script><p><strong>条件分布</strong></p>
<script type="math/tex; mode=display">
离散型：P\{X=x_i|Y=y_j\}=\frac{P{X=x_i,Y=y_j}}{P{Y=y_j}}=\frac{p_{ij}}{p_{\cdot j}}\\
连续型条件Y=y下X的条件概率密度函数f_{Y|X}(x|y)=\frac{f(x,y)}{f_Y{y}}</script><p><strong>连续型函数分布</strong>​</p>
<script type="math/tex; mode=display">
有Z=X+Y\\公式法f_Z(z)=\displaystyle \int _{-\infin}^{+\infin}f(x,z-x)dx=\displaystyle \int _{-\infin} ^{+\infin}f(z-y,y)dy\\分布函数法\\
Z=X+Y,若X和Y相互独立\\f_Z(z)=\displaystyle \int _{-\infin} ^{+\infin}f_X(x)f_Y(z-x)dx\\</script><p>$这个公式称为f_X(x)与f_Y(y)的$<strong>卷积公式</strong></p>
<p>$Z=max{X,Y},X与Y相互独立$</p>
<p>$F_Z(z)=F_X(x)F_Y(y)$</p>
<p>$Z=min{X,Y},X与Y相互独立$</p>
<p>$F_Z(z)=1-[1-F_X(z)][1-F_Y(z)]$</p>
]]></content>
      <categories>
        <category>随机数学</category>
      </categories>
  </entry>
  <entry>
    <title>Java核心技术i</title>
    <url>/2020/04/02/%20Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFi/</url>
    <content><![CDATA[<p>$\lambda 表达式形式：参数，箭头 (-&gt;) 以及一个表达式$</p>
<p>无需指定$\lambda 表达式的返回类型$</p>
<p>只有当$\lambda$表达式的体只调用一个方法而不做其他操作时，才能把$\lambda$表达式重写为方法。page248</p>
<p>$\lambda$就是闭包</p>
<p>$\lambda$捕获的变量是事实最终变量$effectively\ final$</p>
<p>$exception\ handing ,异常处理 \ throw\ 抛出\ exception\ handler\ 异常处理器$</p>
<p>$只需要声明\ IOException,检查型(checked)异常$</p>
<p>$i.找到一个合适的异常类\ ii.创建这个类的一个对象\ iii.将对象抛出$</p>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="迭代器·Iterator接口"><a href="#迭代器·Iterator接口" class="headerlink" title="迭代器·Iterator接口"></a>迭代器·Iterator接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interator</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemain</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>实现方式</p>
<ul>
<li>循环数组</li>
<li>链表</li>
</ul>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>计算机系统结构</title>
    <url>/2020/03/31/%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p><em>系统结构，组成，实现</em></p>
<ol>
<li>计算机系统结构：计算机系统的软，硬件的界面。</li>
<li>计算机组成：计算机系统结构的逻辑实现。</li>
<li>计算机实现：计算机组成的物理实现</li>
</ol>
<p>换句话来说，我们设计计算机的时间轴为：$系统结构\longrightarrow 组成\longrightarrow 实现$</p>
<p>$t_{cpu}:$执行一段程序所用的CPU时间。</p>
<p>$IC:$该段程序的指令条数，取决于指令集<em>结构</em> 和编译技术。</p>
<p>$CPI,Cycle \ Per \ Instruction:$平均每一条指令所需要的时钟周期，取决于<em>组成</em>和指令集<em>结构</em></p>
<p>$T:$时钟周期，取决于<em>实现</em> 和<em>组成</em></p>
<h4 id="3-流水线"><a href="#3-流水线" class="headerlink" title="3 流水线"></a>3 流水线</h4><p><em>以静态，线性，顺序流水线为例</em></p>
<p>$吞吐率\ ThroughPut\ TP=\frac{n}{T_k}=\frac{任务数量}{运行时间}=\frac{n}{(k+n-1)\Delta t}$</p>
<p>$加速比\ Speedup\ S=\frac{T_s}{T_k}=\frac{顺序执行时间}{运行时间}=\frac{nk}{k+m-1}$</p>
<p>$效率\ Efficiency\ E=\frac{n\Delta t}{T_k}=\frac{设备实际使用时间}{运行时间*设备数目}=\frac{n}{k+n-1}$</p>
<p><strong>dependence 相关</strong>，<em>两条指令之间存在某种依赖关系</em></p>
<p><strong>真数据相关，data dependence</strong>，$①指令j使用指令i产生的结果;②指令j与指令k数据相关，指令k又与指令i数据相关$</p>
<p><strong>名相关，name dependence</strong>，如果两条指令使用相同的名，但是它们之间没有数据流动</p>
<p>$anti-dependence,反相关，指令j写的名与指令i读的名相同；\ output\ dependence,输出相关,指令j与指令i写的名相同。 $</p>
<p><strong>控制相关，control dependence </strong>，有分支指令引起的相关。</p>
<p><strong>流水线冲突 pipline hazards</strong>，<em>由于相关的存在，使得下一条指令不能再指定的时钟周期执行</em></p>
<p><strong>结构冲突</strong></p>
<p><strong>数据冲突</strong>，相关的指令靠得足够近。</p>
<p>$RAM,Read \ After \ Write ,写后读冲突，真数据相关$</p>
<p>$WAW,Write \ After \ Write ，写后写冲突，输出相关，在五段流水线(MIPS)中不会发生$</p>
<p>$WAR,Write \ After  \ Read,读后写冲突.反相关$</p>
<p>仅发生在这样的情况：有些指令的写操作被提前了，有些操作的读操作被滞后了，即指令被重新排序了,在五段流水线(MIPS)中不会发生</p>
<h4 id="4-指令级并行​"><a href="#4-指令级并行​" class="headerlink" title="4 指令级并行​"></a>4 指令级并行​</h4><script type="math/tex; mode=display">
ILP,Instruction-Level\ Parallelism,指令级并行\left\{    \begin{array}{lr}        基于硬件（代码执行中）的动态开发方法\\        基于软件（代码执行前）的静态开发方法            \end{array}\right.\\</script><p>$CPI<em>{实际流水线}=CPI</em>{理想}+停顿<em>{结构冲突}+停顿</em>{数据冲突}+停顿_{控制冲突}$</p>
<p>$IPC,Instructions \ Per\  Cycle,每个时钟周期完成的指令条数$</p>
<p>$CDB,Common\ Data \ Bus,公共数据总线$</p>
<p>$IS,Issue,流出阶段：指令译码，检查是否存在结构冲突。$</p>
<p>$RO,Read\ Operands,读操作数：检测数据冲突$</p>
<p>$BHT,Branch\ History\ Table\ ,Branch\ Predicition\ Buffer,分支历史表，分支预测缓冲器\是最简单的动态分支预测方法$</p>
<p>$BTB,Branch\ Target\ Buffer,分支目标缓冲器，也称分支目标Cache$</p>
<p>$branch\ folding,分支折叠$</p>
<p>$speculation,前瞻执行$</p>
<p>$ROB,ReOrder\ Buffer，再定序缓冲器，为了在猜错的情况下能够恢复现场$</p>
<p>$Tomasulo算法$</p>
<p>$基于硬件的前瞻算法，顺序流出，乱序执行，顺序确认$</p>
<h5 id="EG"><a href="#EG" class="headerlink" title="EG"></a>EG</h5><p>$e.g.1$</p>
<p><img src="https://i.loli.net/2020/04/08/7rioSuvb5ew9sGK.png" alt="image-20200308150608490.png"></p>
<p>解</p>
<p>不妨设加速比为S</p>
<p>那么有</p>
<script type="math/tex; mode=display">
S=\frac {time_前}{time_后}=\frac{11.1\%*2+33.3\%*20+38.9\%*10+16.7\%*4}{11.1\%*1+33.3\%*15+38.9\%*3+16.7\%*1}=\frac{11.44}{6.44}=1.77</script><p>$e.g.2$</p>
<p>考虑条件分支指令的两种不同设计方法：<br>（1）CPUA：通过比较指令设置条件码，然后测试条件码进行分支。<br>（2）CPUB：在分支指令中包括比较过程。<br>在这两种CPU中，条件分支指令都占用2个时钟周期，而所有其他指令占用1个时钟周期。对于CPUA，执行的指令中分支指令占20%；由于每条分支指令之前都需要有比较指令，因此比较指令也占20%。不妨假设其他指令条数相同。由于CPUA在分支时不需要比较，因此CPUB的时钟周期时间是CPUA的1.25倍。问：<strong>哪一个CPU更快</strong>？如果CPUB的时钟周期时间只是CPUA的1.1倍，哪一个CPU更快呢？</p>
<p>$t_{cpu}=IC<em>CPI</em>T$</p>
<p>那么有</p>
<script type="math/tex; mode=display">
t_{cpuA}=IC*(0.4*2+0.6*1)*T \\
t_{cpuB}=IC*(2/8*2+6/8*1)*1.25T</script><p>最后即可得答案。</p>
]]></content>
      <categories>
        <category>计算机系统结构</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2020/03/31/%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>1 <em>中断</em>，在程序运行过程中出现某种紧急事件，必须中止当前正在运行的程序，转去处理此事件，然后再恢复原来运行的程序。有$\begin{Bmatrix} 强迫性中断\ 自愿性中断\  \end {Bmatrix}$。</p>
<p>2 <em>中断系统</em>，中断装置+中断处理程序</p>
<p>3 <em>中断装置</em>，识别中断源$\Longrightarrow$ 保存现场$(运行的物理环境：地址寄存器，通用寄存器，浮点寄存器，SP，PSW，PC，文件表)\Longrightarrow $引出中断程序</p>
<p>1 进程互斥；进程同步；进程饥饿；进程死机；进程饿死</p>
<p>2 $吞吐量=\frac{任务数量}{处理时间}$</p>
<p>3 $PCB,process\  control\ block $，进程控制块，是标志进程存在的数据结构，其中包含系统对进程进行管理所需要的全部信息。</p>
<p>4 $TCB,thread\  control\ block$，线程控制块，是标志线程存在的数据结构，其中包含系统对线程进行管理所需要的全部信息。</p>
<p>5 $PSW,program\ status\ word$，程序状态字，表示当前程序的运行环境，状态</p>
<p>6 $JCB\ ,Job\ Control\ Block$，作业控制块，是标志作业存在的数据结构，其中包含系统对作业进行管理所需要的全部信息。</p>
<p>7 $PC$，指令计数。</p>
<p><strong>处理及调度算法</strong></p>
<p>1 $FCFS,first\ come\ first\ service $，先到先服务。</p>
<p>。。。</p>
<p><strong>程序并发执行的条件</strong></p>
<p>满足$Bernstein 条件$</p>
<p>$race\ condition,竞争条件，多个进程在访问变量时，因实际交叉次序不同而导致执行结果不同$</p>
<p><strong>Peterson互斥算法</strong></p>
<p>$bus \ request\ protocol,总线请求协议$</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>state machine&amp;Euclidean Alg</title>
    <url>/2020/03/21/%20%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%AC4%E8%AE%B2/</url>
    <content><![CDATA[<p><em>state machine</em></p>
<p><a href="https://leetcode-cn.com/problems/water-and-jug-problem/" target="_blank" rel="noopener">水壶问题</a></p>
<p>有两个容量分别为 <em>x</em>升 和 <em>y</em>升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 <em>z</em>升 的水？</p>
<p>如果可以，最后请用以上水壶中的一或两个来盛放取得的 <em>z升</em> 水。</p>
<p>你允许：</p>
<ul>
<li>装满任意一个水壶</li>
<li>清空任意一个水壶</li>
<li>从一个水壶向另外一个水壶倒水，直到装满或者倒空</li>
</ul>
<p><strong>示例 1:</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: x = 3, y = 5, z = 4</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: x = 2, y = 6, z = 5</span><br><span class="line">输出: False</span><br></pre></td></tr></table></figure>
<p>我们不妨将每一次两个水壶中所拥有的水的体积作为该时刻的状态。</p>
<p><strong>状态表示</strong>为$P(n)=(a,b)$。</p>
<p>其中，$a$表示容量为$x$升的水壶所有的水，$b$表示容量为$y$升的水壶所有的水。</p>
<p><strong>状态转移</strong>有装满一个水壶；清空一个水壶；从一个水壶向另外一个水壶倒水，知道装满或者倒空。</p>
<p><strong>最终状态</strong>必然有$a_0+b_0=z$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结论：ans=GCD(x,y)|z</span><br></pre></td></tr></table></figure>
<p>容易推理出若$m|a_0,m|b_0,则有m|z$</p>
<p>那么我们需要寻找这样的状态$(a_0,b_0)$</p>
<script type="math/tex; mode=display">
证明：m|x且m|y\Longrightarrow m|a且m|b</script><p>不妨设$m|x且m|y$。</p>
<p>显然$P(0)=(0,0),任意m|0符合(1)式$</p>
<p>设$P(n)=(a,b),m|a且m|b$</p>
<p>证明$P(n+1)=(a_1,b_1),m|a_1,m|b_1$</p>
<p>根据状态转移有</p>
<script type="math/tex; mode=display">
P(n+1)=\left\{
\begin{array}{lr}
(a,0)\\
(0,b)\\
(x,b)\\
(a,y)\\
(a-(y-b),y)\\
(0,a+b)\\
(x,b-(x-a))\\
(a+b,0)\\
\end{array}
\right.</script><p>只证$(2)式$的每一个数字都能被$m$整除，答案是显然的。</p>
<p>那么我们就可以得到最终的状态$(a_0,b_0)必然有m|a_0,m|b_0,那么有m|z$。</p>
<p>为了保证每一个$m$的取值都能满足以上推论。</p>
<p>必然需要满足$GCD(x,y)|z$</p>
<p>所以有$z\%GCD(x,y)==0$</p>
<p><em>Euclidean Alg</em></p>
<script type="math/tex; mode=display">
GCD(a,b)=GCD(Remainder(b,a),a)\\
其中，Remainder(b,a)=b-q*a=b\%a\geq0\ \ \ \ \ a,b,q均为正整数</script><p>证明$m|a且m|b\Longrightarrow m|Remainder(b,a)且m|a$</p>
<p>答案是显然的。</p>
<p>现只需证明$m|Remainder(b,a) 且m|a\Longrightarrow  m|b$</p>
<script type="math/tex; mode=display">
已知b-qa=k_1m,a=k_2m\\
有b=(k_1+k_2q)m\\
有m|b</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GCD</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">0</span>||b==<span class="number">0</span>)  <span class="keyword">return</span> max(a,b);</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="keyword">while</span>(b%a!=<span class="number">0</span>)&#123;</span><br><span class="line">            c=b%a;</span><br><span class="line">            b=a;</span><br><span class="line">            a=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canMeasureWater</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">0</span>)    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(z&gt;x+y)<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">int</span> m=GCD(x,y);</span><br><span class="line">        <span class="keyword">if</span>(z%m==<span class="number">0</span>)  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>离散数学</category>
      </categories>
  </entry>
  <entry>
    <title>算法设计与分析</title>
    <url>/2020/02/13/%20%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E5%8F%8A%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>证明$f(n)=O(g(n))$，有</p>
<script type="math/tex; mode=display">
\exists c,n_0,对于\forall n\geq n_0 有 f(n)\leq c*g(n)</script><p>即$g(n)$时$f(n)$的渐近上限。</p>
<p>证明$f(n)=\Omega (g(n))$，有</p>
<script type="math/tex; mode=display">
\exists c,n_0,对于\forall n\geq n_0 有 f(n)\geq c*g(n)</script><p>即$g(n)$时$f(n)$的渐近下限。</p>
<p>若同时满足$(1),(2)$</p>
<p>则有</p>
<script type="math/tex; mode=display">
f(n)=\Theta (g(n)),且g(n)=\theta (f(n))</script><h3 id="3-贪心方法"><a href="#3-贪心方法" class="headerlink" title="3 贪心方法"></a>3 贪心方法</h3><h4 id="1-一般方法"><a href="#1-一般方法" class="headerlink" title="1 一般方法"></a>1 一般方法</h4><script type="math/tex; mode=display">
n个输入,可行解为n个输入的子集\\
约束条件\Longrightarrow 可行解 根据目标函数\Longrightarrow最优解</script><h4 id="核心：选取能产生最优解的量度标准"><a href="#核心：选取能产生最优解的量度标准" class="headerlink" title="核心：选取能产生最优解的量度标准"></a>核心：选取能产生最优解的量度标准</h4><h4 id="2背包"><a href="#2背包" class="headerlink" title="2背包"></a>2背包</h4>]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
  </entry>
  <entry>
    <title>Warshall&amp;All_componet</title>
    <url>/2019/11/18/%20Warshall/</url>
    <content><![CDATA[<h5 id="Warshall-amp-All-componet"><a href="#Warshall-amp-All-componet" class="headerlink" title="Warshall &amp; All_componet"></a>Warshall &amp; All_componet</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> VerAdj;</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">    Edge*link;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> VerName;</span><br><span class="line">    Edge*adjacent;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> VerName;</span><br><span class="line">    node*link;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> graphsize;</span><br><span class="line"><span class="keyword">int</span> edgesize;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1e2</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(Vertex S[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;graphsize,&amp;edgesize);</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">int</span> from,to,cost;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[i].adjacent=<span class="literal">NULL</span>;</span><br><span class="line">        S[i].VerName=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=edgesize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        Edge*p=<span class="keyword">new</span> Edge;</span><br><span class="line">        p-&gt;cost=<span class="number">0</span>;</span><br><span class="line">        p-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;VerAdj=to;</span><br><span class="line">        Edge*q=S[from].adjacent;</span><br><span class="line">        <span class="keyword">if</span>(q==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            S[from].adjacent=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(q-&gt;VerAdj&gt;=p-&gt;VerAdj)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(q-&gt;VerAdj&gt;p-&gt;VerAdj)</span><br><span class="line">                &#123;</span><br><span class="line">                    p-&gt;link=q;</span><br><span class="line">                    S[from].adjacent=p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(q-&gt;cost&gt;p-&gt;cost)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">delete</span> q;</span><br><span class="line">                        S[from].adjacent=p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">delete</span> p;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(q-&gt;link!=<span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(q-&gt;link-&gt;VerAdj&gt;=p-&gt;VerAdj)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q=q-&gt;link;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(q-&gt;link==<span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    p-&gt;link=q-&gt;link;</span><br><span class="line">                    q-&gt;link=p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(q-&gt;link-&gt;VerAdj==p-&gt;VerAdj)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(q-&gt;link-&gt;cost&gt;p-&gt;cost)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Edge*q0=q-&gt;link;</span><br><span class="line">                            p-&gt;link=q0-&gt;link;</span><br><span class="line">                            q-&gt;link=p;</span><br><span class="line">                            <span class="keyword">delete</span> q0;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">delete</span> p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        p-&gt;link=q-&gt;link;</span><br><span class="line">                        q-&gt;link=p;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Warshall</span><span class="params">(Vertex S[],<span class="keyword">int</span> WSM[MAX][MAX])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    Edge*p;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)</span><br><span class="line">                WSM[i][j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                WSM[i][j]=<span class="number">0</span>;</span><br><span class="line">                WSM[j][i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=S[i].adjacent;</span><br><span class="line">        a=S[i].VerName;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            WSM[a][p-&gt;VerAdj]=<span class="number">1</span>;</span><br><span class="line">            p=p-&gt;link;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;graphsize;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(WSM[i][k]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    WSM[i][j]=(WSM[i][j])||(WSM[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">All_componet</span><span class="params">(Vertex S[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> WSM[MAX][MAX];</span><br><span class="line">    <span class="keyword">int</span> markedList[MAX];</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">        markedList[i]=<span class="number">0</span>;</span><br><span class="line">    Warshall(S,WSM);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;graphsize;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(markedList[v]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            markedList[v]=<span class="number">1</span>;</span><br><span class="line">            node*scList=<span class="keyword">new</span> node;</span><br><span class="line">            scList-&gt;VerName=v;</span><br><span class="line">            scList-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">            node*q=scList;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=v&amp;&amp;WSM[v][i]==<span class="number">1</span>&amp;&amp;WSM[i][v]==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    markedList[i]=<span class="number">1</span>;</span><br><span class="line">                    node*p=<span class="keyword">new</span> node;</span><br><span class="line">                    p-&gt;VerName=i;</span><br><span class="line">                    p-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">                    q-&gt;link=p;</span><br><span class="line">                    q=q-&gt;link;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"t:%d\n"</span>,t);</span><br><span class="line">            t=t+<span class="number">1</span>;</span><br><span class="line">            q=scList;</span><br><span class="line">            node*q0;</span><br><span class="line">            <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,q-&gt;VerName);</span><br><span class="line">                q0=q;</span><br><span class="line">                q=q-&gt;link;</span><br><span class="line">                <span class="keyword">delete</span> q0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 7</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vertex S[MAX];</span><br><span class="line">    Init(S);</span><br><span class="line">    All_componet(S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Kmeans</title>
    <url>/2019/11/13/%20Kmeans/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#基于聚类算法(kmeans)的图像分割</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">导入所需要的模块：</span></span><br><span class="line"><span class="string">1.用于处理二维矩阵的数学库</span></span><br><span class="line"><span class="string">2.随机生成数的模块</span></span><br><span class="line"><span class="string">3.用于将图片(JPG)转换为矩阵以及把矩阵转换为图片(JPG)的模块</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 导入数据，file_path是图像的存储位置</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    f = open(file_path, <span class="string">"rb"</span>)  <span class="comment"># 以二进制的方式打开图像文件</span></span><br><span class="line">    data = []</span><br><span class="line">    im = Image.open(f)  <span class="comment"># 导入图片</span></span><br><span class="line">    m, n = im.size  <span class="comment"># 得到图片的大小</span></span><br><span class="line">    <span class="keyword">print</span> (m), (n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            tmp = []</span><br><span class="line">            x, y, z = im.getpixel((i, j))</span><br><span class="line">            tmp.append(x / <span class="number">256.0</span>)</span><br><span class="line">            tmp.append(y / <span class="number">256.0</span>)</span><br><span class="line">            tmp.append(z / <span class="number">256.0</span>)</span><br><span class="line">            data.append(tmp)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> np.mat(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(vecA, vecB)</span>:</span></span><br><span class="line">    <span class="string">'''计算vecA与vecB之间的欧式距离的平方</span></span><br><span class="line"><span class="string">    input:  vecA(mat)A点坐标</span></span><br><span class="line"><span class="string">        vecB(mat)B点坐标</span></span><br><span class="line"><span class="string">    output: dist[0, 0](float)A点与B点距离的平方</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    dist = (vecA - vecB) * (vecA - vecB).T</span><br><span class="line">    <span class="keyword">return</span> dist[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randCent</span><span class="params">(data, k)</span>:</span></span><br><span class="line">    <span class="string">'''随机初始化聚类中心</span></span><br><span class="line"><span class="string">    input:  data(mat):训练数据</span></span><br><span class="line"><span class="string">        k(int):类别个数</span></span><br><span class="line"><span class="string">    output: centroids(mat):聚类中心</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    n = np.shape(data)[<span class="number">1</span>]  <span class="comment"># 属性的个数</span></span><br><span class="line">    centroids = np.mat(np.zeros((k, n)))  <span class="comment"># 初始化k个聚类中心</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):  <span class="comment"># 初始化聚类中心每一维的坐标</span></span><br><span class="line">        minJ = np.min(data[:, j])</span><br><span class="line">        rangeJ = np.max(data[:, j]) - minJ</span><br><span class="line">        <span class="comment"># 在最大值和最小值之间随机初始化</span></span><br><span class="line">        centroids[:, j] = minJ * np.mat(np.ones((k , <span class="number">1</span>))) + np.random.rand(k, <span class="number">1</span>) * rangeJ</span><br><span class="line">    <span class="keyword">return</span> centroids</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmeans</span><span class="params">(data, k, centroids)</span>:</span></span><br><span class="line">    <span class="string">'''根据KMeans算法求解聚类中心</span></span><br><span class="line"><span class="string">    input:  data(mat):训练数据</span></span><br><span class="line"><span class="string">        k(int):类别个数</span></span><br><span class="line"><span class="string">        centroids(mat):随机初始化的聚类中心</span></span><br><span class="line"><span class="string">    output: centroids(mat):训练完成的聚类中心</span></span><br><span class="line"><span class="string">        subCenter(mat):每一个样本所属的类别</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m, n = np.shape(data)  <span class="comment"># m：样本的个数，n：特征的维度</span></span><br><span class="line">    subCenter = np.mat(np.zeros((m, <span class="number">2</span>)))  <span class="comment"># 初始化每一个样本所属的类别</span></span><br><span class="line">    change = <span class="literal">True</span>  <span class="comment"># 判断是否需要重新计算聚类中心</span></span><br><span class="line">    <span class="keyword">while</span> change == <span class="literal">True</span>:</span><br><span class="line">        change = <span class="literal">False</span>  <span class="comment"># 重置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            minDist = np.inf  <span class="comment"># 设置样本与聚类中心之间的最小的距离，初始值为争取穷</span></span><br><span class="line">            minIndex = <span class="number">0</span>  <span class="comment"># 所属的类别</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k):</span><br><span class="line">                <span class="comment"># 计算i和每个聚类中心之间的距离</span></span><br><span class="line">                dist = distance(data[i, ], centroids[j, ])</span><br><span class="line">                <span class="keyword">if</span> dist &lt; minDist:</span><br><span class="line">                    minDist = dist</span><br><span class="line">                    minIndex = j</span><br><span class="line">            <span class="comment"># 判断是否需要改变</span></span><br><span class="line">            <span class="keyword">if</span> subCenter[i, <span class="number">0</span>] != minIndex:  <span class="comment"># 需要改变</span></span><br><span class="line">                change = <span class="literal">True</span></span><br><span class="line">                subCenter[i, ] = np.mat([minIndex, minDist])</span><br><span class="line">        <span class="comment"># 重新计算聚类中心</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(k):</span><br><span class="line">            sum_all = np.mat(np.zeros((<span class="number">1</span>, n)))</span><br><span class="line">            r = <span class="number">0</span>  <span class="comment"># 每个类别中的样本的个数</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> subCenter[i, <span class="number">0</span>] == j:  <span class="comment"># 计算第j个类别</span></span><br><span class="line">                    sum_all += data[i, ]</span><br><span class="line">                    r += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    centroids[j, z] = sum_all[<span class="number">0</span>, z] / r</span><br><span class="line">                    <span class="keyword">print</span> (r)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">print</span> (<span class="string">" r is zero"</span>)</span><br><span class="line">    <span class="keyword">return</span> subCenter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_result</span><span class="params">(file_name, source)</span>:</span></span><br><span class="line">    <span class="string">'''保存source中的结果到file_name文件中</span></span><br><span class="line"><span class="string">    input:  file_name(string):文件名</span></span><br><span class="line"><span class="string">        source(mat):需要保存的数据</span></span><br><span class="line"><span class="string">    output:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m, n = np.shape(source)</span><br><span class="line">    f = open(file_name, <span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            tmp.append(str(source[i, j]))</span><br><span class="line">        f.write(<span class="string">"\t"</span>.join(tmp) + <span class="string">"\n"</span>)</span><br><span class="line">    f.close()</span><br><span class="line"><span class="comment"># --------------------------------------------------</span></span><br><span class="line">FLOAT_MAX = <span class="number">1e100</span>  <span class="comment"># 设置一个较大的值作为初始化的最小的距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nearest</span><span class="params">(point, cluster_centers)</span>:</span></span><br><span class="line">    <span class="string">'''计算point和cluster_centers之间的最小距离</span></span><br><span class="line"><span class="string">    input:  point(mat):当前的样本点</span></span><br><span class="line"><span class="string">        cluster_centers(mat):当前已经初始化的聚类中心</span></span><br><span class="line"><span class="string">    output: min_dist(float):点point和当前的聚类中心之间的最短距离</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    min_dist = FLOAT_MAX</span><br><span class="line">    m = np.shape(cluster_centers)[<span class="number">0</span>]  <span class="comment"># 当前已经初始化的聚类中心的个数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="comment"># 计算point与每个聚类中心之间的距离</span></span><br><span class="line">        d = distance(point, cluster_centers[i, ])</span><br><span class="line">        <span class="comment"># 选择最短距离</span></span><br><span class="line">        <span class="keyword">if</span> min_dist &gt; d:</span><br><span class="line">            min_dist = d</span><br><span class="line">    <span class="keyword">return</span> min_dist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_centroids</span><span class="params">(points, k)</span>:</span></span><br><span class="line">    <span class="string">'''KMeans++的初始化聚类中心的方法</span></span><br><span class="line"><span class="string">    input:  points(mat):样本</span></span><br><span class="line"><span class="string">        k(int):聚类中心的个数</span></span><br><span class="line"><span class="string">    output: cluster_centers(mat):初始化后的聚类中心</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m, n = np.shape(points)</span><br><span class="line">    cluster_centers = np.mat(np.zeros((k , n)))</span><br><span class="line">    <span class="comment"># 1、随机选择一个样本点为第一个聚类中心</span></span><br><span class="line">    index = np.random.randint(<span class="number">0</span>, m)</span><br><span class="line">    cluster_centers[<span class="number">0</span>, ] = np.copy(points[index, ])</span><br><span class="line">    <span class="comment"># 2、初始化一个距离的序列</span></span><br><span class="line">    d = [<span class="number">0.0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t初始化一个距离序列"</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">" k="</span>,k)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k):</span><br><span class="line">        print(i)</span><br><span class="line">        sum_all = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="comment"># 3、对每一个样本找到最近的聚类中心点</span></span><br><span class="line">            d[j] = nearest(points[j, ], cluster_centers[<span class="number">0</span>:i, ])</span><br><span class="line">            <span class="comment"># 4、将所有的最短距离相加</span></span><br><span class="line">            sum_all += d[j]</span><br><span class="line">        <span class="comment"># 5、取得sum_all之间的随机值</span></span><br><span class="line">        sum_all *= random()</span><br><span class="line">        <span class="comment"># 6、获得距离最远的样本点作为聚类中心点</span></span><br><span class="line">        <span class="keyword">for</span> j, di <span class="keyword">in</span> enumerate(d):</span><br><span class="line">            sum_all -= di</span><br><span class="line">            <span class="keyword">if</span> sum_all &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cluster_centers[i] = np.copy(points[j, ])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> cluster_centers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_kmeanspp</span><span class="params">(data, k)</span>:</span></span><br><span class="line">    <span class="comment"># 1、KMeans++的聚类中心初始化方法</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t---------- 1.K-Means++ generate centers ------------"</span>)</span><br><span class="line">    centroids = get_centroids(data, k)</span><br><span class="line">    <span class="comment"># 2、聚类计算</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t---------- 2.kmeans ------------"</span>)</span><br><span class="line">    subCenter = kmeans(data, k, centroids)</span><br><span class="line">    <span class="comment"># 3、保存所属的类别文件</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t---------- 3.save subCenter ------------"</span>)</span><br><span class="line">    save_result(<span class="string">"sub_pp"</span>, subCenter)</span><br><span class="line">    <span class="comment"># 4、保存聚类中心</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t---------- 4.save centroids ------------"</span>)</span><br><span class="line">    save_result(<span class="string">"center_pp"</span>, centroids)</span><br><span class="line"><span class="comment">#--------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">4</span>                       <span class="comment">#聚类中心的个数</span></span><br><span class="line"><span class="comment"># 1、导入数据</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"---------- 1.load data ------------"</span>)</span><br><span class="line">data = load_data(<span class="string">"Pic_B.jpg"</span>)</span><br><span class="line"><span class="comment"># 2、利用kMeans++聚类</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"---------- 2.run kmeans++ ------------"</span>)</span><br><span class="line">run_kmeanspp(data, k)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>Prim</title>
    <url>/2019/11/13/%20Prim/</url>
    <content><![CDATA[<h5 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1e6</span>;</span><br><span class="line">edge E[MAX];</span><br><span class="line">edge TE[MAX];</span><br><span class="line"><span class="keyword">int</span> graphsize;</span><br><span class="line"><span class="keyword">int</span> edgesize;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LV</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Lowcost;</span><br><span class="line">    <span class="keyword">int</span> Vex;</span><br><span class="line">&#125;;</span><br><span class="line">LV closedge[MAX];</span><br><span class="line"><span class="keyword">int</span> Edge[<span class="number">5010</span>][<span class="number">5010</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//稠密图，使用邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;graphsize,&amp;edgesize);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Edge[i][j]=<span class="number">1e9</span>;</span><br><span class="line">            Edge[j][i]=<span class="number">1e9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;edgesize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;E[i].head,&amp;E[i].tail,&amp;E[i].cost);</span><br><span class="line">        <span class="comment">//防止重边</span></span><br><span class="line">        <span class="keyword">if</span>(E[i].cost&lt;Edge[E[i].head<span class="number">-1</span>][E[i].tail<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Edge[E[i].head<span class="number">-1</span>][E[i].tail<span class="number">-1</span>]=E[i].cost;</span><br><span class="line">        Edge[E[i].tail<span class="number">-1</span>][E[i].head<span class="number">-1</span>]=E[i].cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        closedge[i].Lowcost=Edge[<span class="number">0</span>][i];</span><br><span class="line">        closedge[i].Vex=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    closedge[<span class="number">0</span>].Vex=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Min=<span class="number">1e9</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> v=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(closedge[j].Vex!=<span class="number">-1</span>&amp;&amp;closedge[j].Lowcost&lt;Min)</span><br><span class="line">            &#123;</span><br><span class="line">                v=j;</span><br><span class="line">                Min=closedge[j].Lowcost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=ans+closedge[v].Lowcost;</span><br><span class="line">            TE[count].head=closedge[v].Vex;</span><br><span class="line">            TE[count].tail=v;</span><br><span class="line">            TE[count].cost=closedge[v].Lowcost;</span><br><span class="line">            count++;</span><br><span class="line">            closedge[v].Lowcost=<span class="number">0</span>;</span><br><span class="line">            closedge[v].Vex=<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">//进行一些操作使得它们保持最小</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(closedge[j].Vex!=<span class="number">-1</span>&amp;&amp;Edge[v][j]&lt;closedge[j].Lowcost)</span><br><span class="line">                &#123;</span><br><span class="line">                    closedge[j].Lowcost=Edge[v][j];</span><br><span class="line">                    closedge[j].Vex=v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//prim</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 10</span></span><br><span class="line"><span class="comment">0 1 1</span></span><br><span class="line"><span class="comment">0 2 4</span></span><br><span class="line"><span class="comment">0 3 7</span></span><br><span class="line"><span class="comment">1 2 4</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">1 5 2</span></span><br><span class="line"><span class="comment">2 5 5</span></span><br><span class="line"><span class="comment">2 4 3</span></span><br><span class="line"><span class="comment">3 4 6</span></span><br><span class="line"><span class="comment">4 5 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Prim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>BinTree</title>
    <url>/2019/10/27/%20BinTree/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">BinTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinTreeNode&lt;T&gt;*left;</span><br><span class="line">    BinTreeNode&lt;T&gt;*right;</span><br><span class="line">    T data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinTreeNode(<span class="keyword">const</span> T&amp;item,BinTreeNode&lt;T&gt;*L=<span class="literal">NULL</span>,BinTreeNode&lt;T&gt;*R=<span class="literal">NULL</span>):data(item),left(L),right(R)&#123;&#125;</span><br><span class="line">    BinTreeNode&lt;T&gt;*GetLeft()<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    BinTreeNode&lt;T&gt;*GetRight()<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetLeft</span><span class="params">(BinTreeNode&lt;T&gt;*L)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        left=L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetRight</span><span class="params">(BinTreeNode&lt;T&gt;*R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        right=R;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">GetData</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> data;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetData</span><span class="params">(<span class="keyword">const</span> T&amp;item)</span></span>&#123;data=item;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">BinTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinTreeNode&lt;T&gt;*root;</span><br><span class="line">    T stop;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinTree(BinTreeNode&lt;T&gt;*t=<span class="literal">NULL</span>):root(t)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NorecPreOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NorecInOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NorecPostOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CreateBinTree</span><span class="params">(T tostop)</span></span>;</span><br><span class="line">    BinTreeNode&lt;T&gt;* Create();</span><br><span class="line">    BinTreeNode&lt;T&gt;*CopyTree(BinTreeNode&lt;T&gt;*t);</span><br><span class="line">    BinTreeNode&lt;T&gt;*Father(BinTreeNode&lt;T&gt;*t,BinTreeNode&lt;T&gt;*p);</span><br><span class="line">    BinTreeNode&lt;T&gt;*Find(BinTreeNode&lt;T&gt;*t,<span class="keyword">const</span> T&amp;item)<span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InsertLeft</span><span class="params">(T item,BinTreeNode&lt;T&gt;*t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InsertRight</span><span class="params">(T item,BinTreeNode&lt;T&gt;*s)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DelSubtree</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span></span>;</span><br><span class="line">    BinTreeNode&lt;T&gt;*GetRoot()&#123;<span class="keyword">return</span> root;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetRoot</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span></span>&#123;root=t;&#125;</span><br><span class="line">    <span class="function">T <span class="title">getStop</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> stop;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetStop</span><span class="params">(T tostop)</span></span>&#123;stop=tostop;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> root==<span class="literal">NULL</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:PreOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        PreOrder(t-&gt;GetLeft());</span><br><span class="line">        PreOrder(t-&gt;GetRight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:InOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        InOrder(t-&gt;GetLeft());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        InOrder(t-&gt;GetRight());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:PostOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PostOrder(t-&gt;GetLeft());</span><br><span class="line">        PostOrder(t-&gt;GetRight());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:NorecInOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BinTreeNode&lt;T&gt;*&gt;S;</span><br><span class="line">    <span class="keyword">while</span>(t!=<span class="literal">NULL</span>||S.empty()==<span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            S.push(t);</span><br><span class="line">            t=t-&gt;GetLeft();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S.empty()==<span class="literal">true</span>)<span class="keyword">return</span> ;</span><br><span class="line">        t=S.top();</span><br><span class="line">        S.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        t=t-&gt;GetRight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:NorecPreOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BinTreeNode&lt;T&gt;*&gt;S;</span><br><span class="line">    S.push(t);</span><br><span class="line">    <span class="keyword">while</span>(S.empty()==<span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=S.top();</span><br><span class="line">        S.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;GetRight()!=<span class="literal">NULL</span>) S.push(t-&gt;GetRight());</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;GetLeft()!=<span class="literal">NULL</span>) S.push(t-&gt;GetLeft());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:NorecPostOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    pair&lt;BinTreeNode&lt;T&gt;*,<span class="keyword">int</span>&gt; p;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> ;</span><br><span class="line">    p=make_pair(t,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">stack</span>&lt;pair&lt;BinTreeNode&lt;T&gt;*,<span class="keyword">int</span>&gt;&gt;S;</span><br><span class="line">    S.push(p);</span><br><span class="line">    <span class="keyword">while</span>(S.empty()==<span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=S.top();</span><br><span class="line">        S.pop();</span><br><span class="line">        <span class="keyword">if</span>(p.second==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p.second++;</span><br><span class="line">            S.push(p);</span><br><span class="line">            <span class="keyword">if</span>((p.first)-&gt;GetLeft()!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p.first=(p.first)-&gt;GetLeft();</span><br><span class="line">                p.second=<span class="number">0</span>;</span><br><span class="line">                S.push(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(p.second==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p.second++;</span><br><span class="line">                S.push(p);</span><br><span class="line">                <span class="keyword">if</span>((p.first)-&gt;GetRight()!=<span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    p.first=(p.first)-&gt;GetRight();</span><br><span class="line">                    p.second=<span class="number">0</span>;</span><br><span class="line">                    S.push(p);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;p.first-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:LevelOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;BinTreeNode&lt;T&gt;*&gt;Q;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> ;</span><br><span class="line">    BinTreeNode&lt;T&gt; *p=t;</span><br><span class="line">    Q.push(p);</span><br><span class="line">    <span class="keyword">while</span>(Q.empty()==<span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;GetLeft()!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(p-&gt;GetLeft());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;GetRight()!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(p-&gt;GetRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:CreateBinTree(T tostop)</span><br><span class="line">&#123;</span><br><span class="line">    SetStop(tostop);</span><br><span class="line">    root=Create();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BinTreeNode</span>&lt;T&gt;* <span class="title">BinTree</span>&lt;T&gt;:</span>:Create()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    BinTreeNode&lt;T&gt;*t,*t1,*t2;</span><br><span class="line">    T item;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;item;</span><br><span class="line">    <span class="keyword">if</span>(item==stop)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    t=<span class="keyword">new</span> BinTreeNode&lt;T&gt;(item,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    t1=Create();</span><br><span class="line">    t-&gt;SetLeft(t1);</span><br><span class="line">    t2=Create();</span><br><span class="line">    t-&gt;SetRight(t2);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BinTreeNode</span>&lt;T&gt;*<span class="title">BinTree</span>&lt;T&gt;:</span>:CopyTree(BinTreeNode&lt;T&gt;*t)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    BinTreeNode&lt;T&gt;*L=<span class="literal">nullptr</span>,*R=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;GetLeft()!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L=CopyTree(t-&gt;GetLeft());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;GetRight()!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        R=CopyTree(t-&gt;GetRight());</span><br><span class="line">    &#125;</span><br><span class="line">    BinTreeNode&lt;T&gt;*nod=<span class="keyword">new</span> BinTreeNode&lt;T&gt;(t-&gt;GetData(),L,R);</span><br><span class="line">    <span class="keyword">return</span> nod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BinTreeNode</span>&lt;T&gt;*<span class="title">BinTree</span>&lt;T&gt;:</span>:Father(BinTreeNode&lt;T&gt;*t,BinTreeNode&lt;T&gt;*p)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    BinTreeNode&lt;T&gt;*q;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>||p==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;GetLeft()==p||t-&gt;GetRight()==p) <span class="keyword">return</span> t;</span><br><span class="line">    q=Father(t-&gt;GetLeft(),p);</span><br><span class="line">    <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)<span class="keyword">return</span> q;</span><br><span class="line">    <span class="keyword">return</span> Father(t-&gt;GetRight(),p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BinTreeNode</span>&lt;T&gt;*<span class="title">BinTree</span>&lt;T&gt;:</span>:Find(BinTreeNode&lt;T&gt;*t,<span class="keyword">const</span> T&amp;item)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    BinTreeNode&lt;T&gt;*p;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;data==item) <span class="keyword">return</span> t;</span><br><span class="line">    p=Find(t-&gt;GetLeft(),item);</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) <span class="keyword">return</span> p;</span><br><span class="line">    p=Find(t-&gt;GetRight(),item);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:Del(BinTreeNode&lt;T&gt;*t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Del(t-&gt;GetLeft());</span><br><span class="line">        Del(t-&gt;GetRight());</span><br><span class="line">        <span class="keyword">delete</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:InsertLeft(T item,BinTreeNode&lt;T&gt;*s)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    BinTreeNode&lt;T&gt;*p=<span class="keyword">new</span> BinTreeNode&lt;T&gt;(item);</span><br><span class="line">    p-&gt;SetLeft(s-&gt;GetLeft());</span><br><span class="line">    p-&gt;SetRight(<span class="literal">NULL</span>);</span><br><span class="line">    s-&gt;SetLeft(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:InsertRight(T item,BinTreeNode&lt;T&gt;*s)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    BinTreeNode&lt;T&gt;*p=<span class="keyword">new</span> BinTreeNode&lt;T&gt;(item);</span><br><span class="line">    p-&gt;SetRight(s-&gt;GetRight());</span><br><span class="line">    s-&gt;SetRight(p);</span><br><span class="line">    p-&gt;SetLeft(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:DelSubtree(BinTreeNode&lt;T&gt;*t)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(t==root)</span><br><span class="line">    &#123;</span><br><span class="line">        Del(t);</span><br><span class="line">        root=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    BinTreeNode&lt;T&gt;*f=Father(root,t);</span><br><span class="line">    <span class="keyword">if</span>(f!=<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f-&gt;GetLeft()==t) f-&gt;SetLeft(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(f-&gt;GetRight()==t)f-&gt;SetRight((<span class="literal">NULL</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    Del(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    BinTree&lt;<span class="keyword">int</span>&gt; t;</span><br><span class="line">    t.CreateBinTree(<span class="number">-1</span>);</span><br><span class="line">    BinTreeNode&lt;<span class="keyword">int</span>&gt;*t2=t.Find(t.root,<span class="number">4</span>);</span><br><span class="line">    t.InsertRight(<span class="number">6</span>,t2);</span><br><span class="line">    t.InOrder(t.root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 2 4 -1 5 -1 -1 -1 3 -1 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>EulerSieve</title>
    <url>/2019/10/21/%20EulerSieve/</url>
    <content><![CDATA[<h3 id="EulerSieve"><a href="#EulerSieve" class="headerlink" title="EulerSieve"></a>EulerSieve</h3><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>​    O(n)</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10100</span>;   </span><br><span class="line"><span class="keyword">int</span> prime[maxn], pNum = <span class="number">0</span>;              <span class="comment">// prime记录素数，pNum记录素数个数</span></span><br><span class="line">                                        <span class="comment">//保存的值为0~pNum-1</span></span><br><span class="line"><span class="keyword">bool</span> p[maxn] = &#123;<span class="literal">false</span>&#125;;                 <span class="comment">// p记录当前数是否被筛去</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EulerSieve</span><span class="params">(<span class="keyword">int</span> n)</span>                  <span class="comment">// 查找记录2-n的素数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p[i] == <span class="literal">false</span>)              <span class="comment">// 如果未被筛过，则为素数</span></span><br><span class="line">			prime[pNum++] = i;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; pNum; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i * prime[j] &gt; n)       <span class="comment">// 当要标记的合数超出范围时跳出</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			p[i * prime[j]] = <span class="literal">true</span>;     <span class="comment">// 将已经记录的素数的倍数进行标记</span></span><br><span class="line">			<span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)      <span class="comment">//关键步骤</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><p><a href="https://www.cnblogs.com/cicos/p/10258703.html" target="_blank" rel="noopener">时间复杂度证明</a></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>qpow</title>
    <url>/2019/10/21/%20qpow/</url>
    <content><![CDATA[<h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><h5 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h5><p>​    求x^n的值</p>
<h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>​    O(log n)</p>
<h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><p>​    通过加大底数的权重来使得乘法次数更少</p>
<p>​    1.假设n为奇数：x^n=x*x^(n-1)            则将x计入结果</p>
<p>​    2.假设n为偶数：x^n=x^(n/2)*x^(n/2)    则将x的权重变为x^2</p>
<h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*快速幂运算 log 2 n*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL n, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LL result = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n!=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">			result = (result * a) % mod;<span class="comment">//计入结果</span></span><br><span class="line">		a = (a * a) % mod;<span class="comment">//权重变大</span></span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;<span class="comment">//n=n/2;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Kruskal</title>
    <url>/2019/10/10/%20Kruskal/</url>
    <content><![CDATA[<h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><blockquote>
<p>Kruskal总是维护无向连通图的最小生成森林</p>
<p>最终得到该图的最小生成树</p>
</blockquote>
<h5 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h5><p>​    <strong>Kruskal算法</strong>是一种用来查找<a href="https://baike.baidu.com/item/最小生成树" target="_blank" rel="noopener">最小生成树</a>的贪心算法，由Joseph Kruskal在1956年发表。</p>
<h5 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h5><p>​    有n个点m条无向边的图，且已知每一条边(x,y,z)，代表点x和点y之间有哦权值为z的无向边。    </p>
<h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>​    O(m log m)</p>
<h5 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h5><p>​    并查集        <del>先挖坑</del></p>
<h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><p>​        在遍历所给无向连通图的过程中，kruskal 总是维护着最小生成森林。</p>
<p>​    最终得到最小生成树。</p>
<p>​        有以下步骤：</p>
<p>​    1.初始化并查集，每一个点各自构成一个集合</p>
<p>​    2.对边集S进行从小到大排序</p>
<p>​    3.从S中取出一条边（注意：现在是从S中从小到大取出，判断这条边的两个端点是否属于同一个集合（使用并查集维护），不是则将端点x和端点y使用并查集combine起来。且将边加入最小生成森林。</p>
<p>​    4.不断重复S直至访问完所有边</p>
<h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以边集来保存图，假设有m条边</span></span><br><span class="line"><span class="comment">//时间复杂度为mlogm</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">11010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">&#125;;<span class="comment">//代表x和y两点之间有路且权值为z</span></span><br><span class="line">edge S[MAX];</span><br><span class="line"><span class="keyword">int</span> Father[MAX];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> edge&amp;a,<span class="keyword">const</span> edge&amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a.z&lt;b.z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;S[i].x,&amp;S[i].y,&amp;S[i].z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//并查集找父亲</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x!=Father[x])</span><br><span class="line">        x=Father[x];</span><br><span class="line">    <span class="keyword">return</span> x;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//combine</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       Father[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        Father[i]=i;</span><br><span class="line">    sort(S+<span class="number">1</span>,S+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=Find(S[i].x);</span><br><span class="line">        y=Find(S[i].y);</span><br><span class="line">        <span class="keyword">if</span>(x!=y)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=ans+S[i].z;</span><br><span class="line">            combine(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1233" target="_blank" rel="noopener">模板题</a></p>
</blockquote>
<p>​    回顾学习算法的第四天。<del>戒掉可乐的第四天</del></p>
<p>​        Orz</p>
<p>​        Orz</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Kruskal</title>
    <url>/2019/10/10/%20test/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="Hey, password is required here." />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9acc7689af3e1ec5adcafb785b9d92ae95d06237be9d9e6f1dfe9d0d2ac01db5">b73c6a0299e1f1cb68bdbc6168e55e4cecb12a704cf6a248349f5812bfe20f24</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Manacher</title>
    <url>/2019/10/09/%20Manacher/</url>
    <content><![CDATA[<h3 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h3><p>​    1975年，一个叫Manacher的人发明了一个Manacher算法</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​    给定一个字符串S，求出其最大回文子串</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><blockquote>
<p>O(n)</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>对称性</p>
</blockquote>
<h5 id="1-字符串处理"><a href="#1-字符串处理" class="headerlink" title="1.字符串处理"></a>1.字符串处理</h5><p>​    由于回文分为偶回文（比如 bccb）和奇回文（比如 bcacb），而在处理奇偶问题上会比较繁琐，所以这里我们使用一个技巧，具体做法是：在字符串首尾，及各字符间各插入一个字符（前提这个字符未出现在串里）。</p>
<p>​    Example：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>原串S</th>
<th>a</th>
<th>c</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>转换后的串T</td>
<td>#</td>
<td>a</td>
<td>#</td>
<td>c</td>
<td>#</td>
<td>a</td>
<td>#</td>
<td>b</td>
<td>#</td>
<td>a</td>
<td>#</td>
</tr>
</tbody>
</table>
</div>
<p>​    为了防止越界，做出以下修改，使得T变成$#a#a#a#b#a#@</p>
<h5 id="2-Len数组"><a href="#2-Len数组" class="headerlink" title="2.Len数组"></a>2.Len数组</h5><p>​    设有字符串T上的位置i，Len[i]表示以i为中心的回文串的半径，和KMP算法相比，这里的数组并非只是预处理的作用，而是在线的处理</p>
<p>​    可得：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>i</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
</tr>
</thead>
<tbody>
<tr>
<td>T[i]</td>
<td>#</td>
<td>a</td>
<td>#</td>
<td>c</td>
<td>#</td>
<td>a</td>
<td>#</td>
<td>b</td>
<td>#</td>
<td>a</td>
<td>#</td>
</tr>
<tr>
<td>Len[i]</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>​    如何得到Len数组？</p>
<p>​    <del>（先挖坑）</del></p>
<p>​    主要思想是利用对称性</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">110000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> S[MAX];<span class="comment">//原串</span></span><br><span class="line"><span class="keyword">char</span> tmp[MAX*<span class="number">2</span>+<span class="number">10</span>];<span class="comment">//辅助字符串T</span></span><br><span class="line"><span class="keyword">int</span> Len[MAX*<span class="number">2</span>+<span class="number">10</span>];<span class="comment">//Len数组</span></span><br><span class="line"><span class="keyword">int</span> N1;<span class="comment">//原串S的长度</span></span><br><span class="line"><span class="keyword">int</span> N2;<span class="comment">//T的长度</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,N1=<span class="built_in">strlen</span>(S);</span><br><span class="line">    N2=N1*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    tmp[<span class="number">0</span>]=<span class="string">'$'</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*N1;i=i+<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=<span class="string">'#'</span>;</span><br><span class="line">        tmp[i+<span class="number">1</span>]=S[i/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tmp[i]=<span class="string">'#'</span>;</span><br><span class="line">    tmp[i+<span class="number">1</span>]=<span class="string">'@'</span>;</span><br><span class="line">    <span class="comment">//这样处理的原因是优化后面的操作，比如这样的情况 "bb"</span></span><br><span class="line">    tmp[i+<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到最大的回文串长度</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetLen();</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> po=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mx&gt;i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//对称性,两者取最小</span></span><br><span class="line">            <span class="keyword">if</span>((mx-i)&lt;Len[<span class="number">2</span>*po<span class="number">-1</span>])</span><br><span class="line">                Len[i]=mx-i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Len[i]=Len[<span class="number">2</span>*po<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//第三种情况</span></span><br><span class="line">            Len[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//不断向外扩展，巧妙</span></span><br><span class="line">        <span class="keyword">while</span>(tmp[i-Len[i]]==tmp[i+Len[i]])</span><br><span class="line">            Len[i]++;</span><br><span class="line">        <span class="comment">//更新值</span></span><br><span class="line">        <span class="keyword">if</span>(Len[i]+i&gt;mx)</span><br><span class="line">        &#123;</span><br><span class="line">            mx=Len[i]+i;</span><br><span class="line">            po=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Len[i]&gt;ans)</span><br><span class="line">            ans=Len[i];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> ans<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Manacher</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()&lt;<span class="number">2</span>)    <span class="keyword">return</span> s;</span><br><span class="line">        String t=<span class="string">"$"</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s.length();i++)   t+=<span class="string">"#"</span>+s.charAt(i);</span><br><span class="line">        t+=<span class="string">"#@"</span>;</span><br><span class="line">        <span class="keyword">int</span> n=t.length();</span><br><span class="line">        <span class="keyword">int</span> [] p=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            p[i]=mx&gt;i ? Math.min(mx-i,p[<span class="number">2</span>*id-i]):<span class="number">1</span>;<span class="comment">//第一种情况+第二种情况：第三种情况</span></span><br><span class="line">            <span class="keyword">while</span>(t.charAt(i+p[i])==t.charAt(i-p[i]))   p[i]++;<span class="comment">//无论哪一种都可以进行拓展</span></span><br><span class="line">            <span class="keyword">if</span>(mx&lt;i+p[i])   &#123;<span class="comment">//更新右边界以及右边界的中心</span></span><br><span class="line">                mx=i+p[i];</span><br><span class="line">                id=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(maxLength&lt;p[i]-<span class="number">1</span>)&#123;<span class="comment">//更新最长回文串长度</span></span><br><span class="line">                maxLength=p[i]-<span class="number">1</span>;</span><br><span class="line">                index=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start=(index-maxLength)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start,start+maxLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    <a href="https://blog.csdn.net/dyx404514/article/details/42061017" target="_blank" rel="noopener">https://blog.csdn.net/dyx404514/article/details/42061017</a></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>KMP</title>
    <url>/2019/10/01/%20KMP/</url>
    <content><![CDATA[<h3 id="名字由来"><a href="#名字由来" class="headerlink" title="名字由来"></a>名字由来</h3><p>​    由<strong>K</strong>nuth，<strong>M</strong>orris,<strong>P</strong>ratt三人所设计的线性时间字符串匹配算法</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>​    设有长度为n的文本串S和长度为m的匹配串P，求匹配串成功匹配文本串字串的首地址</p>
<p>​    O(n+m)</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h5 id="引出"><a href="#引出" class="headerlink" title="引出"></a>引出</h5><p>​    对匹配串预处理生成一种失配的映射（或者称为函数，其实称为函数会更加恰当），我们姑且把这个函数成为Next函数。当匹配串对文本串进行匹配时，不妨想象一下，我们在失配的时候对应的失配位置<strong>i</strong>，都会有相同的移动位移，这样就会产生一个关于<strong>i</strong>的函数，我们姑且把这样的函数称之为Next(i)，那么这个函数的返回值是什么呢？在不同的博客上它的返回值是不一样的，比如，有些直接返回P下一个需要比较的位置，有些是返回P需要移动的距离（自行脑补一下），有些是返回最大该位置的最大的前后缀一样的字串的字符数，有些的Next函数是经过优化过的，自然返回值和原来的有些不一样。不过它们的使用方法都大同小异。</p>
<p>​    我们以返回值为P下一个需要匹配的位置为例。</p>
<h5 id="Next函数的产生"><a href="#Next函数的产生" class="headerlink" title="Next函数的产生"></a>Next函数的产生</h5><p>​    <del>先挖坑</del></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">int</span> Next[],<span class="keyword">char</span> P[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pLen=<span class="built_in">strlen</span>(P);</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    Next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;pLen<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>||P[k]==P[j])</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            j++;</span><br><span class="line">            Next[j]=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k=Next[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="NextPro数组的产生"><a href="#NextPro数组的产生" class="headerlink" title="NextPro数组的产生"></a>NextPro数组的产生</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetProNext</span><span class="params">(<span class="keyword">int</span> Next[],<span class="keyword">char</span> P[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pLen=<span class="built_in">strlen</span>(P);</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    Next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;pLen<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>||P[k]==P[j])</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="comment">//只是比Next数组多了一个判断罢了</span></span><br><span class="line">            <span class="keyword">if</span>(P[j]!=P[k])</span><br><span class="line">                Next[j]=k;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Next[j]=Next[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            k=Next[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="KMPSearch代码"><a href="#KMPSearch代码" class="headerlink" title="KMPSearch代码"></a>KMPSearch代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">char</span> P[MAX];</span><br><span class="line"><span class="keyword">char</span> S[MAX];</span><br><span class="line"><span class="keyword">int</span> Next[MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KmpSearch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetProNext();<span class="comment">//只需要在这里预处理P的Next数组即可</span></span><br><span class="line">    <span class="keyword">int</span> sLen=<span class="built_in">strlen</span>(S);</span><br><span class="line">    <span class="keyword">int</span> pLen=<span class="built_in">strlen</span>(P);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;sLen&amp;&amp;j&lt;pLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||S[i]==P[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j=Next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==pLen)</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="这个讲解很棒"><a href="#这个讲解很棒" class="headerlink" title="这个讲解很棒"></a>这个讲解很棒</h3><p><a href="https://blog.csdn.net/v_JULY_v/article/details/7041827" target="_blank" rel="noopener">https://blog.csdn.net/v_JULY_v/article/details/7041827</a></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/08/30/%20hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2012/04/04/%20Linux/</url>
    <content><![CDATA[<h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h4><h5 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h5><p>$:wq，保存并退出$</p>
<p>$:w,保存$</p>
<p>$:w \ filename,另存为filename$</p>
<p>$:wq!,保存强制退出$</p>
<p>$gg,使光标到文件头$</p>
<p>$G,使光标移到文件尾$</p>
<p>$nG,使光标移到第n行$</p>
<p>$ab,缩写，unab，取消缩写$</p>
<p>$宏操作符，map，unmap,取消宏\ page 98$</p>
<p>$u,撤销最近的操作$</p>
<h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><p>$command\ source\ target$</p>
<p><strong>创建文件</strong></p>
<p>$mkdir\ filename,创建目录$</p>
<p><strong>移除文件</strong></p>
<p>$rm\ filename,移除文件$</p>
<p><strong>复制文件</strong></p>
<p>$cp\ filename1\ filename2$</p>
<p>$cp\ filename\ list$</p>
<p>$cp\ -r\ list1(or\ filename)\ list2,若list2不存在则创建$</p>
<p><strong>移动文件</strong></p>
<p>$mv\ filename\ list$</p>
<p>$mv\  filename1\ filename2,将filename1文件名改为filename2$</p>
<p><strong>链接文件</strong></p>
<p><strong>寻找文件</strong></p>
<p>$find\ page125$</p>
<p><strong>计算字数</strong></p>
<p>$wc\ filename,显示：行数(-l)，单词数(-w)，字符数(-c)$</p>
<p>输出重定向，运行用户把进程的输出保存在文件中，然后，用户可以编辑，打印或者作为其他进程的输入。</p>
<p>$command \ &gt; \ filename\ 若有，则覆盖\command\  &gt;&gt;\ filename，若有，则添加到文件结尾$</p>
<p>$cat\ &gt; filename,创建文件，但输入时无法修改，若有，则覆盖\cat\ &gt;&gt;\ filename,创建文件，但输入时违法修改，若有，则添加到文件结尾$</p>
<p>$cat\ filename1\ &gt;\ filename2\cat\ filename1\ filename2…\ filenamei\ &gt;&gt;\ target$</p>
<p><strong>显示文件</strong></p>
<p>$head\ -n\ filename,显示文件的前n行$</p>
<p>$tail\ -n\ filename,显示文件的后n行$</p>
<p>$tail\ -n +10\ filename|head -n\ 10,显示第10-20行$</p>
<p><strong>查找文件</strong></p>
<p>$find\ . -name \ filename,寻找名为filename的文件$</p>
<p>$find\ . \ -name\ filename\ -exec\  -cp\  {}\ file\  \verb|| ;,寻找名为filename的文件并且复制到file文件夹中$</p>
<p>$eg: ls &gt;&gt; a,who &gt;&gt; a,date &gt;&gt; a$</p>
<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>用户只能关闭自己的进程，root可以关闭所有进程</p>
<h3 id="tee-分离输出"><a href="#tee-分离输出" class="headerlink" title="tee 分离输出"></a>tee 分离输出</h3><ul>
<li>多重输出</li>
<li>tee命令和|一起使用实现分离输出</li>
</ul>
<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><ul>
<li>-a    不覆盖原来内容 </li>
<li>-i     不响应中断     </li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
</search>
