<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>练习</title>
    <url>/2020/07/17/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><h4 id><a href="#" class="headerlink" title=" "></a> </h4>]]></content>
      <categories>
        <category>接口技术</category>
      </categories>
  </entry>
  <entry>
    <title>微型计算机接口技术课后习题</title>
    <url>/2020/07/17/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E5%BE%AE%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h2 id="0x01-Pentium保护模式存储管理"><a href="#0x01-Pentium保护模式存储管理" class="headerlink" title="0x01 Pentium保护模式存储管理"></a>0x01 Pentium保护模式存储管理</h2><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h4><p>简述虚拟存储器的含义，试在存储层次，功能，结构，信息传送单位，操作过程等方面对比虚拟存储器和Cache存储器。</p>
<ul>
<li>虚拟存储器是由主存储器，辅助存储器，辅助硬件和操作系统管理软件组成的一种<strong>存储体系</strong>。</li>
<li>其目的是为了增加存储器的容量，速度接近于主存储器，单位造价接近辅助存储器</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/07/12/U3FHh9.png" alt="虚拟存储器和Cache存储器对比.png"></p>
<h4 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h4><p>简要说明虚拟存储器的工作原理</p>
<ul>
<li>应用程序访问虚拟存储器时，给出逻辑地址。然后进行<strong>内部地址</strong>变换得到物理地址，若要访问的信息在主存中，则访问主存储器，得到信息；若访问的信息不再主存中，则根据逻辑地址进行<strong>外部地址变换</strong>得到辅存地址；同时检查主存是否有空闲区，若无则根据替换算法将主存中某个块送到辅存，再把辅存地址中的信息块送到主存；若有，则直接送入主存。</li>
</ul>
<h4 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h4><p>虚拟存储器指的是主存-辅存存储层次，它给用户提供了一个比实际<strong><strong>空间大得多的</strong></strong>空间。</p>
<ul>
<li>物理</li>
<li>虚拟</li>
</ul>
<h4 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h4><p>说明3类地址空间的含义。</p>
<ul>
<li>虚拟地址空间，是程序员用来编写程序的地址空间，其对应的地址称为虚地址或逻辑地址。</li>
<li>主存地址空间，是实存地址空间，是存储，运行程序的空间，其相应的地址称为主存物理地址或实地址。</li>
<li>辅存地址空间，是磁盘存储器的地址空间，是用来存放程序的空间，器地址称为辅存地址或磁盘地址。</li>
</ul>
<h4 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h4><p>段描述符按段的性质分为哪几类？</p>
<ul>
<li>分为3类，程序段描述符，系统段描述符，门描述符。</li>
</ul>
<h4 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h4><p><code>Pentium</code>的实地址方式和保护模式由<em>__</em>寄存器的PE位来选择。</p>
<ul>
<li><code>CR0</code></li>
</ul>
<h4 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h4><p>段描述符高速缓冲寄存器有什么作用？</p>
<ul>
<li>段描述符高速缓冲寄存器即段寄存器。其作用如下。</li>
<li><code>CS</code>，存放正在运行的程序代码的段基址</li>
<li><code>DS</code>，存放数据段的段基址</li>
<li><code>SS</code>，存放当前堆栈段的段基址</li>
<li><code>ES</code>，存放附加的数据段的段基址</li>
</ul>
<h4 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h4><p>说明向保护模式转换的方法及转换前的准备工作</p>
<ul>
<li>初始化<code>IDT</code>，使其包含至少32种中断类型有效的中断门描述符</li>
<li>初始化<code>GDT</code>，使其第<code>0</code>项为一个空描述符，并且至少包含一个数据段描述符，一个代码段描述符，一个堆栈段描述符。（为什么？<code>orz</code> :question:</li>
</ul>
<h4 id="1-9"><a href="#1-9" class="headerlink" title="1.9"></a>1.9</h4><p><code>Pentium</code>微处理器的虚拟地址有多少位？虚拟地址的2个组成部分分别叫什么名字？</p>
<ul>
<li>46位</li>
<li>段选择符；段内偏移量</li>
</ul>
<h4 id="1-10"><a href="#1-10" class="headerlink" title="1.10"></a>1.10</h4><p><code>Pentium</code>微处理器的保护机制有哪些措施？</p>
<ul>
<li>任务间存储空间的保护</li>
<li>段属性和界限的保护</li>
<li>特权级保护</li>
</ul>
<h4 id="1-11"><a href="#1-11" class="headerlink" title="1.11"></a>1.11</h4><p><code>Pentium</code>微处理器是怎样将虚拟地址转换成物理地址的？</p>
<ul>
<li>在实地址模式下，虚拟地址的形式为<code>[段地址]:[偏移地址]</code>，物理地址是这样形成：段寄存器内容左移4位加上偏移地址。</li>
<li>在保护模式下，虚拟地址的形式为<code>[段选择符]:[偏移地址]</code>，物理地址是这样形成：段选择符在段寄存器中，但是并不直接表示段基址，通过段选择符部分的13位索引字段确定段描述符再段描述符表的位置，取出段描述符中的32位段基址与偏移量相加得到线性地址，若不启用分页则线性地址作为物理地址。</li>
</ul>
<h4 id="1-12"><a href="#1-12" class="headerlink" title="1.12"></a>1.12</h4><p>试说明<code>Pentium</code>微处理器段的转换过程</p>
<ul>
<li><p>我们不妨以访问数据段的访问过程来说明段的转换过程，其他段类似</p>
</li>
<li><p>现在有一个虚地址，由段选择符和段内偏移构成</p>
</li>
</ul>
<ol>
<li>将16位的段选择符送入DS</li>
<li>根据段选择符中<code>TI</code>的值决定选择再局部描述符表<code>LDT</code>还是选择再全局描述符表<code>GDT</code>来寻找段描述符；由于二者类似，不妨假设选择LDT。</li>
<li>段选择符中的<code>INDEX</code>字段乘<code>8</code>后加上<code>LDTR</code>中的基地址得到<code>LDT</code>中的数据段描述符的地址。</li>
<li>将对应的段描述符的内容送入<code>DS</code>段寄存器的不可见部分，其中包括32位基地址，20位段限，12位属性。</li>
<li>将<code>DS</code>段寄存器32位基地址与虚地址中的段内偏移向加得到线性地址。</li>
</ol>
<h4 id="1-13"><a href="#1-13" class="headerlink" title="1.13"></a>1.13</h4><p>试说明数据段描述符与代码段描述符的异同点。</p>
<ul>
<li><p>段描述符的格式相同，都属于程序段描述符</p>
</li>
<li><p><code>TYPE</code>类型字段不同，<code>D/B</code>字段表示含义不同</p>
</li>
</ul>
<h4 id="1-14"><a href="#1-14" class="headerlink" title="1.14"></a>1.14</h4><p><code>IDTR</code>,<code>GDTR</code>,<code>LDTR</code>分别代表什么寄存器，其内容是什么信息？有什么作用？</p>
<ul>
<li>中断描述符表寄存器；全局描述符表寄存器；局部描述符表寄存器</li>
<li><code>IDTR</code>保存着32位基址和16位界限； <code>GDTR</code>保存着<code>GDT</code>的32位基地址和<code>16</code>位界限；<code>LDTR</code>保存着16位选择符，32位基地址，20位界限，12位属性组成。</li>
<li>作用<ul>
<li><code>IDTR</code>：32位基址表示<code>IDT</code>起始位置，16位界限表示<code>IDT</code>的描述符项数</li>
<li><code>GDTR</code>：32位基址表示<code>GDT</code>起始位置，16位界限表示<code>GDT</code>的描述符项数</li>
<li><code>LDTR</code>：32位基址标识<code>LDT</code>在内存中的起始物理地址，20位界限表示<code>LDT</code>的长度，而16位段选择符是指向<code>GDT</code>中<code>LDT</code>描述符的选择符，需要从<code>GDT</code>中读取段描述符，并且装入<code>LDTR</code>中程序不可见部分。才能找到<code>LDT</code></li>
</ul>
</li>
</ul>
<h4 id="1-15"><a href="#1-15" class="headerlink" title="1.15"></a>1.15</h4><p><code>Pentium</code>可进行段页式存储器管理。<code>Pentium</code>的段描述符为8字节，包括了段基址，段长和属性等信息（段基址32位，段长20位），其中有一个G位用于定义段长单位，G=0定义段长以字节为单位，G=1定义段长以页面为单位，针对<code>Pentium</code>，分析回答以下问题：</p>
<ol>
<li>一个页面包含多少个字节？其页面数据容量是否可变？若可以改变，则简要说明改变的方法。</li>
<li>当G=0时，该段的最大数据容量是多少个字节？</li>
<li>当G=1时，该段的最大数据容量时多少个字节？</li>
</ol>
<h2 id="0x03-中断"><a href="#0x03-中断" class="headerlink" title="0x03 中断"></a>0x03 中断</h2><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h4><p>什么叫中断？在微机系统中为什么要使用中断？</p>
<ul>
<li>CPU在正常执行当前程序，由某一事件引起CPU暂时停止当前任务，转去执行请求CPU暂停的服务程序，该服务程序执行完后又返回继续执行被暂停的程序，这一过程叫中断</li>
<li>主要作用<ul>
<li>实现主机与<code>I/O</code>设备的并行工作</li>
<li>利用中断进行实时处理</li>
<li>利用中断方式进行人机对话</li>
<li>故障处理</li>
<li>多处理机系统中各处理机之间协调作用</li>
</ul>
</li>
</ul>
<h4 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h4><p>什么叫中断源？中断嵌套的含义是什么？</p>
<ul>
<li>凡是能够提出中断请求的设备或异常故障均被称为中断源</li>
<li>在执行中断服务程序的过程中又发生新的中断</li>
</ul>
<h4 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h4><p><code>Pentium</code>微处理机内部有哪几类中断源？简要说明各类的特点是什么？</p>
<ul>
<li>分为四类中断<ul>
<li>可屏蔽中断<code>INTR</code></li>
<li>非屏蔽中断<code>NMI</code></li>
<li>软件中断（执行<code>INTO</code>,<code>INT3</code>,<code>INT n</code>,<code>BOUND</code>指令引起的中断）</li>
<li>异常</li>
</ul>
</li>
<li><code>INTR</code>通常是由<code>Intel 8259A</code>中断控制器驱动，向<code>INTR</code>引脚发中断请求，通过数据总线向CPU发中断类型码</li>
<li><code>NMI</code>通常用来通知<code>CPU</code>发生重大故障的事件，比如电源掉电。不受<code>IF</code>中断允许标志的影响，优先级非常高。上升沿触发信号</li>
<li>软件中断<ul>
<li>人为设置在程序中</li>
<li>类型码包含在指令中，所以不执行中断响应总线周期</li>
<li>除<code>BOUND</code>指令外，中断返回地址为下一条指令</li>
</ul>
</li>
<li>异常是在CPU执行一条指令过程中出现的错误或者检测的异常情况产生的</li>
</ul>
<h4 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h4><p>在<code>Pentium</code>微处理机中中断和异常有何异同？</p>
<ul>
<li>中断是用来处理CPU以外的异常事件</li>
<li>异常时用来处理执行指令期间由CPU本身检测出来的某些异常事情作出的响应</li>
</ul>
<h4 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h4><p>通常CPU响应外部中断的条件有哪些？</p>
<ul>
<li>有中断请求</li>
<li>中断标志位<code>IF</code>=1</li>
</ul>
<h4 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h4><p>简述CPU响应中断后，中断处理的过程，用流程图表示</p>
<p><img src="https://i.loli.net/2020/07/17/aJcEH9tLU73FjkS.png" alt="Pentium实模式下中断处理过程"></p>
<h4 id="3-7"><a href="#3-7" class="headerlink" title="3.7"></a>3.7</h4><p>什么情况下需要有中断判优机构？程序查询式和中断向量式2种中断源识别与判优方案各有什么特点？</p>
<ul>
<li>系统遇到多个中断源同时请求中断的情况下，需要有中断判优机构。</li>
<li>程序查询式是软件查询，较为灵活，但是中断源多时，转至中断服务程序时间长</li>
<li>中断向量式是硬件优先级排队电路确定优先级，速度块，但是优先级固定不变。</li>
</ul>
<h4 id="3-8"><a href="#3-8" class="headerlink" title="3.8"></a>3.8</h4><p>什么叫中断向量？试说明<code>Pentium</code>微处理机可屏蔽硬件中断是怎样获得中断向量，从而进入中断程序的。</p>
<ul>
<li><p>中断向量是中断服务程序的入口地址。</p>
</li>
<li><p>根据<code>8259A</code>送道数据总线的中断类型码*4取得中断向量，把中断向量的前2个字节装入<code>IP</code>，后2个字节装入<code>CS</code>，这样CPU执行的下一条指令就是中断服务程序的第一条指令，也就是说，CPU进入了中断服务程序。</p>
</li>
</ul>
<h4 id="3-9"><a href="#3-9" class="headerlink" title="3.9"></a>3.9</h4><p>中断描述符表的作用是什么？其内保存的是什么信息？</p>
<ul>
<li>中断描述符表保存门描述符</li>
<li>门描述符中保存的信息有段选择符，32位偏移，还有属性用来在GDT或LDT中找到中断服务程序的基地址。</li>
</ul>
<h4 id="3-10"><a href="#3-10" class="headerlink" title="3.10"></a>3.10</h4><p><code>8259A</code>芯片是一种什么类型的芯片？试着说明<code>8259</code>芯片的主要功能。</p>
<ul>
<li>是一种中断管理芯片，简称PIC</li>
<li>主要作用<ul>
<li>管理8级优先权中断源</li>
<li>对任何级别中断源可单独屏蔽</li>
<li>向CPU发送可编程的标识码，即中断类型码</li>
<li>可与<code>Pentium</code>的CPU直接连接，不需要外加电路</li>
<li>多种工作方式</li>
</ul>
</li>
</ul>
<h4 id="38"><a href="#38" class="headerlink" title="38"></a>38</h4><p><code>INTR</code>与<code>NMI</code>的区别</p>
<ul>
<li>CPU在响应<code>NMI</code>时，不从外部设备读取中断类型码，因为<code>NMI</code>的中断类型码固定为2</li>
</ul>
]]></content>
      <categories>
        <category>接口技术</category>
      </categories>
  </entry>
  <entry>
    <title>OS习题</title>
    <url>/2020/07/14/%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/OS%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>什么是操作系统？操作系统有哪些特点？</p>
<ul>
<li><p>操作系统是位于硬件层之上，所有其他系统软件层之下的一个系统软件，通过它管理系统中的各种软件和资源，使它们能被充分利用，方便用户使用计算机系统。</p>
</li>
<li><p>特点</p>
<ul>
<li>并发性</li>
<li>共享性</li>
<li>异步性</li>
<li>虚拟性</li>
</ul>
</li>
</ul>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>硬件将处理器划分为两种，即管态和目态，这样做会给操作系统的设计带来什么好处？</p>
<ul>
<li>防止用户侵入系统，起到保护系统的作用</li>
</ul>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>何为特权指令？试举例说明。如果允许用户进程执行特权指令，会带来什么后果？举例说明</p>
<ul>
<li>特权指令：只能在管态下才能执行的指令称为特权指令</li>
<li>允许用户进程执行特权指令，则可能会导致停机，影响其他程序允许，甚至整个系统</li>
</ul>
<h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>中断向量在计算机中的存储位置是由硬件决定的，还是由软件决定的？</p>
<ul>
<li>是由硬件决定的</li>
</ul>
<h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p>中断向量的内容是由操作系统决定的还是由用户程序决定的？</p>
<ul>
<li>是由操作系统决定的</li>
</ul>
<h4 id="6-为什么？？"><a href="#6-为什么？？" class="headerlink" title="6 为什么？？"></a>6 为什么？？</h4><p>中断向量内的处理器状态字应当标明为管态还是目态？为什么？</p>
<ul>
<li>应标明为管态</li>
<li>处理机状态由目态转为管态的唯一途径是中断，因此会产生中断向量，此时需要把中断向量的处理器状态字标明为管态。</li>
</ul>
<h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><p>系统如何由目态转换为管态？如何由管态转换为目态？</p>
<ul>
<li>唯一途径是中断</li>
<li>修改程序状态字<code>PSW</code></li>
</ul>
<h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><p>中断与程序并发之间的关系是什么？</p>
<ul>
<li>中断时程序并发的前提条件，若没有中断，操作系统则不能获得系统控制权，无法对处理器重新分配。</li>
</ul>
<h4 id="9"><a href="#9" class="headerlink" title="9"></a>9</h4><p>根据用途说明“栈”和“堆”的差别？</p>
<ul>
<li>栈用来实现中断嵌套和子程序调用的参数，返回断点，局部变量，返回值</li>
<li>堆是为动态变量分配存储空间</li>
</ul>
<h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><p>何谓系统栈？何谓用户栈？系统栈有何用途？用户栈有何用途？</p>
<ul>
<li>系统栈在逻辑上属于操作系统空间，是系统空间中的一个区域。</li>
<li>用户栈属于用户空间，是内存中用户空间的一个区域。</li>
<li>系统栈用途：一是保存操作系统子程序间相互调用的返回点，参数，局部变量，返回值；二是中断响应时保存中断现场</li>
<li>用户栈用途：一是保存用户函数调用时的返回点，参数，局部变量，返回值。</li>
</ul>
<h4 id="11"><a href="#11" class="headerlink" title="11"></a>11</h4><p>为何无法确定用户堆栈段的长度？</p>
<ul>
<li><p>用户堆栈段的长度取决于</p>
<ul>
<li>进程子程序嵌套深度</li>
<li>子程序的参数和局部变量的数量和类型</li>
<li>动态变量的数量和类型</li>
</ul>
<p>这些在进程运行前无法确定，导致堆栈段的长度无法预先确定。</p>
</li>
</ul>
<h4 id="12"><a href="#12" class="headerlink" title="12"></a>12</h4><p>为何堆栈段的动态扩充可能导致进程空间的变迁？</p>
<ul>
<li>堆栈段的扩充意味着存储区域的增加，并要求与原来存储区域连续。若原存储处可扩展区域被其他进程所占用，可能需要将整个进程空间搬迁到另外一个区域，从而导致了进程空间的变迁。</li>
</ul>
<h4 id="13"><a href="#13" class="headerlink" title="13"></a>13</h4><p>何谓并行？何谓并发？在单处理器系统中，下述并行和并发信息哪些可能发生，哪些不会发生？</p>
<ol>
<li>进程与进程之间的并行</li>
<li>进程与进程之间的并发</li>
<li>处理器与设备之间的并行</li>
<li>处理器与通道之间的并行</li>
<li>通道与通道之间的并行</li>
<li>设备与设备之间的并行</li>
</ol>
<ul>
<li>并行指的时在微观上的同时，在绝对的同一时刻由多个进程同时向前推进</li>
<li>并发不需要微观上的同时，只需要从宏观上看多个程序都在向前推进</li>
<li>不可能发生：<code>(1)</code></li>
</ul>
<h4 id="14"><a href="#14" class="headerlink" title="14"></a>14</h4><p>何谓作业？它包括哪几个部分？各个部分的用途时什么？</p>
<ul>
<li>用户要求计算机系统为其完成的计算任务的集合称为作业</li>
<li>作业包括<ul>
<li>程序</li>
<li>作业说明书</li>
<li>数据</li>
</ul>
</li>
<li>程序是完成某一功能</li>
<li>数据是程序处理对象</li>
<li>作业说明书用来说明作业处理的步骤</li>
</ul>
<h4 id="15"><a href="#15" class="headerlink" title="15"></a>15</h4><p>试述批处理操作系统与分时操作系统的区别</p>
<ul>
<li>批处理操作系统是以脱机操作为标志的操作系统，作业逐批进入系统，逐批离开系统。无用户干扰</li>
<li>分时操作系统是以联机操作为标志的操作系统，适合程序的动态修改。需要与用户交互</li>
</ul>
<h4 id="16"><a href="#16" class="headerlink" title="16"></a>16</h4><p>从透明性和资源共享2个方面说明网络操作系统与分布式操作系统的差别。</p>
<ul>
<li>从透明性来看，网络操作系统用户能感觉到本地<code>HOST</code>与非本地<code>HOST</code>在地理额外i之上的差异；而在分布式系统中，所有<code>HOST</code>构成一个完整的，功能更加强大的计算机系统，掩盖了地理位置上的差异</li>
<li>从资源共享来看，分布式操作系统比网络操作系统更能共享更多的资源，原因在于网络操作系统其<code>HOST</code>上的系统不统一，导致一个计算任务不能由另外一台<code>HOST</code>运行，但是分布式操作系统的<code>HOST</code>操作系统相同。</li>
</ul>
<h4 id="17"><a href="#17" class="headerlink" title="17"></a>17</h4><p>为什么构成分布式系统的主机一般都是相同的或兼容的？</p>
<ul>
<li>利于进程的动态迁移</li>
</ul>
<h4 id="18"><a href="#18" class="headerlink" title="18"></a>18</h4><p>集群系统与分布式系统有何差异？</p>
<ul>
<li>集群指的是将几台服务器集中在一起，实现同一业务。</li>
<li>分布式是将不同的1业务分布在不同地方</li>
<li>分布式结构的每一个节点都可以做集群；而集群并不一定就是分布式</li>
</ul>
<h4 id="19"><a href="#19" class="headerlink" title="19"></a>19</h4><p>何谓云存储？何谓云计算？</p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><h4 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h4><p>为何引入多道程序设计？在多道程序系统中，内存中的作业的道数是否越多越好？请说明原因。</p>
<ul>
<li>因为系统的资源数量多，资源使用者少。为了允许多个程序同时进入系统，即增加资源使用者的数量，提高系统资源利用率。</li>
<li>不是，一个计算机系统的资源是有限的，只能容纳适量的作业；当作业道数不合理增加，导致资源竞争大，系统开销大。</li>
</ul>
<h4 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h4><p>多道程序设计会带来哪些问题？如何解决？</p>
<ul>
<li>处理器资源管理问题，需要实现处理器资源在各个程序之间的分配和调度。</li>
<li>内存资源管理问题，解决：程序使用相对地址，不使用绝对地址，实现程序的重定位，还需要防止程序之间的内存干扰</li>
<li>设备资源管理问题，操作系统需要采取适当的分配策略据此对资源加以管理。</li>
</ul>
<h4 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h4><p>什么是进程？进程具有哪些主要特性？试比较进程与程序之间的相同点与不同点。</p>
<ul>
<li>进程是具有一定独立功能的程序关于一个数据集合的一次运行活动</li>
<li>进程的特性<ol>
<li>并发性</li>
<li>动态性</li>
<li>独立性</li>
<li>交互性</li>
<li>异步性</li>
<li>结构性</li>
</ol>
</li>
<li>程序是构成进程的组成部分之一</li>
<li>程序是静态的，进程是动态的；程序是永久的，进程是具有生存周期的；一个程序可以对应多个进程，一个进程只能对应一个程序。</li>
</ul>
<h4 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h4><p>有人说，用户所执行的程序一定是用户自己编写的。这种说法对吗？如果不对，试举例说明之。</p>
<ul>
<li>不对，比如C编译程序时以用户进程身份进行，但C编译程序不是用户自己编写的。</li>
</ul>
<h4 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h4><p>什么是进程上下文？进程上下文包括哪些成分？哪些成分对目态程序是可见的？</p>
<ul>
<li>在<code>UNIX System V</code>中，将进程的物理实体与支持进程运行的物理环境合称为进程上下文。</li>
<li>包括3个组成部分：<ul>
<li>用户级上下文</li>
<li>系统级上下文</li>
<li>寄存器上下文</li>
</ul>
</li>
<li>用户级上下文和部分寄存器上下文对目态程序是可见的。</li>
</ul>
<h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p>进程一般具有哪三个主要状态？举例说明状态转换的原因</p>
<ul>
<li>运行态；就绪态；等待态</li>
<li>当就绪态进程获得处理器，变为运行态</li>
<li>当运行态进程被剥夺处理器，变为就绪态</li>
<li>当运行\就绪态进程因为某一事件受阻时，变为等待态</li>
<li>当等待事件发生，变为就绪态</li>
</ul>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><h4 id="例3-1"><a href="#例3-1" class="headerlink" title="例3-1"></a>例3-1</h4><p>考虑CPU阵发进程，得到先到先服务算法调度性能指标</p>
<ol>
<li>甘特图</li>
<li>列表</li>
</ol>
<h4 id="例3-2"><a href="#例3-2" class="headerlink" title="例3-2"></a>例3-2</h4><p>最短作业优先算法</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
  </entry>
  <entry>
    <title>SVM</title>
    <url>/2020/07/08/%20MachineLearning/SVM/</url>
    <content><![CDATA[<p>我们知道</p>
<p>逻辑回归激励函数</p>
<script type="math/tex; mode=display">
h_{\theta}(x)=\frac{1}{1+e^{-\theta^{T}x}}</script><p><img src="https://i.loli.net/2020/07/08/lGQbRz3yvTJ4B1I.png" alt="激励函数"></p>
<p>本质上，支持向量机的代价函数与逻辑回归的代价函数无差别，但是为了使得后面计算更直观些，我们不妨稍微调整一下支持向量机的代价函数。</p>
<ul>
<li><p>回顾逻辑回归代价函数</p>
<script type="math/tex; mode=display">
-(ylog(h_{\theta}(x))+(1-y)log(1-h_{\theta}(x)))</script></li>
<li><p>而支持向量机代价函数</p>
<script type="math/tex; mode=display">
C\sum_{i=1}^{m}[y^{(i)}cost_1(\theta^{T}x^{(i)})+(1-y^{i})cost_0(\theta^{T}x^{(i)})]+\frac{1}{2}\sum_{i=1}^{n}\theta^2_j\\
其中,cost_0(z)=-log(1-\frac{1}{1+e^{-z}}),cost_1(z)=log\frac{1}{1+e^{-z}}</script><p>其中，C可以理解为$\frac{1}{\lambda}$</p>
</li>
</ul>
<p>而SVM也被人们称之为大间距分类器。</p>
<p><img src="https://i.loli.net/2020/07/08/nRyjckhQYSJsgKa.png" alt="大间距分类器"></p>
<p>即，使得间距最大。</p>
<ul>
<li>核函数</li>
</ul>
<h2 id="Kernels"><a href="#Kernels" class="headerlink" title="Kernels"></a>Kernels</h2><p>设存在2个特征，我们设其假设函数为</p>
<script type="math/tex; mode=display">
\theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_1x_2+\theta_4x_1^2+...</script><p>再进行一些优化</p>
<script type="math/tex; mode=display">
\theta_0+\theta_1f_1+\theta_2f_2+\theta_3f_3+\theta_4f_4+...</script><h3 id="高斯核函数"><a href="#高斯核函数" class="headerlink" title="高斯核函数"></a>高斯核函数</h3><ul>
<li>根据$x$的各个特征选取<code>landmarks</code></li>
</ul>
<p><img src="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes/raw/master/images/2516821097bda5dfaf0b94e55de851e0.png" alt="核函数"></p>
<script type="math/tex; mode=display">
example:\\
f_1=similarity(x,l^{(1)})=e^{-\frac{||x-l^{(1)}||^2}{2\sigma^2}}</script><p>那么</p>
<script type="math/tex; mode=display">
f_1称为核函数</script><p>不妨再重新回顾下过程</p>
<ol>
<li><p>Given</p>
<script type="math/tex; mode=display">
(x^{(1)},y^{(1)}),(x^{(2)},y^{(2)})...(x^{(m)},y^{(m)})\\</script></li>
<li><p>Choose</p>
<script type="math/tex; mode=display">
l^{(1)}=x^{(1)},l^{(2)}=x^{(2)},...l^{(m)}=x^{(m)}</script></li>
<li><p>Get $f_i$</p>
<script type="math/tex; mode=display">
f_1=similarity(x,l^{(1)})\\
...</script></li>
<li><p>对于$x_{(i)}$</p>
<script type="math/tex; mode=display">
f^{(i)}_1\\
f^{(i)}_2\\
f^{(i)}_3\\
...\\
f^{(i)}_m\\</script></li>
<li><script type="math/tex; mode=display">
min C\sum_{i=1}^{m}[y^{(i)}cost_1(\theta^{T}f^{(i)})+(1-y^{i})cost_0(\theta^{T}f^{(i)})]+\frac{1}{2}\sum_{i=1}^{n}\theta^2_j\\
其中,cost_0(z)=-log(1-\frac{1}{1+e^{-z}}),cost_1(z)=log\frac{1}{1+e^{-z}}</script></li>
</ol>
<h2 id="对于参数"><a href="#对于参数" class="headerlink" title="对于参数"></a>对于参数</h2><ul>
<li>C<ul>
<li>Large C: Lower bias, high variance</li>
<li>Small C: Higher bias, low variance</li>
</ul>
</li>
<li>$\sigma^2$<ul>
<li>Large $\sigma^2$: Higher bias lower variance</li>
<li>Small $\sigma^2$: Lower bias higher variance</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>计数方法</title>
    <url>/2020/06/08/%20Math/%E8%AE%A1%E6%95%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h1><script type="math/tex; mode=display">
{(x+y)}^n=\dbinom{n}{0}x^0y^n+\dbinom{n}{1}x^1y^{n-1}...+\dbinom{n}{n-1}x^{n-1}y^1+\dbinom{n}{n}x^ny^0，其中n\geq 0</script><ul>
<li>对称关系</li>
<li>递推关系<code>Pascal</code>公式</li>
<li>单峰性</li>
</ul>
<script type="math/tex; mode=display">
即有：\dbinom{n}{k}\\
(1)\     \dbinom{n}{k}=\dbinom{n}{n-k} \\
(2)\     \dbinom{n}{k}=\dbinom{n-1}{k}+\dbinom{n-1}{k-1}\\
(3)\     \dbinom{n}{\frac{n}{2}}为max\\</script><h1 id="牛顿二项式"><a href="#牛顿二项式" class="headerlink" title="牛顿二项式"></a>牛顿二项式</h1><p>设有$\dbinom{a}{r}$</p>
<ol>
<li>当$a=-n$<script type="math/tex; mode=display">
\dbinom{a}{r}=\dbinom{-n}{r}=(-1)^r\dbinom{n+r-1}{r}</script></li>
</ol>
<h1 id="多项式定理"><a href="#多项式定理" class="headerlink" title="多项式定理"></a>多项式定理</h1><p>设$n$为正整数，则</p>
<script type="math/tex; mode=display">
(x_1+x_2+...+x_t)=\sum\dbinom{n}{n_1n_2...n_t}x_1^{n_1}...x_t^{n_t}\\
其中
\dbinom{n}{n_1n_2...n_t}=\frac{n!}{n_1!n_2!...n_t!}并且n_1+n_2...+n_t=n</script><ol>
<li>其展开式在合并同类项后不同项目数目为$\dbinom{n+t-1}{n}$</li>
</ol>
<h1 id="组合恒等式"><a href="#组合恒等式" class="headerlink" title="组合恒等式"></a>组合恒等式</h1><ul>
<li><code>page  55: 6</code> </li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
  </entry>
  <entry>
    <title>中断</title>
    <url>/2020/06/06/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E4%B8%AD%E6%96%AD/</url>
    <content><![CDATA[<h1 id="bx-si-di-bp"><a href="#bx-si-di-bp" class="headerlink" title="bx,si,di,bp"></a><code>bx,si,di,bp</code></h1><ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,offset sqr</span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,200h</span><br><span class="line">    mov cx,offset sqrend-offset sqr</span><br><span class="line">    cld</span><br><span class="line">    rep movsb</span><br><span class="line">    </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov word ptr es:[7ch*4],200h</span><br><span class="line">    mov word ptr es:[7ch*4+2],0</span><br><span class="line">    </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">    </span><br><span class="line">    sqr:</span><br><span class="line">    mul ax</span><br><span class="line">    iret</span><br><span class="line">    </span><br><span class="line">    sqrend:</span><br><span class="line">    nop</span><br><span class="line">    </span><br><span class="line">    code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>OTHERS</title>
    <url>/2020/06/06/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/notice/</url>
    <content><![CDATA[<ol>
<li><p>换行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ah,2</span><br><span class="line">mov dl,0DH</span><br><span class="line">int 21h</span><br><span class="line">mov dl,0AH</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>汇编实验</title>
    <url>/2020/06/06/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E6%B1%87%E7%BC%96%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>从键盘输入一系列以$为结束符的字符串，然后对其中的非数字字符计数，并显示出计数结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">data1 segment</span><br><span class="line"> DB &quot;Please input the word !&quot;,0dh,0ah,0</span><br><span class="line">   </span><br><span class="line">data1 ends</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    </span><br><span class="line">    db 10 dup (0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">ANS segment</span><br><span class="line">    DB 0dh,0ah,&quot;answer=&quot;,0</span><br><span class="line">ANS ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">   db 128 dup (0) </span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">    </span><br><span class="line">    mov ax,stack</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,128</span><br><span class="line">    </span><br><span class="line">    mov ax,data1</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov cx,19h</span><br><span class="line">    mov bx,0</span><br><span class="line">    call show_str </span><br><span class="line">    </span><br><span class="line">    mov dx,0</span><br><span class="line">    s2:</span><br><span class="line">    ;counter save in dx</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    a1:</span><br><span class="line">    mov ah,1</span><br><span class="line">    int 21h</span><br><span class="line">    cmp al,&apos;$&apos;</span><br><span class="line">    jne a2</span><br><span class="line">    </span><br><span class="line">    mov ax,ANS</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov cx,7</span><br><span class="line">    mov bx,0</span><br><span class="line">    call show_str</span><br><span class="line">    mov cx,dx</span><br><span class="line">    jcxz Q2</span><br><span class="line">    call show</span><br><span class="line">    </span><br><span class="line">    Q1:</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h   </span><br><span class="line">    Q2:</span><br><span class="line">    mov dl,&apos;0&apos;</span><br><span class="line">    </span><br><span class="line">    mov ah,2</span><br><span class="line">    int 21h</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    a2:</span><br><span class="line">    cmp al,&apos;1&apos;</span><br><span class="line">    jb a3</span><br><span class="line">    cmp al,&apos;9&apos;</span><br><span class="line">    ja a3</span><br><span class="line">    </span><br><span class="line">    jmp a1</span><br><span class="line">    a3:</span><br><span class="line">    inc dx</span><br><span class="line">    jmp a1</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ;input: ds,bx</span><br><span class="line">    ;using bx,cx,dx</span><br><span class="line">    show_str:</span><br><span class="line">    push ax</span><br><span class="line">    push dx</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    mov dh,0</span><br><span class="line">    s11:</span><br><span class="line">    </span><br><span class="line">    mov DL,[BX]</span><br><span class="line">    mov cx,dx</span><br><span class="line">    jcxz zero </span><br><span class="line">    mov ah,2</span><br><span class="line">    int 21h</span><br><span class="line">    inc bx</span><br><span class="line">    loop s11</span><br><span class="line">    zero:</span><br><span class="line">    pop cx</span><br><span class="line">    pop bx</span><br><span class="line">    pop dx</span><br><span class="line">    pop ax</span><br><span class="line">    ret                                </span><br><span class="line">    ;-------------------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ;input: dx</span><br><span class="line">    ;output [data to string and show the string]</span><br><span class="line">    show:</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push ds</span><br><span class="line">    push si</span><br><span class="line">    push dx</span><br><span class="line">    push cx</span><br><span class="line">    </span><br><span class="line">    mov ax,dx</span><br><span class="line">    mov bx,data</span><br><span class="line">    mov ds,bx</span><br><span class="line">    mov si,0</span><br><span class="line">    call dtoc</span><br><span class="line">    </span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov bx,0</span><br><span class="line">    call show_str</span><br><span class="line">    </span><br><span class="line">    pop cx</span><br><span class="line">    pop dx</span><br><span class="line">    pop si</span><br><span class="line">    pop ds</span><br><span class="line">    pop bx</span><br><span class="line">    pop ax</span><br><span class="line">    ret</span><br><span class="line">    ;--------------------------------------------------------------------------------  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ; input ax</span><br><span class="line">    ; output translate the ax to string and save in the data from offset data:0000h</span><br><span class="line">    dtoc:   push ax</span><br><span class="line">    push si</span><br><span class="line">    push di</span><br><span class="line">    push dx</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    mov di, 0</span><br><span class="line">    mov dx, 0</span><br><span class="line">    mov bx, 10</span><br><span class="line">    </span><br><span class="line">    devide: mov cx, ax</span><br><span class="line">    jcxz stop</span><br><span class="line">    div bx</span><br><span class="line">    inc di</span><br><span class="line">    push dx</span><br><span class="line">    mov dx, 0</span><br><span class="line">    jmp devide</span><br><span class="line">    stop:   mov cx, di</span><br><span class="line">    string: pop bx</span><br><span class="line">    add bx, 30h</span><br><span class="line">    mov [si], bl</span><br><span class="line">    inc si</span><br><span class="line">    loop string</span><br><span class="line">    </span><br><span class="line">    pop cx</span><br><span class="line">    pop bx</span><br><span class="line">    pop dx</span><br><span class="line">    pop di</span><br><span class="line">    pop si</span><br><span class="line">    pop ax</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>定义一个字变量DAT1，长度为1，把DAT1中的数据按字节单元依次显示到屏幕上，显示方式为 段地址：偏移量 十六进制字节数据.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data1 segment</span><br><span class="line">   DAT1 DW 1234H</span><br><span class="line">data1 ends</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    dw 128 dup (0)</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">    dw 128 dup (0)</span><br><span class="line">    </span><br><span class="line">stack ends  </span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">    </span><br><span class="line">    mov ax,stack</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov ax,128</span><br><span class="line">    mov sp,ax</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov ax,data1</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov bx,0</span><br><span class="line">  </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov si,ax</span><br><span class="line">    mov ax,4</span><br><span class="line">    mov di,ax</span><br><span class="line">    mov ax,data1</span><br><span class="line">    call dtoc16</span><br><span class="line">    mov ax,&apos;h&apos;</span><br><span class="line">    mov ds:[4],ax</span><br><span class="line">    mov ax,&apos;:&apos;</span><br><span class="line">    mov ds:[5],ax</span><br><span class="line">    mov ax,0</span><br><span class="line">    mov si,6</span><br><span class="line">    call dtoc16</span><br><span class="line">    mov al,&apos;h&apos;</span><br><span class="line">    mov ds:[10],ax</span><br><span class="line">    </span><br><span class="line">    mov al,&apos; &apos;</span><br><span class="line">    mov ds:[11],ax</span><br><span class="line">    </span><br><span class="line">    mov si,12</span><br><span class="line">    mov di,2</span><br><span class="line">    mov al,es:[0]</span><br><span class="line">    mov ah,0</span><br><span class="line">    call dtoc16</span><br><span class="line">    mov al,0dh</span><br><span class="line">    mov ds:[14],al</span><br><span class="line">    mov al,0ah</span><br><span class="line">    </span><br><span class="line">    mov ds:[15],al</span><br><span class="line">    mov ax,data1</span><br><span class="line">    mov di,4</span><br><span class="line">    mov si,16</span><br><span class="line">    call dtoc16</span><br><span class="line">    mov al,&apos;h&apos;</span><br><span class="line">    mov ds:[20],al</span><br><span class="line">    mov al,&apos;:&apos;</span><br><span class="line">    mov ds:[21],al</span><br><span class="line">    mov ax,1</span><br><span class="line">    mov di,4</span><br><span class="line">    mov si,22</span><br><span class="line">    call dtoc16</span><br><span class="line">    mov ds:[26],&apos;h&apos;</span><br><span class="line">    mov ds:[27],&apos; &apos;</span><br><span class="line">    tes:</span><br><span class="line">    mov si,28</span><br><span class="line">    mov di,2</span><br><span class="line">    mov al,es:[1]</span><br><span class="line">    mov ah,0</span><br><span class="line">    </span><br><span class="line">    call dtoc16</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    call show_str</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ;input</span><br><span class="line">    ;ax: as the data to string</span><br><span class="line">    ;ds: segment address in the memory to save string</span><br><span class="line">    ;si: the begin of offset address in the memory to save string</span><br><span class="line">    ;di: how many byte to use</span><br><span class="line">    dtoc16:</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    push dx</span><br><span class="line">    </span><br><span class="line">    mov bx,16</span><br><span class="line">    mov cx,4</span><br><span class="line">    ;devide16:</span><br><span class="line">    s:</span><br><span class="line">    mov dx,0</span><br><span class="line">    div bx</span><br><span class="line">    push dx</span><br><span class="line">     </span><br><span class="line">    loop s</span><br><span class="line">    mov cx,di</span><br><span class="line">    cmp cx,2</span><br><span class="line">    jne string</span><br><span class="line">    pop ax</span><br><span class="line">    pop ax </span><br><span class="line">    string:</span><br><span class="line">    pop ax</span><br><span class="line">    add ax,30h</span><br><span class="line">    mov ds:[si],al</span><br><span class="line">    inc si</span><br><span class="line">    loop string</span><br><span class="line">    </span><br><span class="line">    pop dx</span><br><span class="line">    pop cx</span><br><span class="line">    pop bx</span><br><span class="line">    pop ax</span><br><span class="line">    ret</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    show_str:</span><br><span class="line">    push ax</span><br><span class="line">    push dx</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    mov dh,0</span><br><span class="line">    s11:</span><br><span class="line">    </span><br><span class="line">    mov DL,[BX]</span><br><span class="line">    mov cx,dx</span><br><span class="line">    jcxz zero </span><br><span class="line">    mov ah,2</span><br><span class="line">    int 21h</span><br><span class="line">    inc bx</span><br><span class="line">    loop s11</span><br><span class="line">    zero:</span><br><span class="line">    pop cx</span><br><span class="line">    pop bx</span><br><span class="line">    pop dx</span><br><span class="line">    pop ax</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">   mov ax,0B800H</span><br><span class="line">   mov ds,ax</span><br><span class="line">   mov bx,0</span><br><span class="line">   mov si,0</span><br><span class="line">   mov cx,16</span><br><span class="line">   mov al,&apos;W&apos;</span><br><span class="line">   mov ah,01110100B</span><br><span class="line">   s:  </span><br><span class="line">   mov ds:[bx+si],ax</span><br><span class="line">   inc ah</span><br><span class="line">   add bx,160</span><br><span class="line">   add si,2</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   loop s</span><br><span class="line">   </span><br><span class="line">   mov ax,4c00h</span><br><span class="line">   int 21h    </span><br><span class="line">    </span><br><span class="line">code ends</span><br></pre></td></tr></table></figure>
<h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">stack segment</span><br><span class="line">    dw 128 dup (0) </span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">   start:</span><br><span class="line">   mov ax,stack</span><br><span class="line">   mov ss,ax</span><br><span class="line">   mov sp,128</span><br><span class="line">   mov ax,0B800H</span><br><span class="line">   mov ds,ax</span><br><span class="line">   mov bx,158+158</span><br><span class="line">   mov si,0</span><br><span class="line">   mov cx,20</span><br><span class="line">   mov al,&apos; &apos;</span><br><span class="line">   mov ah,01000100B</span><br><span class="line">   </span><br><span class="line">   s1:     </span><br><span class="line">   push cx</span><br><span class="line">   mov bp,bx</span><br><span class="line">   mov di,si</span><br><span class="line">   </span><br><span class="line">   mov cx,2</span><br><span class="line">   </span><br><span class="line">   ;清屏</span><br><span class="line">   call Clear_Screen</span><br><span class="line">   s2:</span><br><span class="line">   push cx</span><br><span class="line">   </span><br><span class="line">   mov cx,9  </span><br><span class="line">   s3:</span><br><span class="line">   mov ds:[bp+di],ax</span><br><span class="line">   </span><br><span class="line">   add di,2</span><br><span class="line">   loop s3</span><br><span class="line">   </span><br><span class="line">   pop cx</span><br><span class="line">   add bp,158</span><br><span class="line">   mov di,si</span><br><span class="line">   </span><br><span class="line">   loop s2</span><br><span class="line">   mov dl,&apos;O&apos;</span><br><span class="line">   mov dh,00000100B</span><br><span class="line">   mov ds:[bp+si],dx</span><br><span class="line">   mov ds:[bp+si+16],dx</span><br><span class="line">   </span><br><span class="line">   pop cx</span><br><span class="line">   add si,2</span><br><span class="line">   </span><br><span class="line">   loop s1</span><br><span class="line">   </span><br><span class="line">   mov ax,4c00h</span><br><span class="line">   int 21h    </span><br><span class="line">   Clear_Screen:</span><br><span class="line">   push ax</span><br><span class="line">   MOV AX,0003H</span><br><span class="line">   INT 10H</span><br><span class="line">   pop ax</span><br><span class="line">   ret</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>寻址法方式</title>
    <url>/2020/06/03/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E5%AF%BB%E5%9D%80/</url>
    <content><![CDATA[<h1 id="bx-si-di-bp"><a href="#bx-si-di-bp" class="headerlink" title="bx,si,di,bp"></a><code>bx,si,di,bp</code></h1><ul>
<li><p><code>在</code>8086CPU<code>中，只有4个寄存器再用</code>[…]`来进行内存的寻址。</p>
</li>
<li><p>可以使用4个寄存器单独出现，亦或，<code>bx+si</code>,<code>bx+di</code>,<code>bp+si</code>,<code>bp+di</code></p>
</li>
<li><p>若使用<code>bp</code>，那么段地址默认为<code>ss</code></p>
</li>
<li><p>若使用<code>bx</code>，那么段地址默认为<code>ds</code></p>
</li>
<li><p>数据在哪</p>
<ul>
<li>CPU内部</li>
<li>内存</li>
<li>端口</li>
</ul>
</li>
<li><p>数据多长</p>
<ul>
<li><p>寄存器指明数据尺寸</p>
</li>
<li><p>若无寄存器，则有<code>word ptr</code>或<code>byte ptr</code>指明，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov word ptr ds:[0],1</span><br></pre></td></tr></table></figure>
</li>
<li><p>有些指令默认了数据尺寸，比如<code>push</code>只进行字操作。</p>
</li>
</ul>
</li>
</ul>
<h1 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h1><ul>
<li>子程序<ul>
<li><code>ret</code></li>
<li><code>call</code></li>
<li>现场保存：<code>stack</code></li>
</ul>
</li>
<li>跳转<ul>
<li><code>jmp</code></li>
<li><code>jcxz</code></li>
</ul>
</li>
<li><code>how to show on the screen</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">data segment</span><br><span class="line">    db &apos;Welcome to masm!&apos;,0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    dw 16 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">   start:</span><br><span class="line">   mov dh,8</span><br><span class="line">   mov dl,3</span><br><span class="line">   mov cl,2</span><br><span class="line">   mov ax,data</span><br><span class="line">   mov ds,ax</span><br><span class="line">   mov ax,stack</span><br><span class="line">   mov ss,ax</span><br><span class="line">   mov sp,32</span><br><span class="line">   mov si,0</span><br><span class="line">   </span><br><span class="line">   call show_str</span><br><span class="line">   mov ax,4c00h</span><br><span class="line">   int 21h    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   show_str:</span><br><span class="line">   push ax</span><br><span class="line">   push cx</span><br><span class="line">   push dx</span><br><span class="line">   push ds</span><br><span class="line">   push si</span><br><span class="line">   </span><br><span class="line">   mov ah,0</span><br><span class="line">   mov al,dh</span><br><span class="line">   mov dh,160</span><br><span class="line">   mul dh</span><br><span class="line">   mov bx,ax;save the row</span><br><span class="line">   </span><br><span class="line">   mov ah,0</span><br><span class="line">   mov al,dl</span><br><span class="line">   mov dl,2</span><br><span class="line">   mul dl</span><br><span class="line">   mov cx,ax;save the column</span><br><span class="line">   mov di,cx</span><br><span class="line">   </span><br><span class="line">   mov ax,0b800h</span><br><span class="line">   mov es,ax</span><br><span class="line">   </span><br><span class="line">   mov si,0  </span><br><span class="line">   mov al,cl</span><br><span class="line">   s:</span><br><span class="line">   mov cx,0</span><br><span class="line">   mov cl,ds:[si]</span><br><span class="line">   jcxz q</span><br><span class="line">   </span><br><span class="line">   mov ch,al</span><br><span class="line">   inc si</span><br><span class="line">   mov es:[bx+di],cx</span><br><span class="line">   add di,2</span><br><span class="line">   jmp s</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">   q:</span><br><span class="line">   pop si</span><br><span class="line">   pop ds</span><br><span class="line">   pop dx</span><br><span class="line">   pop cx</span><br><span class="line">   pop ax</span><br><span class="line">   ret</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<h1 id="Example2"><a href="#Example2" class="headerlink" title="Example2"></a>Example2</h1><ul>
<li>进行不会产生溢出的除法运算</li>
<li>其中<code>cx</code>存余数，<code>dx</code>存高16位商，<code>ax</code>存低16位商</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">stack segment</span><br><span class="line">    dw 16 dup(0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">    mov ax,stack</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,32</span><br><span class="line">    mov ax,4240h</span><br><span class="line">    mov dx,000fh</span><br><span class="line">    mov cx,0ah</span><br><span class="line">    call divdw</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">    </span><br><span class="line">    divdw:</span><br><span class="line">    push bx</span><br><span class="line">    mov bx,ax</span><br><span class="line">    mov ax,dx</span><br><span class="line">    mov dx,0</span><br><span class="line">    div cx</span><br><span class="line">    push ax</span><br><span class="line">    mov ax,bx</span><br><span class="line">    div cx</span><br><span class="line">    mov cx,dx          ;保存余数</span><br><span class="line">    pop dx;得到高位的商</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    pop bx</span><br><span class="line">    ret</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<h1 id="Example3"><a href="#Example3" class="headerlink" title="Example3"></a>Example3</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">stack segment</span><br><span class="line">    dw 16 dup(0)</span><br><span class="line">stack ends</span><br><span class="line">data segment</span><br><span class="line">    db 10 dup(0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">   start:</span><br><span class="line">   mov ax,12666</span><br><span class="line">   mov bx,data</span><br><span class="line">   mov ds,bx</span><br><span class="line">   mov si,0</span><br><span class="line">   call dtoc</span><br><span class="line">   </span><br><span class="line">   mov dh,8</span><br><span class="line">   mov dl,3</span><br><span class="line">   mov cl,2</span><br><span class="line">   call show_str</span><br><span class="line">   </span><br><span class="line">   mov ax,4c00h</span><br><span class="line">   int 21h</span><br><span class="line">   dtoc:</span><br><span class="line">   push ax</span><br><span class="line">   push si</span><br><span class="line">   mov bx,10</span><br><span class="line">   s1:</span><br><span class="line">   mov dx,0</span><br><span class="line">   div bx</span><br><span class="line">   mov cx,ax</span><br><span class="line">   jcxz q1</span><br><span class="line">   add dl,30h</span><br><span class="line">   mov ds:[si],dl</span><br><span class="line">   inc si</span><br><span class="line">   mov ax,cx</span><br><span class="line">   jmp s1</span><br><span class="line">   q1:</span><br><span class="line">   mov dl,0</span><br><span class="line">   mov ds:[si],dl</span><br><span class="line">   inc si</span><br><span class="line">   pop si</span><br><span class="line">   pop ax</span><br><span class="line">   ret</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   show_str:</span><br><span class="line">   push ax</span><br><span class="line">   push cx</span><br><span class="line">   push dx</span><br><span class="line">   push ds</span><br><span class="line">   push si</span><br><span class="line">   </span><br><span class="line">   mov ah,0</span><br><span class="line">   mov al,dh</span><br><span class="line">   mov dh,160</span><br><span class="line">   mul dh</span><br><span class="line">   mov bx,ax;save the row</span><br><span class="line">   </span><br><span class="line">   mov ah,0</span><br><span class="line">   mov al,dl</span><br><span class="line">   mov dl,2</span><br><span class="line">   mul dl</span><br><span class="line">   mov cx,ax;save the column</span><br><span class="line">   mov di,cx</span><br><span class="line">   </span><br><span class="line">   mov ax,0b800h</span><br><span class="line">   mov es,ax</span><br><span class="line">   </span><br><span class="line">   mov si,0  </span><br><span class="line">   mov al,cl</span><br><span class="line">   s:</span><br><span class="line">   mov cx,0</span><br><span class="line">   mov cl,ds:[si]</span><br><span class="line">   jcxz q</span><br><span class="line">   </span><br><span class="line">   mov ch,al</span><br><span class="line">   inc si</span><br><span class="line">   mov es:[bx+di],cx</span><br><span class="line">   add di,2</span><br><span class="line">   jmp s</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">   q:</span><br><span class="line">   pop si</span><br><span class="line">   pop ds</span><br><span class="line">   pop dx</span><br><span class="line">   pop cx</span><br><span class="line">   pop ax</span><br><span class="line">   ret</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>Debug环境设置</title>
    <url>/2020/05/30/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E6%B1%87%E7%BC%96_DosBox/</url>
    <content><![CDATA[<h1 id="0x01-前期准备"><a href="#0x01-前期准备" class="headerlink" title="0x01 前期准备"></a>0x01 前期准备</h1><ul>
<li><p>安装<code>DOSBox</code></p>
</li>
<li><p>设置盘符</p>
</li>
<li><p><img src="https://i.loli.net/2020/05/20/mHxeyIu6NhRqFCK.png" alt="image-20200514154924432.png"></p>
<p>当出现了<code>-_</code>的闪烁符号时候说明我们成功进入了<code>debug</code>中。</p>
</li>
</ul>
<h1 id="0x02-命令介绍"><a href="#0x02-命令介绍" class="headerlink" title="0x02 命令介绍"></a>0x02 命令介绍</h1><p>以下所有命令均在<code>debug</code>模式下输入，即<code>-_</code>，并且，每一种命令不会导致控制寄存器指令指针<code>IP</code>的移动。</p>
<ul>
<li>需要注意的是，<code>Instruction Pointer</code>存放下一次要取出指令的偏移地址（假设您没有直接指定地址）</li>
<li><code>CS:IP</code>指示下一条要取出的指令的实际地址。</li>
<li><code>IP</code>不能由程序直接存取，由<code>BIU</code>来修改（<code>BIU</code>是什么？？？</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>R</td>
<td>观看或修改寄存器的值</td>
</tr>
<tr>
<td>H</td>
<td>计算两个16进制数的和与差</td>
</tr>
<tr>
<td>D</td>
<td>显示内存区域的内容</td>
</tr>
<tr>
<td>E</td>
<td>改变内存单位的内容</td>
</tr>
<tr>
<td>F</td>
<td>使用指定值填充内存</td>
</tr>
<tr>
<td>M</td>
<td>将指定内存区域的数据复制到指定地址</td>
</tr>
<tr>
<td>C</td>
<td>比较两块内存的内容</td>
</tr>
<tr>
<td>S</td>
<td>搜索指定串</td>
</tr>
<tr>
<td>A</td>
<td>输入汇编命令</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>G</th>
<th>执行汇编指令</th>
</tr>
</thead>
<tbody>
<tr>
<td>U</td>
<td>对机器代码反汇编</td>
</tr>
<tr>
<td>N</td>
<td>设置文件名，将汇编程序进行存盘</td>
</tr>
<tr>
<td>W</td>
<td>将文件写入磁盘</td>
</tr>
<tr>
<td>L</td>
<td>读入内存</td>
</tr>
<tr>
<td>T</td>
<td>执行汇编程序，单步跟踪</td>
</tr>
<tr>
<td>P</td>
<td>执行汇编程序，单步跟踪，但不会跟踪子程序或软中断</td>
</tr>
<tr>
<td>I</td>
<td>从计算机输入端口读取数据</td>
</tr>
<tr>
<td>O</td>
<td>向计算机输出端口输出数据</td>
</tr>
<tr>
<td>Q</td>
<td>回到DOS状态</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>可用<code>Ctrl+S</code>来暂停屏幕输出</li>
</ul>
<p>以下<code>转载</code></p>
<h3 id="R命令的使用"><a href="#R命令的使用" class="headerlink" title="R命令的使用"></a>R命令的使用</h3><p>R命令作用：观看和修改寄存器的值。</p>
<p>在提示符“-”下输入以下命令：R。DEBUG将会显示出当前所有寄存器和标志位的状态。</p>
<p>接下来再输入命令RCX。在提示符“：”后输入100。该命令的作用是将寄存器CX的值设置为100（注意：DEBUG使用的是十六进制，这里的100相当于十进制的256。）</p>
<p>最后再执行R命令，观看修改后的寄存器值。</p>
<h3 id="H命令的使用"><a href="#H命令的使用" class="headerlink" title="H命令的使用"></a>H命令的使用</h3><p>H命令作用：计算两个十六进制数的和与差。</p>
<p>在提示符“–”下输入以下命令：H 10 1。观看命令执行结果。</p>
<p>运行结果的前一个数是计算出来的和，后一个数是计算出来的差。计算结果均用十六进制形式表示。</p>
<h3 id="D命令的使用"><a href="#D命令的使用" class="headerlink" title="D命令的使用"></a>D命令的使用</h3><p>D命令作用：显示内存区域的内容。</p>
<p>在提示符“–”下连续执行命令R、D、D。观看命令执行结果。</p>
<p>前面已经介绍过了，命令R的作用是显示当前寄存器的值。而命令D的作用是显示内存区域的内容，最左边是内存的起始地址，中间以十六进制的形式显示内存值，最右边是以ASCII码的形式显示内存值。每行最多显示16个字节的内容。</p>
<p>命令D可以带参数也可省略参数。设DEBUG启动时DS的值为X，当省略参数时，命令D显示内容以X：100为起始，每次显示128个字节的内容。以后再执行不带参数的命令D时，DEBUG将按上次的位置接着显示下去。</p>
<p>带参数时DEBUG能够显示指定地址范围的内容。带参数的方式有三种：</p>
<p>方式一：d [起始位置]。DEBUG从起始位置开始显示128个字节的内容。在提示符“-”下执行命令D 1AF5:100。观看命令执行结果。</p>
<p>方式二：d [起始位置] [结束位置]。DEBUG从起始位置开始一直显示到结束位置。在提示符“-”下执行命令D DS:100 1FF。观看命令执行结果。</p>
<p>方式三：d [起始位置] [L长度]，长度以L参数为标识。DEBUG从起始位置开始显示指定长度的内容。在提示符“-”下执行命令D DS:100 L10。观看命令执行结果。</p>
<h3 id="E命令的使用"><a href="#E命令的使用" class="headerlink" title="E命令的使用"></a>E命令的使用</h3><p>E命令作用：改变内存单位的内容。</p>
<p>E命令的使用方式为：E [起始位置]。</p>
<p>在提示符“-”下输入以下命令：E 1AF5:100。</p>
<p>DEBUG首先显示[1AF5:0000]的内容00.，这时可以修改该字节的值。如果还要修改后续的内容，可以按空格键继续。当要跳过某个字节时，可以按连续的两个空格跳到后一个字节去。</p>
<h3 id="F命令的使用"><a href="#F命令的使用" class="headerlink" title="F命令的使用"></a>F命令的使用</h3><p>F命令作用：使用指定的值填充指定内存区域中的地址。</p>
<p>F命令的使用方式为：F [范围] [填充列表]。</p>
<p>在提示符“-”下输入以下命令：F 1AF5:100 L20 1 2 3 4 5。执行命令D 1AF5:100观看命令执行结果。</p>
<p>说明：该命令是用字节序列01、02、03、04、05轮流填充从1AF5:100开始长度为20H的内存区域。</p>
<p>在提示符“-”下输入以下命令：F 1AF5:100 13F 41 42 43 44。</p>
<p>说明：该命令是用字节序列41、42、43、44轮流填充从1AF5:100开始一直到1AF5:13F的内存区域。</p>
<h3 id="M命令的使用"><a href="#M命令的使用" class="headerlink" title="M命令的使用"></a>M命令的使用</h3><p>M命令作用：将指定内存区域的数据复制到指定的地址去。</p>
<p>M命令的使用方式为：M [范围] [指定地址]。</p>
<p>在提示符“-”下输入以下命令：M 1AF5:100 13F 1AF5:140。执行命令D 1AF5:100观看命令执行结果。</p>
<h3 id="C命令的使用"><a href="#C命令的使用" class="headerlink" title="C命令的使用"></a>C命令的使用</h3><p>C命令作用：将两块内存的内容进行比较。</p>
<p>C命令的使用方式为：C [范围] [指定地址]，意思就是将指定范围的内存区域与从指定地址开始的相同长度的内存区域逐个字节进行比较，列出不同的内容。</p>
<p>在提示符“-”下输入以下命令：C 1AF5:100 13F 1AF5:140。由于两块内容完全相同，所以命令执行后没有任何显示。</p>
<p>在提示符“-”下输入以下命令：C 1AF5:100 107 1AF5:180，比较的区域长度为8个字节。命令执行后列出比较结果不同的各个字节。</p>
<h3 id="S命令的使用"><a href="#S命令的使用" class="headerlink" title="S命令的使用"></a>S命令的使用</h3><p>S命令作用：在指定的内存区域中搜索指定的串。</p>
<p>S命令的使用方式为：S [范围] [指定串]。</p>
<p>在提示符“-”下输入以下命令：D 1AF5:100 11F。显示该区域的内存值。</p>
<p>在提示符“-”下输入以下命令：S 1AF5:100 11F 41 42 43 44。搜索该区域是否存在字节串41 42 43 44，并将搜索结果一一列出。</p>
<p>从执行结果可以看出，总共搜索到八处。</p>
<h3 id="A命令的使用"><a href="#A命令的使用" class="headerlink" title="A命令的使用"></a>A命令的使用</h3><p>A命令作用：输入汇编指令。</p>
<p>以下的程序要在屏幕上显示“ABCD”四个字符。</p>
<p>首先用E命令将“ABCD$”四个字符预先放在内存CS:200处，然后执行A100命令输入汇编程序代码：</p>
<p>MOV AX,CS</p>
<p>MOV DS,AX</p>
<p>MOV DX,200</p>
<p>MOV AH,9</p>
<p>INT 21</p>
<p>INT 20</p>
<p>（说明：前两行汇编指令用于将段寄存器CS的值赋给段寄存器DS。第三到第五行汇编代码的作用是显示以“$”为结尾的字符串。最后一行用于结束程序。</p>
<h3 id="G命令的使用"><a href="#G命令的使用" class="headerlink" title="G命令的使用"></a>G命令的使用</h3><p>G命令作用：执行汇编指令。</p>
<p>G命令的使用方法是：G [=起始地址] [断点地址]，意思是从起始地址开始执行到断点地址。如果不设置断点，则程序一直运行到中止指令才停止。</p>
<p>在设置完示例九的的内存数据并且输入完示例九的程序后运行这些汇编代码。在DEBUG中执行命令G=100，观看运行结果。</p>
<p>汇编程序运行后在屏幕上显示出“ABCD”四个字符。</p>
<p>接下来在DEBUG中执行G=100 10B，意思是从地址CS：100开始，一直运行到CS：10B停止。观看运行结果。</p>
<p>命令执行后，不但显示出字符串“ABCD”，而且列出当前寄存器和标志位的值。</p>
<h3 id="U命令的使用"><a href="#U命令的使用" class="headerlink" title="U命令的使用"></a>U命令的使用</h3><p>U命令作用：对机器代码反汇编显示。</p>
<p>U命令的使用方法是：U [范围]。如果范围参数只输入了起始地址，则只对20H个字节的机器代码反汇编。执行命令U100，观看反汇编结果。</p>
<p>执行命令U100 10B，观看反汇编结果。该命令的作用是对从100到10B的机器代码进行反汇编。</p>
<h3 id="N命令的使用"><a href="#N命令的使用" class="headerlink" title="N命令的使用"></a>N命令的使用</h3><p>N命令作用：设置文件名，为将刚才编写的汇编程序存盘做准备。</p>
<p>以下的DEBUG命令序列作用将刚才的汇编程序存为磁盘的COM可执行程序。</p>
<p>D200 20F</p>
<p>U100 10C</p>
<p>N E:\FIRST.COM</p>
<p>RCX</p>
<p>:110</p>
<p>W</p>
<p>第一和第二条命令的作用是检查一下刚才编写的汇编指令。第三条命令的作用是设置存盘文件名为E:\FIRST.COM，第四条命令的作用是设置存盘文件大小为110H个字节。最后一条命令是将文件存盘。</p>
<p>文件存盘后执行E:\FIRST.COM，观看存盘的可执行文件的运行效果。</p>
<h3 id="W命令的使用"><a href="#W命令的使用" class="headerlink" title="W命令的使用"></a>W命令的使用</h3><p>W命令作用：将文件或者特定扇区写入磁盘。</p>
<p>在示例“N命令的使用”中已经实验了如何使用W命令将文件存盘。</p>
<p>在没有很好地掌握汇编语言和磁盘文件系统前，暂时不要使用W命令写磁盘扇区，否则很容易损坏磁盘文件，甚至破坏整个磁盘的文件系统。</p>
<h3 id="L命令的使用"><a href="#L命令的使用" class="headerlink" title="L命令的使用"></a>L命令的使用</h3><p>L命令作用：从磁盘中将文件或扇区内容读入内存。</p>
<p>将文件调入内存必须先用DEBUG的N命令设定文件名。以下例子是将E:\FIRST.COM读入内容。</p>
<p>N FIRST.COM</p>
<p>L</p>
<p>观看调入程序的汇编代码可以使用DEBUG的U命令，用U100观看调入的COM文件。</p>
<p>读取磁盘扇区的方式是：L [内存地址] [磁盘驱动器号] [起始扇区] [扇区数]。“内存地址”指定要在其中加载文件或扇区内容的内存位置，如果不指定“内存地址”的话，DEBUG将使用CS寄存器中的当前地址。“磁盘驱动器号”指定包含读取指定扇区的磁盘的驱动器，该值是数值型：0=A，1=B，2=C等。“起始扇区”指定要加载其内容的第一个扇区的十六进制数。“扇区数”指定要加载其内容的连续扇区的十六进制数。</p>
<p>只有要加载特定扇区的内容而不是加载文件时，才能使用[磁盘驱动器号] [起始扇区] [扇区数]参数。</p>
<p>例如：要将C盘第一扇区读取到内存DS:300的位置，相应的DEBUG命令为L DS:300 2 1 1。但是由于Windows操作系统对文件系统的保护，这条命令可能会被操作系统禁止运行。</p>
<h3 id="T命令的使用"><a href="#T命令的使用" class="headerlink" title="T命令的使用"></a>T命令的使用</h3><p>T命令作用：执行汇编程序，单步跟踪。</p>
<p>T命令的使用方式是T [=地址] [指令数]。如果忽略“地址”的话，T命令从CS:IP处开始运行。“指令数”是要单步执行的指令的数量。</p>
<p>以下示例对E:\FIRST.COM进行单步跟踪。</p>
<p>N E:\FIRST.COM</p>
<p>L</p>
<p>U100 10B</p>
<p>R</p>
<p>T=100</p>
<p>T</p>
<p>第一、二条命令是装入文件，第三条命令是列出程序反汇编代码，第四条命令是显示当前寄存器值，第五条命令是从CS:100处开始单步跟踪，第六条命令是继续跟踪后续的指令。</p>
<h3 id="P命令的使用"><a href="#P命令的使用" class="headerlink" title="P命令的使用"></a>P命令的使用</h3><p>P命令作用：执行汇编程序，单步跟踪。与T命令不同的是：P命令不会跟踪进入子程序或软中断。</p>
<p>P命令的使用方式与T命令的使用方式完全相同。</p>
<h3 id="I命令的使用"><a href="#I命令的使用" class="headerlink" title="I命令的使用"></a>I命令的使用</h3><p>I命令作用：从计算机输入端口读取数据并显示。</p>
<p>I命令的用法是I [端口地址]。例如从3F8号端口读取数据并显示的命令为：I 3F8。这里不对该命令做解释。</p>
<h3 id="O命令的使用"><a href="#O命令的使用" class="headerlink" title="O命令的使用"></a>O命令的使用</h3><p>O命令作用：向计算机输出端口送出数据。</p>
<p>O命令的用法是O [端口地址] [字节值]。例如向278号端口发出数据20H的命令为：I 278 20。这里不对该命令做解释。</p>
<h3 id="Q命令的使用"><a href="#Q命令的使用" class="headerlink" title="Q命令的使用"></a>Q命令的使用</h3><p>Q命令的作用是退出DEBUG，回到DOS状态。</p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>Loop_程序实例</title>
    <url>/2020/05/30/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E6%B1%87%E7%BC%96_Loop_%E5%A4%9A%E6%AE%B5/</url>
    <content><![CDATA[<h1 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h1><ul>
<li>计算$2^{11}$</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax,2</span><br><span class="line">    mov cx,11</span><br><span class="line">    s: add ax,ax	</span><br><span class="line">    loop s</span><br><span class="line">    </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">    code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li><p>s标识了一个地址，这个地址处有一条指令<code>add ax,ax</code></p>
</li>
<li><p><code>loop s</code>,CPU进行2步操作</p>
<ol>
<li>(<code>cx</code>)—</li>
<li>判断<code>cx</code>是否为0，若<code>cx</code>不为0，则转到<code>s</code>，反之，顺序执行。</li>
</ol>
</li>
<li><p><code>track:</code>当我们使用1字节的数据对1字的寄存器赋值的时候，可以使用另外一个1字的寄存器作为媒介来获得所需要的数据</p>
</li>
<li><p>计算$([0006h])^{11}$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax,0ffffh</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov sp,0006h</span><br><span class="line">    mov ah,0h</span><br><span class="line">    mov al,[6h]</span><br><span class="line">    mov cx,3</span><br><span class="line">    mov dx,0</span><br><span class="line">    s: add dx,al</span><br><span class="line">    loop s</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">    code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
<li><p>累加<code>ffff:0000</code>~<code>ffff:000A</code>单元中的数据的和，结果存储在<code>dx</code>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax,0ffffh</span><br><span class="line">    mov ds,ax                              ;初始化把 ds设置好</span><br><span class="line">    mov bx,0h                              ;基址寄存器初始化，为了偏移地址寻址</span><br><span class="line">    mov cx,12                              ;计数器初始化</span><br><span class="line">    mov ah,0                               </span><br><span class="line">    mov dx,0                               ;初始化</span><br><span class="line">    </span><br><span class="line">    s: mov al,[bx]</span><br><span class="line">    add dx,ax</span><br><span class="line">    inc bx</span><br><span class="line">    loop s</span><br><span class="line">    </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">    code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="多段程序"><a href="#多段程序" class="headerlink" title="多段程序"></a>多段程序</h1><ul>
<li><p>若我们需要使用到自己所需要的数据，而这些数据初始信息并非内存，而是实实在在的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume</span><br></pre></td></tr></table></figure>
</li>
<li><p>其中，我们来讨论下<code>end</code>的作用：</p>
<ol>
<li>通知编译器程序结束</li>
<li>通知编译器 这段程序的入口在上面地方</li>
</ol>
</li>
<li><p>我们不妨再来讨论以下可执行文件<code>bin</code>的执行过程</p>
<ol>
<li>由其他程序将可执行文件加载如内存</li>
<li>设置<code>CS:IP</code>指向程序的第一条指令的位置</li>
<li>程序运行结束，返回到加载者位置。</li>
</ol>
</li>
<li><p>eg：将数据<code>0123h</code>…<code>0987h</code>逆序存储到原来的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line">    dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line">    dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">    </span><br><span class="line">    start: mov ax,cs</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,30h</span><br><span class="line">    </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,8</span><br><span class="line">    </span><br><span class="line">    s:push cs:[bx]</span><br><span class="line">    add bx,2</span><br><span class="line">    loop s</span><br><span class="line">    </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,8</span><br><span class="line">    </span><br><span class="line">    s0:pop cs:[bx]</span><br><span class="line">    add bx,2</span><br><span class="line">    loop s0</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">    </span><br><span class="line">    codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
</li>
<li><p>其中，<code>23</code>这个字节数据保存在偏移地址为0的位置。</p>
</li>
</ul>
<h3 id="eg-将文本大写化"><a href="#eg-将文本大写化" class="headerlink" title="eg 将文本大写化"></a>eg 将文本大写化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:codesg,ds:datasg</span><br><span class="line">datasg segment</span><br><span class="line">    db &apos;BaSiC&apos;</span><br><span class="line">    datasg ends</span><br><span class="line">codesg segment</span><br><span class="line">    start:</span><br><span class="line">    mov ax,datasg</span><br><span class="line">    mov ds,ax</span><br><span class="line">    </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,5</span><br><span class="line">    s:</span><br><span class="line">    mov al,[bx]</span><br><span class="line">    and al,11011111B</span><br><span class="line">    mov [bx],al</span><br><span class="line">    inc bx</span><br><span class="line">    </span><br><span class="line">    loop s</span><br><span class="line">    </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">    </span><br><span class="line">    codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<h1 id="一个综合练习"><a href="#一个综合练习" class="headerlink" title="一个综合练习"></a>一个综合练习</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume  cs:codesg      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">db &apos;1975&apos;, &apos;1976&apos;, &apos;1977&apos;, &apos;1978&apos;, &apos;1979&apos;, &apos;1980&apos;, &apos;1981&apos;, &apos;1982&apos;, &apos;1983&apos;</span><br><span class="line">db &apos;1984&apos;, &apos;1985&apos;, &apos;1986&apos;, &apos;1987&apos;, &apos;1988&apos;, &apos;1989&apos;, &apos;1990&apos;, &apos;1991&apos;, &apos;1992&apos;</span><br><span class="line">db &apos;1993&apos;, &apos;1994&apos;, &apos;1995&apos;</span><br><span class="line">  </span><br><span class="line">dd 16, 22, 382, 1356, 2390, 8000, 16000, 24486, 50065, 97479, 140417, 197514</span><br><span class="line">dd 345980, 590827, 803530, 1183000, 1843000, 2759000, 3753000, 4649000, 5937000</span><br><span class="line"></span><br><span class="line">dw 3, 7, 9, 13, 28, 38, 130, 220, 476, 778, 1001, 1442, 2258, 2793, 4037, 5635, 8226</span><br><span class="line">dw 11542, 14430, 15257, 17800</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">table segment</span><br><span class="line">db 21 dup (&apos;year summ ne ?? &apos;)</span><br><span class="line">table ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">dw 8 dup(0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">    start:</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov ax,table</span><br><span class="line">    mov ds,ax</span><br><span class="line">    ;初始化 </span><br><span class="line">    </span><br><span class="line">    getyear:</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov bp,0</span><br><span class="line">    mov cx,15h</span><br><span class="line">    s11:</span><br><span class="line">    mov si,0</span><br><span class="line">    mov dx,cx</span><br><span class="line">    mov cx,4</span><br><span class="line">    s12:</span><br><span class="line">    mov al,es:[bp]</span><br><span class="line">    mov ds:[bx+si],al</span><br><span class="line">    </span><br><span class="line">    inc bp</span><br><span class="line">    inc si</span><br><span class="line">    </span><br><span class="line">    loop s12</span><br><span class="line">    </span><br><span class="line">    mov cx,dx</span><br><span class="line">    add bx,10h</span><br><span class="line">    loop s11</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    getspace:</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,15h</span><br><span class="line">    space1:</span><br><span class="line">    mov al,&apos; &apos;</span><br><span class="line">    mov ds:[bx+4],al</span><br><span class="line">    add bx,10h</span><br><span class="line">    </span><br><span class="line">    loop space1</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,15h</span><br><span class="line">    getincome:</span><br><span class="line">    mov ax,es:[bp]</span><br><span class="line">    mov ds:[bx+5],ax</span><br><span class="line">    add bp,2</span><br><span class="line">    mov ax,es:[bp]</span><br><span class="line">    mov ds:[bx+7],ax</span><br><span class="line">    add bp,2</span><br><span class="line">    mov al,&apos; &apos;</span><br><span class="line">    mov ds:[bx+9],al</span><br><span class="line">    add bx,10h</span><br><span class="line">    </span><br><span class="line">    loop getincome</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,15h</span><br><span class="line">    getnum:</span><br><span class="line">    mov ax,es:[bp]</span><br><span class="line">    mov ds:[bx+0ah],ax</span><br><span class="line">    add bp,2</span><br><span class="line">    mov ax,&apos; &apos;</span><br><span class="line">    mov ds:[bx+0ch],al</span><br><span class="line">    </span><br><span class="line">    add bx,10h</span><br><span class="line">    loop getnum</span><br><span class="line">    </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,15h</span><br><span class="line">    getaverage:</span><br><span class="line">    mov ax,ds:[bx+5]</span><br><span class="line">    mov dx,ds:[bx+7]</span><br><span class="line">    div word ptr ds:[bx+0ah]  </span><br><span class="line">    mov ds:[bx+0dh],ax</span><br><span class="line">    mov al,&apos; &apos;</span><br><span class="line">    mov ds:[bx+0fh],al</span><br><span class="line">    add bx,10h</span><br><span class="line">    loop getaverage</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>线性代数概知</title>
    <url>/2020/05/28/%20MachineLearning/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    <content><![CDATA[<h1 id="矩阵初等变换"><a href="#矩阵初等变换" class="headerlink" title="矩阵初等变换"></a>矩阵初等变换</h1><ul>
<li>倍法变换：某行*非零的数</li>
<li>消法变换：某行*某数加到另外一行</li>
<li>换法变换：交换两行</li>
</ul>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2020/05/17/%20MachineLearning/%E5%9B%BE%E5%83%8F/</url>
    <content><![CDATA[<h1 id="图像插值方法"><a href="#图像插值方法" class="headerlink" title="图像插值方法"></a>图像插值方法</h1><ul>
<li>最近邻域法</li>
<li>双线性插值法</li>
</ul>
<p>扫描矩阵的获取</p>
<p>映射矩阵的建立</p>
<p>扫描矩阵{S}=偏心运动矩阵*球面子孔路径矩阵</p>
]]></content>
  </entry>
  <entry>
    <title>计算方法</title>
    <url>/2020/05/16/%20MachineLearning/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>1</p>
<h1 id="误差"><a href="#误差" class="headerlink" title="误差"></a>误差</h1><ul>
<li>误差计算<ul>
<li>定义1.3</li>
<li>定理1.1</li>
</ul>
</li>
</ul>
<h1 id="线性代数方程组的数值解"><a href="#线性代数方程组的数值解" class="headerlink" title="线性代数方程组的数值解"></a>线性代数方程组的数值解</h1><ul>
<li>克莱姆法则</li>
<li>直接法<ul>
<li>高斯消元法</li>
</ul>
</li>
<li>迭代法，适用于系数矩阵为大型稀疏矩阵</li>
</ul>
]]></content>
      <categories>
        <category>计算方法</category>
      </categories>
  </entry>
  <entry>
    <title>web技术概知</title>
    <url>/2020/05/12/%20Algorithm/Python/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>按引用传递参数</li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul>
<li><p>类 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__=(<span class="string">'_name'</span>,<span class="string">'_age'</span>,<span class="string">'_gender'</span>)<span class="comment">#</span></span><br><span class="line">    <span class="comment">#限定Person对象只能绑定_name,_age和_gender</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span><span class="comment">#构造器</span></span><br><span class="line">        self._name=name</span><br><span class="line">        self._age=age</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><ul>
<li><code>TCP/IP</code>四层模型，网络接口层，网络层，传输层，应用层</li>
<li><code>IP</code>为网际协议，服务于网络层。</li>
<li><code>TCP</code>为传输控制协议</li>
</ul>
<ul>
<li><code>C/S</code>模式和<code>B/S</code>模式，<code>C</code>指的是<code>Client</code>客户端，<code>B</code>指的是<code>Browser</code>浏览器，通过<code>B</code>或者<code>C</code>能对<code>S</code>（服务器）进行访问。<code>C</code>与<code>S</code>的对比？？？？？？？？？？？</li>
<li>去中心化的网络应用模式</li>
</ul>
<ul>
<li><code>HTTP</code>超文本传输协议，<code>HTTPS</code>超文本传输安全协议</li>
</ul>
<ul>
<li><p><code>XML</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">from</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">to</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">content</span>&gt;</span>Will you marry me?<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>JSON</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"from"</span>: <span class="string">"Alice"</span>,</span><br><span class="line">    <span class="attr">"to"</span>: <span class="string">"Bob"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"Will you marry me?"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>（恐</p>
</li>
</ul>
<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ul>
<li><p>什么是<code>Socket</code>?</p>
<p><code>Socket</code>又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p>
</li>
<li><p><code>import socket</code></p>
</li>
<li><p><code>socket.socket(family,type,proto)</code>来创建套接字。其中，<code>family</code>为<code>AF_UNIX</code>或者<code>AF_INET</code>；<code>type</code>为<code>SOCK_STREAM</code>或者<code>SOCK_DGRAM</code>；<code>protocol</code>一般为<code>0</code></p>
</li>
<li></li>
</ul>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><ul>
<li><code>HTTP</code>是基于客户端/服务端的架构模型</li>
<li>使用<code>URL Uniform Resource Identifiers</code>来传输数据和建立连接</li>
</ul>
]]></content>
      <categories>
        <category>web技术</category>
      </categories>
  </entry>
  <entry>
    <title>重读C++ Primer</title>
    <url>/2020/05/07/%20%E9%87%8D%E8%AF%BBC++%20Primer/</url>
    <content><![CDATA[<h4 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h4><h4 id="vector是如何增长的"><a href="#vector是如何增长的" class="headerlink" title="vector是如何增长的"></a>vector是如何增长的</h4><p>​    容器内元素是连续存储的，若容器需要的空间大于现在位置所拥有的空间，那么vector会执行一次内存分配和内存释放操作。而标准库的实现者为了重新分配的次数减少，每次重新分配时都会分配比需求更大的内存空间。</p>
<ul>
<li>栈内存</li>
<li>静态内存</li>
<li>动态内存</li>
</ul>
<h4 id="deque是如何增长的"><a href="#deque是如何增长的" class="headerlink" title="deque是如何增长的"></a>deque是如何增长的</h4><ul>
<li><p><code>deque</code>是<code>list</code>与<code>vector</code>这两个顺序容器的结合体。</p>
<p><img src="https://i.loli.net/2020/05/20/o9ulHIRFbyfXtxG.png" alt="image-20200513112016158.png"></p>
</li>
</ul>
<ul>
<li>不过在进行中间元素的插入和删除的时候，其效率远远低于<code>list</code>和<code>vector</code>，这也是其使用复杂的迭代器框架所带来的代价。</li>
<li>支持随机访问。</li>
<li>前端插入与删除效率比<code>vector</code>高。</li>
<li>插入与删除不会导致重新分配空间。</li>
</ul>
<h4 id="使用动态内存的原因"><a href="#使用动态内存的原因" class="headerlink" title="使用动态内存的原因"></a>使用动态内存的原因</h4><ul>
<li>程序不知道自己需要使用多少对象</li>
<li>程序不知道所需对象的准确类型</li>
<li>程序需要在多个对象间共享数据</li>
</ul>
<h5 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h5><ul>
<li><code>string *ps1=new string</code></li>
<li><code>string *ps2=new string()</code></li>
<li><code>int *pi1=new int</code></li>
<li><code>int *pi2=new int()</code></li>
</ul>
<h5 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h5><ul>
<li><code>shared_ptr&lt;int&gt;p=make_shared&lt;int&gt;(10);</code></li>
<li><code>auto p=make_shared&lt;int&gt;(10);</code></li>
<li>引用计数<code>reference count</code>，每拷贝一次<code>shared_ptr</code>，计数器加一。</li>
<li>当<code>reference count</code>变为0时，自动销毁。</li>
<li>不要混用<code>shared_ptr和内置指针</code></li>
</ul>
<h5 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h5><ul>
<li>动态数组不是数组类型</li>
<li><code>int *pia=new int[10];</code></li>
<li><code>pia[1]=10; cout&lt;&lt;pia[1]&lt;&lt;endl;</code></li>
<li><code>delete [] pia;</code></li>
</ul>
<ul>
<li><code>unique_ptr</code>支持动态数组，<code>shared_ptr</code>不支持管理动态数组，因为<code>shared_ptr</code>没有动态数组的删除器。</li>
</ul>
<h1 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h1><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><ul>
<li><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> sum</span><br><span class="line">    =accumulate(V.cbegin(),V.cend(),<span class="built_in">string</span>(<span class="string">""</span>));</span><br><span class="line"><span class="comment">//正确</span></span><br><span class="line"><span class="built_in">string</span> sum</span><br><span class="line">    =accumulate(V.cbegin(),V.cend(),<span class="string">""</span>);</span><br><span class="line"><span class="comment">//错误，const char *上没有定义+运算符</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h2><ul>
<li><p>容器，迭代器，函数都有适配器。本质上，一个适配器是一种机制，使得事物的行为看起来像另外一种事物。</p>
</li>
<li><p>默认情况下<code>stack</code>和<code>queue</code>是基于<code>deque</code>实现；而<code>priority_queue</code>则是基于<code>vector</code>实现。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Read</category>
      </categories>
  </entry>
  <entry>
    <title>一些指令</title>
    <url>/2020/04/23/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E6%8C%87%E4%BB%A4%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h1 id="控制转义指令"><a href="#控制转义指令" class="headerlink" title="控制转义指令"></a>控制转义指令</h1><div class="table-container">
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>JZ</td>
<td>jump if zero</td>
<td>JZ   AA1</td>
</tr>
<tr>
<td>JNZ</td>
<td>jump if not zero</td>
<td>JNZ   AA1</td>
</tr>
<tr>
<td>JNC</td>
<td>jump if not carry(进位)</td>
<td>JNC DST</td>
</tr>
<tr>
<td>INT n</td>
<td>n为中断的<a href="##中断指令">类型码</a></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>INC</td>
<td>increase 1</td>
<td>INC a</td>
</tr>
<tr>
<td>SHL</td>
<td>Shift Logical Left</td>
<td>SHL DST 1</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h2 id="中断指令"><a href="#中断指令" class="headerlink" title="中断指令"></a>中断指令</h2><ul>
<li><p>INT n</p>
</li>
<li><p>其中n为8位无符号数，触发类型码为n的中断</p>
</li>
<li><p>INT 21H 系统功能调用</p>
<ol>
<li>AH 为功能调用编号</li>
<li>设置入口参数</li>
<li>CPU执行INT 21H</li>
<li>给出出口参数</li>
</ol>
<p>| AH   | 功能           | 入口参数    | 出口参数    |<br>| —— | ——————— | —————- | —————- |<br>| 01   | 键盘键入并回显 | 无          | AL=输入字符 |<br>| 02   | 显示输出       | DL=输出字符 | 无          |<br>| 4C   | 带返回码终止   | AL=返回码   | 无          |</p>
</li>
</ul>
<p>[Debug]<a href="https://blog.csdn.net/liuer2004_82/article/details/52638516" target="_blank" rel="noopener">https://blog.csdn.net/liuer2004_82/article/details/52638516</a></p>
<p>DOSBox</p>
<ul>
<li>动态CPU内核：具备<code>i386</code>指令集合的系统，能利用动态指令转换。</li>
<li>其中<code>i386</code>处理器为<code>32</code>位系统，地址线为32位；采用<code>Cache</code>来解决内存速度瓶颈问题。</li>
</ul>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li><code>ffffh</code>是错误的表示，永远不要第一个数值为字母，应该为<code>0ffffh</code>.</li>
<li>若使用<code>dl</code>来累加，当数值范围1个字节所能表示的范围即<code>8位</code>，CPU不会进位到<code>dh</code>，而是直接抹去。</li>
<li><code>[bx]</code>，表示<code>bx</code>中存放的偏移地址<code>EA</code>。但是在<code>ax</code>,<code>cx</code>,<code>dx</code>不能进行如是的操作。我们也能从这些寄存器的名字看出。</li>
<li>段前缀：用于显式地指明内存单元的段地址</li>
<li><code>assume</code>的时候，即使<code>ds:data</code>，那么<code>ds</code>进入<code>code</code>的时候<code>(ds)</code>也不一定未<code>(data)</code></li>
</ul>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>寄存器名称概析</title>
    <url>/2020/04/11/%20%E5%BE%AE%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E5%AF%84%E5%AD%98%E5%99%A8%E6%A6%82%E6%9E%90/</url>
    <content><![CDATA[<h1 id="从入门到入土"><a href="#从入门到入土" class="headerlink" title="从入门到入土"></a>从入门到入土</h1><ul>
<li>字长，</li>
<li>主频，CPU的时钟频率，决定计算机运算速度</li>
<li>CISC，Complex Instruction Set Computer</li>
<li>RISC，Reduced Instruction Set Computer</li>
<li>发展</li>
</ul>
<h1 id="8086"><a href="#8086" class="headerlink" title="8086"></a>8086</h1><ul>
<li>AX,Accumulator Register，累加器</li>
<li>BX,Base Register，基址寄存器</li>
<li>CX,Counter Register，计数器</li>
<li>DX,DataRegister，数据寄存器</li>
</ul>
<ul>
<li>SP,Stack Pointer，堆栈指针</li>
<li>BP,Base Pointer，基址指针</li>
<li>SI,Source Index，源变址寄存器</li>
<li>DI,Destination Index，目的变址寄存器,<a href>其中，SI与DI隐含使用</a></li>
</ul>
<ul>
<li>CS,Code Segment，代码段寄存器</li>
<li>SS,Stack Segment，堆栈段寄存器</li>
<li>DS,Data Segment，数据段寄存器</li>
<li>ES,Extra Segment，附加段寄存器</li>
</ul>
<ul>
<li><p>IP,Instruction Pointer，指令指针，<a href>CS:IP在地址加法器中形成物理地址，由BIU修改，不能直接修改</a></p>
</li>
<li><p>FL,flag，标志寄存器</p>
<ul>
<li><p>CF,Carry Flag，进位或错误标志，CF=1,否则CF=0</p>
</li>
<li><p>PF,Parity Flag，低8位结果偶数个1，PF=1，否则PF=0</p>
</li>
<li><p>AF,Auxiliary Carry Flag，D3有进位或借位，AF=1</p>
</li>
<li><p>ZF,Zero Flag，结果为0，ZF=1</p>
</li>
<li><p>SF,Sign Flag，结果为正，SF=0</p>
</li>
<li><p>OF,Overflow Flaw，有符号数算数运算超出表示范围，OF=1</p>
</li>
</ul>
<hr>
<p>  DF,Dirction Flag</p>
<ul>
<li><p>IF,Interrupt Enable Flag</p>
</li>
<li><p>TF,Trap Flag</p>
</li>
</ul>
</li>
</ul>
<h1 id="Prntium"><a href="#Prntium" class="headerlink" title="Prntium"></a>Prntium</h1><h5 id="可由8086的16位寄存器变为32位的寄存器如，AX-gt-EAX"><a href="#可由8086的16位寄存器变为32位的寄存器如，AX-gt-EAX" class="headerlink" title="可由8086的16位寄存器变为32位的寄存器如，AX-&gt;EAX"></a>可由8086的16位寄存器变为32位的寄存器如，AX-&gt;EAX</h5><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><ul>
<li>AX,Accumulator Register，累加器</li>
<li>BX,Base Register，基址寄存器</li>
<li>CX,Counter Register，计数器</li>
<li>DX,DataRegister，数据寄存器</li>
</ul>
<ul>
<li>SP,Stack Pointer，堆栈指针</li>
<li>BP,Base Pointer，基址指针</li>
<li>SI,Source Index，源变址寄存器</li>
<li>DI,Destination Index，目的变址寄存器,<a href>其中，SI与DI隐含使用</a></li>
</ul>
<h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>段寄存器可用于作为段前缀</p>
<ul>
<li>CS,Code Segment，代码段寄存器</li>
<li>SS,Stack Segment，堆栈段寄存器</li>
<li>DS,Data Segment，数据段寄存器</li>
<li>ES,Extra Segment，附加段寄存器</li>
<li>FS，附加段寄存器</li>
<li><p>GS，附加段寄存器</p>
</li>
<li><p>IP,Instruction Pointer，指令指针，<a href>CS:IP在地址加法器中形成物理地址，由BIU修改，不能直接修改</a></p>
</li>
</ul>
<ul>
<li><p>FL,FR,flag，标志寄存器</p>
<ul>
<li><p>CF,Carry Flag，进位或错误标志，CF=1,否则CF=0</p>
</li>
<li><p>PF,Parity Flag，低8位结果偶数个1，PF=1，否则PF=0</p>
</li>
<li><p>AF,Auxiliary Carry Flag，D3有进位或借位，AF=1</p>
</li>
<li><p>ZF,Zero Flag，结果为0，ZF=1</p>
</li>
<li><p>SF,Sign Flag，结果为正，SF=0</p>
</li>
<li><p>OF,Overflow Flaw，有符号数算数运算超出表示范围，OF=1</p>
</li>
</ul>
<hr>
<p>  DF,Dirction Flag</p>
<ul>
<li><p>IF,Interrupt Enable Flag</p>
</li>
<li><p>TF,Trap Flag</p>
</li>
</ul>
</li>
</ul>
<h2 id="系统级寄存器"><a href="#系统级寄存器" class="headerlink" title="系统级寄存器"></a>系统级寄存器</h2><h3 id="系统地址寄存器"><a href="#系统地址寄存器" class="headerlink" title="系统地址寄存器"></a>系统地址寄存器</h3><ul>
<li>GDTR,Global Descriptor Table Register，全局描述符表寄存器</li>
<li>IDTR,Interrupt Descriptor Table Register，中断描述符表寄存器</li>
<li>LDTR,Local Descriptor Table Register，局部描述符表寄存器</li>
<li>TR,Task Register，任务状态寄存器</li>
</ul>
<h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><ul>
<li>CR0</li>
<li>CR1</li>
<li>CR2</li>
<li>CR3</li>
<li>CR4</li>
</ul>
<h2 id="总线周期"><a href="#总线周期" class="headerlink" title="总线周期"></a>总线周期</h2><ul>
<li>工作时序</li>
<li>时钟周期</li>
<li>总线周期</li>
<li>指令周期</li>
<li>总线请求</li>
<li>总线响应</li>
<li>中断响应</li>
<li>中断响应周期</li>
<li>8086时钟状态</li>
<li></li>
</ul>
<h1 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h1><ul>
<li>立即数</li>
<li>寄存器</li>
<li>存储器</li>
</ul>
<h2 id="存储器寻址"><a href="#存储器寻址" class="headerlink" title="存储器寻址"></a>存储器寻址</h2><ul>
<li>Effective Address,EA，有效地址，偏移地址</li>
</ul>
<h1 id="Pentium保护模式及存储管理"><a href="#Pentium保护模式及存储管理" class="headerlink" title="Pentium保护模式及存储管理"></a>Pentium保护模式及存储管理</h1><ul>
<li>GDT，全局描述符表，系统只有一个</li>
<li>LDT，局部描述符表，每个任务一个</li>
<li>IDT，中断描述符表，保存门描述符，整个系统一个</li>
<li>TSS,Task State Segment，任务状态段，每个任务一个</li>
</ul>
<h2 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>任务间存储空间保护</li>
<li>段属性和界限保护</li>
<li>特权级与特权级保护</li>
</ul>
<h4 id="特权管理"><a href="#特权管理" class="headerlink" title="特权管理"></a>特权管理</h4><ul>
<li>CPL,Current Privilege Level，即代码段描述符中的DPL。</li>
<li>DPL,Descriptor Privilege Level，保存在该段的段描述符的特权级位。</li>
<li>RPL,Request Privilege Level，新装入段寄存器的段选择符的特权级。</li>
<li>高特权级可访问特权级低的数据，低特权级可调用特权级高程序。</li>
</ul>
<h3 id="段间转移"><a href="#段间转移" class="headerlink" title="段间转移"></a>段间转移</h3><ul>
<li>任务内转移<ul>
<li>段内 NEAR，改变IP，检查目标指令位置是否超出段长</li>
<li>段间 FAR，从一个段到另外一个段（跳转？中断？）<ul>
<li>同一特权级，直接转移，可使用段描述符实现</li>
<li>不同特权级，间接转移，可使用调用门调用，使用中断门/陷阱门中断</li>
</ul>
</li>
</ul>
</li>
<li>任务间切换<ul>
<li>直接，给任务寄存器TR送一个段选择符，然后TR找到TSS描述符，找到对应的段。</li>
<li>间接，给TR送一个段选择符，然后TR找到任务门描述符，找到对应段。</li>
</ul>
</li>
</ul>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><ul>
<li>PWT ,P     Write Through</li>
<li>PCD,</li>
<li>P，若P=0，那么为该页在主存中不存在</li>
<li></li>
</ul>
<h1 id="IN-OUT"><a href="#IN-OUT" class="headerlink" title="IN/OUT"></a>IN/OUT</h1><ul>
<li>DMA，Direct Memory Access</li>
<li>外设-&gt;DMA-&gt;CPU</li>
</ul>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>组合数学</title>
    <url>/2020/04/06/%20Math/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>n阶幻方，其幻和为：</p>
<script type="math/tex; mode=display">
\frac {n*(1+n^2)}{2}</script><p>存在性：存在除2阶外的任意阶幻方。</p>
<p>计数与分类：奇数阶幻方；4n阶幻方；4n+2阶幻方。</p>
<p>构造方法：见课本</p>
<p>优化问题：略</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>鸽巢原理</p>
<p>Ramsey定理</p>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>线排列</p>
<p>圆排列</p>
<p>n元素集合的$r-$圆排列数为</p>
<script type="math/tex; mode=display">
\frac {1}{r}P(n,r)=\frac {n!}{r(n-r)!}</script><p>集合的排列数和组合数</p>
<p>多重集合的排列</p>
<script type="math/tex; mode=display">
M=\{ \infty \cdot a_1,\infty \cdot a_2...\infty \cdot a_n\}的r-排列数是n^r\\</script><script type="math/tex; mode=display">
M=\{ k_1\cdot a_1,k_2\cdot a_2...k_n\cdot a_n\}的全排列数为\frac {(k_1+k_2...+k_n)!}{k_1!k_2!...k_n!}</script><p>常利用公式(4)和分类法来解题目</p>
<p><strong>多重集合的组合</strong></p>
<script type="math/tex; mode=display">
M=\{ \infty \cdot a_1,\infty \cdot a_2...\infty \cdot a_n\}的r-组合数为\dbinom{n+r-1}{r}</script><script type="math/tex; mode=display">
M=\{ \infty \cdot a_1,\infty \cdot a_2...\infty \cdot a_n\},r \geq n,则M中每一个元素至少取一个的r-组合数为 \dbinom{r-1}{n-1}</script><p><strong>排列的生成</strong></p>
<p>​    (a)      邻位互换法，要得到${1,2…n}$的全排列，可以先得到${1,2…n-1}$的全排列，然后将n插入到其排列中。</p>
<p>​        活动状态：当一个数上方的箭头所指的一侧，相邻的数比该数小，那么该数处于活动状态。</p>
<p>​    (b)     字典序法</p>
<p>$x_1+x_2…+x_n=r$的非负整数解集个数为：$\frac{(n+r-1)!}{(n-1)!*r!}=\dbinom{n+r-1}{r}$</p>
<p>其中，$x_i\geq 0$</p>
<h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><script type="math/tex; mode=display">
{(x+y)}^n=\dbinom{n}{0}x^0y^n+\dbinom{n}{1}x^1y^{n-1}...+\dbinom{n}{n-1}x^{n-1}y^1+\dbinom{n}{n}x^ny^0，其中n\geq 0</script><script type="math/tex; mode=display">
\dbinom{n}{k}\\
(1)\     \dbinom{n}{k}=\dbinom{n}{n-k} \\
(2)\     \dbinom{n}{k}=\dbinom{n-1}{k}+\dbinom{n-1}{k-1}\\
(3)\     \dbinom{n}{\frac{n}{2}}为max\\</script><h3 id="牛顿二项式"><a href="#牛顿二项式" class="headerlink" title="牛顿二项式"></a>牛顿二项式</h3><h1 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h1><h2 id="0x01-定义"><a href="#0x01-定义" class="headerlink" title="0x01 定义"></a>0x01 定义</h2><p>$S中不具有性质P_1,P_2\dots,P_m的元素个数为$​</p>
<script type="math/tex; mode=display">
|\overline{A_1}\cap\overline{A_2}\cap\dots\cap\overline{A_m}|\\=|S|-\sum_{ i= 1}^{m}|A_i|+\sum_{1\leq i<j\leq m}|A_i\cap A_j|-\sum_{1\leq i<j<k\leq m}|A_i\cap A_j\cap A_k|+\dots +(-1)^{m}|A_1\cap A_2\cap\dots\cap A_m|</script><p>那么容易推出</p>
<script type="math/tex; mode=display">
|A_1\cup A_2\cup A_3|=|A_1|+|A_2|+|A_3|-(|A_1\cap A_2|+|A_2\cap A_3|+|A_1\cap A_3|)+|A_1\cap A_2\cap A_3|</script><h2 id="0x02-欧拉函数-phi-n"><a href="#0x02-欧拉函数-phi-n" class="headerlink" title="0x02 欧拉函数$\phi (n)$"></a>0x02 欧拉函数$\phi (n)$</h2><p>设</p>
<script type="math/tex; mode=display">
n=p_1^{a_1}p_2^{a_2}p_3^{a_3}p_4^{a_4}...p_k^{a_k}</script><p>有</p>
<script type="math/tex; mode=display">
\phi(n)=n(1-\frac{1}{p_1})(1-\frac{1}{p_2})...(1-\frac{1}{p_k})</script><h2 id="0x03-Jordon公式"><a href="#0x03-Jordon公式" class="headerlink" title="0x03 Jordon公式"></a>0x03 Jordon公式</h2><p>不妨设</p>
<p>$W(0)=|S|$</p>
<p>$W(1)=\displaystyle\sum_{i=1}^{m}|A_i|$</p>
<p>$W(2)=\displaystyle\sum_{1\leq i&lt;j\leq m}|A_i\cap A_j|$</p>
<p>$\dots$</p>
<p>$W(m)=|A_1\cap A_2\cap \dots A_m|$</p>
<p>那么有原式为$W(0)-W(1)+\dots+(-1)^mW(m)$</p>
<p>集合S中恰好具有$r(0\leq r\leq m)$种特性质的元素个数</p>
<p>$M(r)=W(r)-\dbinom{r+1}{r}W(r+1)+\dots+(-1)^{m-r}\dbinom{m}{r}W(m)=\displaystyle\sum_{i=0}^{m-r}(-1)^i\dbinom{r+i}{r}W(r+i)$</p>
<h2 id="0x04-对称筛公式"><a href="#0x04-对称筛公式" class="headerlink" title="0x04 对称筛公式"></a>0x04 对称筛公式</h2><p>用于当对象的性质是对称的，即无差别的。</p>
<p>即当</p>
<script type="math/tex; mode=display">
\\N=|S|\\N(1)=|A_1|=|A_2|=\dots=|A_m|\\N(2)=|A_1\cap A_2|=\dots=|A_{m-1}\cap A_{m}|\\
...</script><p>有</p>
<script type="math/tex; mode=display">
|\overline{A_1}\cap \overline{A_2}\cap\dots\cap \overline{A_m}|=N-\dbinom{m}{1}N(1)+\dots+\dbinom{m}{m}N(m)</script><h2 id="0x05-多重集的r-组合数"><a href="#0x05-多重集的r-组合数" class="headerlink" title="0x05 多重集的r-组合数"></a>0x05 多重集的r-组合数</h2><ul>
<li>见例4.2.1</li>
</ul>
<ol>
<li>求无穷集的r-组合数</li>
<li>注意全集是哪一个，约束条件是什么？</li>
<li>构造性质</li>
<li>求各个子集的模</li>
<li>根据公式求解</li>
</ol>
<h2 id="0x06-错位排列"><a href="#0x06-错位排列" class="headerlink" title="0x06 错位排列"></a>0x06 错位排列</h2><p>​        每个物体$i$都不在第$i$个位置上的排列称为错位排列$Derangement$，通常使用$D_n$表示错位排列数</p>
<p>对于$n\geq 1$有</p>
<script type="math/tex; mode=display">
D_n=n!(1-\frac{1}{1!}+\frac{1}{2!}-\dots+(-1)^n\frac{1}{n!})</script><ul>
<li><p>其中可以根据高等数学的知识得，当n较大时</p>
<script type="math/tex; mode=display">
P(错位排列出现)=\frac{1}{e}</script></li>
<li></li>
</ul>
<p>可以证明$D_n$满足以下递推式</p>
<script type="math/tex; mode=display">
\begin{cases}
D_n=(n-1)(D_{n-1}+D_{n-2})\\
D_1=0\\
D_0=1\\
\end{cases}</script><h2 id="0x07-有限制条件的排列问题"><a href="#0x07-有限制条件的排列问题" class="headerlink" title="0x07 有限制条件的排列问题"></a>0x07 有限制条件的排列问题</h2><p>​    一般来说，令$I={ 1,2,\dots ,n}$在$I$的排列中不出现12，23，34，…，(n-1)n的排列称为有限制条件的排列。通常把排列的个数记作$Q_n$</p>
<p>对于$n\geq 1$有</p>
<script type="math/tex; mode=display">
Q_n=n!-\dbinom{n-1}{1}(n-1)!+\dbinom{n-1}{2}(n-2)!-\dots+(-1)^{n-1}\cdot 1!</script><p>可以通过数学公式变形得到</p>
<script type="math/tex; mode=display">
\begin{cases}
Q_n=D_n+D_{n-1}\\
Q_1=1\\
Q_0=0
\end{cases}</script><h2 id="棋盘多项式与有禁区的排列"><a href="#棋盘多项式与有禁区的排列" class="headerlink" title="棋盘多项式与有禁区的排列"></a>棋盘多项式与有禁区的排列</h2><p>设$C$是一个棋盘，$r_k(C)$表示把$k$个棋子布到$C$中的方案数。</p>
<ul>
<li><p>若k大于$|C|,则有 r_k(C)=0$</p>
</li>
<li><p>$r_1(C)=|C|$</p>
</li>
<li><p>若$C_1$与$C_2$的形状相同，那么有$r_k(C_1)=r_k(C_2)$</p>
</li>
<li><p>设$C_i$是从棋盘$C$中删除指定方格所在行所在列所剩余的棋盘，$C_l$是从棋盘$C$中删除指定方格后所剩余的棋盘，则有</p>
</li>
</ul>
<script type="math/tex; mode=display">
r_k(C)=r_{k-1}(C_i)+r_k(C_l)\  其中k\geq 1</script><ul>
<li>设棋盘$C$是由$C_1$和$C_2$两部分组成，且其布棋方案是互相独立的，则有</li>
</ul>
<script type="math/tex; mode=display">
r_k(C)=\displaystyle\sum_{i=0}^{k}r_i(C_1)\cdot r_{k-i}(C_2)</script><h3 id="棋盘多项式，车多项式"><a href="#棋盘多项式，车多项式" class="headerlink" title="棋盘多项式，车多项式"></a>棋盘多项式，车多项式</h3><script type="math/tex; mode=display">
R(C)=\displaystyle\sum_{k=0}^{\infty}r_k(C)x^k</script><p>有</p>
<p>$R(C)=xR(C_i)+R(C_l)$</p>
<p>$R(C=R(C_1)\cdot R(C_2)$</p>
<p><img src="https://i.loli.net/2020/06/12/QExUTs5lK19436C.jpg" alt="IMG_1302_20200612-154902_.PNG"></p>
<h2 id="有禁区的棋盘"><a href="#有禁区的棋盘" class="headerlink" title="有禁区的棋盘"></a>有禁区的棋盘</h2><ol>
<li>求禁区的棋盘多项式</li>
<li>求$r_1,r_2…r_n$</li>
<li>带入公式求解排列数</li>
</ol>
<script type="math/tex; mode=display">
N=n!-r_1(n-1)!+r_2(n-2)!+...+(-1)^nr_n0!</script><h1 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h1><h2 id="一些性质与常见的生成函数"><a href="#一些性质与常见的生成函数" class="headerlink" title="一些性质与常见的生成函数"></a>一些性质与常见的生成函数</h2><p>设有一个有限或无限的数列 ${a_0,a_1,…,a_k,..}$，做形式幂级数</p>
<script type="math/tex; mode=display">
G(x)=a_0+a_1x+\dots+a_kx^k+\dots,</script><p>称$G(x)$为数列${ a_0,a_1,…,a_k,..}$的（普通）生成函数，并记作$G{a_k}$</p>
<script type="math/tex; mode=display">
b_k=\begin{cases}
0,& k<r\\
a_{k-r},&k\geq r
\end{cases} \qquad B(x)=x^rA(x)\\

b_k=a_{k+r} \quad B(x)=\frac{1}{x}(A(x)-\displaystyle\sum_{k=0}^{r-1}a_kx^k)\\
b_k=\displaystyle\sum_{i=0}^{k}a_i \quad B(x)=\frac{A(x)}{1-x}\\
b_k=\displaystyle\sum_{i=k}^{\infty}a_i\quad B(x)=\frac{A(1)-xA(x)}{1-x}\\
b_k=ka_i \quad B(x)=xA^{'}(x)\\
c_k=\alpha a_k+\beta b_k\quad C(x)=\alpha A(x)+\beta B(x)\\
c_k=a_0b_k+a_1b_{k-1}+a_2b{k-2}+\dots+a_kb_0\quad C(x)=A(x)B(x)\\
b_k={\alpha}^{k}a_k\quad B(x)=A(\alpha x)\\</script><h2 id="组合数的生成函数"><a href="#组合数的生成函数" class="headerlink" title="组合数的生成函数"></a>组合数的生成函数</h2><ul>
<li><p>设多重集</p>
<script type="math/tex; mode=display">
M=\{k_1\cdot a_1,...k_n\cdot a_n\}</script><p>则$M$的$k-$组合数$c_k$对应数列${c_k}$的生成函数为</p>
<script type="math/tex; mode=display">
G(x)=\prod _{i=1}^{n}(\sum_{j=0}^{k_i}x^j)\\
其中，x_k为G(x)展开式中x^k的系数。</script></li>
<li></li>
</ul>
<h2 id="Catalan数列"><a href="#Catalan数列" class="headerlink" title="Catalan数列"></a>Catalan数列</h2><script type="math/tex; mode=display">
h(n)=\sum_{k=1}^{n-1}h(k)h(n-k)\\</script><p>推理可得，一个凸n+1边形中有$\frac{1}{n}\dbinom{2n-2}{n-1}$种不同的剖分方法</p>
<h2 id="常见数列的生成函数"><a href="#常见数列的生成函数" class="headerlink" title="常见数列的生成函数"></a>常见数列的生成函数</h2><script type="math/tex; mode=display">
a_k=k+1,G(x)=\frac{1}{(1-x)^2}</script><h1 id="递推关系"><a href="#递推关系" class="headerlink" title="递推关系"></a>递推关系</h1><h2 id="解线性常系数齐次递推关系"><a href="#解线性常系数齐次递推关系" class="headerlink" title="解线性常系数齐次递推关系"></a>解线性常系数齐次递推关系</h2><ul>
<li><p>一些问题</p>
<ul>
<li>爬楼梯问题</li>
<li>Fibonacci数列</li>
<li>Hanoi塔问题</li>
<li>涂色问题</li>
</ul>
</li>
<li><script type="math/tex; mode=display">
若c_i(n)为常数，那么称之为k阶常系数线性递推关系\\
若g(n)=0，则称之为齐次的\\</script></li>
<li><p>求解递推关系</p>
</li>
</ul>
<ol>
<li><p>使用特征方程求解特征根</p>
<script type="math/tex; mode=display">
x_1=?\\
x_2=?\\
...\\</script><ol>
<li><p>那么有通解</p>
<script type="math/tex; mode=display">
f(n)=c_1x_1^n+c_2x_2^n+...</script></li>
<li><p>代入原方程求解$c_i$</p>
</li>
</ol>
</li>
</ol>
<ul>
<li><p>特征方程</p>
<script type="math/tex; mode=display">
x^k-c_1x^{k-1}-\dots-c_k=0\\</script></li>
<li><p>重根</p>
</li>
</ul>
<script type="math/tex; mode=display">
  若有e重根x_i，那么x_i^n,nx_i^n....n^{e-1}x_i^n都是原递推关系的解</script><ul>
<li>复数根<script type="math/tex; mode=display">
有x_1=a+bi\\
那么有c_1e^{ax}(cos(bx)+i*sin(bx))\\</script></li>
</ul>
<h2 id="解线性常系数非齐次递推关系"><a href="#解线性常系数非齐次递推关系" class="headerlink" title="解线性常系数非齐次递推关系"></a>解线性常系数非齐次递推关系</h2><ol>
<li>特征方程</li>
<li>判断$g(n)$的格式，属于哪一种，得到非齐次特解</li>
<li>回代特解求$c_i$</li>
</ol>
<p><img src="https://i.loli.net/2020/06/05/hYyRiKZAk4gQI9V.jpg" alt="IMG_1292_20200605-171010_.PNG"></p>
<h2 id="迭代与归纳解非线性递推关系"><a href="#迭代与归纳解非线性递推关系" class="headerlink" title="迭代与归纳解非线性递推关系"></a>迭代与归纳解非线性递推关系</h2><ul>
<li><h1 id="Polya-定理"><a href="#Polya-定理" class="headerlink" title="$Polya$定理"></a>$Polya$定理</h1></li>
<li><p>Q：用m种颜色对n个对象涂色，一个对象涂任意一种颜色，则在置换群H的作用下不等价的方案数为多少？</p>
</li>
</ul>
<ol>
<li><p>构造置换群<code>H</code>，其中置换群的意义为：寻找等价类；这些等价类在这些$\sigma$的作用下的等价。从而寻找等价类的数量</p>
</li>
<li><p>求等价类的数量L</p>
<script type="math/tex; mode=display">
L=\frac{1}{|H|}[m^{\lambda(\sigma_1)}+m^{\lambda(\sigma_2)}+...+m^{\lambda (\sigma_k)}]
\\
其中，\lambda(\sigma)为置换\sigma中轮换的个数。
m为m种颜色</script></li>
</ol>
<ul>
<li>Q：带有约束条件的涂色问题：若要求有3个对象要红色，2个对象要蓝色的涂色方案有多少？</li>
</ul>
<ol>
<li><p>构造置换群<code>H</code></p>
</li>
<li><script type="math/tex; mode=display">
s_k=x_1^k+x_2^k+...+x_n^k\\
f(x_1...x_n)=\frac{1}{|H|}\sum{s_k^{\lambda{(\sigma_k)}}}</script></li>
<li><p>对于所约束的条件，找到符合的项，其前面的系数即$ans$</p>
</li>
</ol>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul>
<li>构造<code>H</code></li>
<li>阅读<code>例7.6.1</code>和<code>例7.6.2</code></li>
</ul>
<h1 id="课后例题"><a href="#课后例题" class="headerlink" title="课后例题"></a>课后例题</h1><ul>
<li>例4.4 注意题干条件存在着所有人必存在一种情况，那么可以构造另外一种容斥</li>
<li>例6.5.2</li>
<li>习题6.4(2)(3)</li>
</ul>
]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2020/04/04/%20Linux/</url>
    <content><![CDATA[<h1 id="VI"><a href="#VI" class="headerlink" title="VI"></a>VI</h1><h5 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h5><p>$:wq，保存并退出$</p>
<p>$:w,保存$</p>
<p>$:w \ filename,另存为filename$</p>
<p>$:wq!,保存强制退出$</p>
<p>$gg,使光标到文件头$</p>
<p>$G,使光标移到文件尾$</p>
<p>$nG,使光标移到第n行$</p>
<p>$ab,缩写，unab，取消缩写$</p>
<p>$宏操作符，map，unmap,取消宏\ page 98$</p>
<p>$u,撤销最近的操作$</p>
<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>$command\ source\ target$</p>
<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>$mkdir\ filename,创建目录$</p>
<h2 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h2><ul>
<li><code>rm filename</code>         移除文件</li>
<li><code>rm -rf /test</code>        移除非空目录<code>/test</code></li>
<li></li>
</ul>
<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><p>$cp\ filename1\ filename2$</p>
<p>$cp\ filename\ list$</p>
<p>$cp\ -r\ list1(or\ filename)\ list2,若list2不存在则创建$</p>
<h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p>$mv\ filename\ list$</p>
<p>$mv\  filename1\ filename2,将filename1文件名改为filename2$</p>
<p><strong>链接文件</strong></p>
<p><strong>寻找文件</strong></p>
<p>$find\ page125$</p>
<p><strong>计算字数</strong></p>
<p>$wc\ filename,显示：行数(-l)，单词数(-w)，字符数(-c)$</p>
<p>输出重定向，运行用户把进程的输出保存在文件中，然后，用户可以编辑，打印或者作为其他进程的输入。</p>
<p>$command \ &gt; \ filename\ 若有，则覆盖\command\  &gt;&gt;\ filename，若有，则添加到文件结尾$</p>
<p>$cat\ &gt; filename,创建文件，但输入时无法修改，若有，则覆盖\cat\ &gt;&gt;\ filename,创建文件，但输入时违法修改，若有，则添加到文件结尾$</p>
<p>$cat\ filename1\ &gt;\ filename2\cat\ filename1\ filename2…\ filenamei\ &gt;&gt;\ target$</p>
<p><strong>显示文件</strong></p>
<p>$head\ -n\ filename,显示文件的前n行$</p>
<p>$tail\ -n\ filename,显示文件的后n行$</p>
<p>$tail\ -n +10\ filename|head -n\ 10,显示第10-20行$</p>
<p><strong>查找文件</strong></p>
<p>$find\ . -name \ filename,寻找名为filename的文件$</p>
<p>$find\ . \ -name\ filename\ -exec\  -cp\  {}\ file\  \verb|| ;,寻找名为filename的文件并且复制到file文件夹中$</p>
<p>$eg: ls &gt;&gt; a,who &gt;&gt; a,date &gt;&gt; a$</p>
<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h2><ul>
<li>环境变量，即标准变量，由系统管理员定义</li>
<li>局部变量，由用户定义</li>
<li>shell对于所有分配给变量的值按字符对待</li>
</ul>
<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><ul>
<li>用户只能关闭自己的进程，root可以关闭所有进程</li>
<li>终止一个前台进程<code>^C</code></li>
<li><code>SIGKILL</code>由<code>kill -9</code>发送</li>
<li><code>SIGINT</code>由<code>^C</code>发送</li>
<li><code>SIGTERM</code>由<code>kill -15</code>or<code>kill</code>发送</li>
<li><code>SIGHUP</code>挂起信号，关闭终端时会产生</li>
<li></li>
</ul>
<h3 id="tee-分离输出"><a href="#tee-分离输出" class="headerlink" title="tee 分离输出"></a>tee 分离输出</h3><ul>
<li>多重输出</li>
<li>tee命令和|一起使用实现分离输出</li>
<li><code>ls -C | tee file</code></li>
</ul>
<h3 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h3><ul>
<li><p>算术运算</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> $expr 1 + 1</span><br><span class="line">2</span><br><span class="line"> $x=`expr $x +1 `</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><ul>
<li>-a    不覆盖原来内容 </li>
<li>-i     不响应中断     </li>
</ul>
<ul>
<li>ps    查看进程表</li>
</ul>
<ul>
<li><p><code>./won</code>表示在全局范围内搜索命令</p>
</li>
<li><p><code>won</code>表示在PATH中搜索命令</p>
</li>
<li><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat bye</span><br><span class="line">exit</span><br><span class="line">chmod u+x bye</span><br><span class="line">./bye</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><h4 id="PS1，用于编辑命令行的格式"><a href="#PS1，用于编辑命令行的格式" class="headerlink" title="PS1，用于编辑命令行的格式"></a>PS1，用于编辑命令行的格式</h4><ul>
<li>\d</li>
<li>\H</li>
<li>\h</li>
<li>\t</li>
<li>\T</li>
<li>\A</li>
<li>\u</li>
<li>\v</li>
<li>\w</li>
<li>\W</li>
<li>#</li>
<li>$</li>
</ul>
<ul>
<li><code>help</code>            是<code>bash</code>的内置命令，用于记录<code>bash</code>的内置命令和关键字</li>
<li><code>man</code>              是全系统的文档系统，用于与查看命令联机帮助页</li>
<li><code>info</code>            是源自<code>GNU</code>项目的另外一个文档系统                </li>
</ul>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><h5 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h5><ul>
<li><code>halt</code></li>
<li><code>shut down</code></li>
<li><code>poweroff</code></li>
<li>注意，<code>init 0</code>只能作为超级用户使用的关机，实际上<code>init 0</code>只是将当前运行级别更改为0</li>
</ul>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ul>
<li>文件内容查找</li>
</ul>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><ul>
<li>输出指定字符串或变量</li>
<li><code>-e</code>：激活转义字符</li>
<li>消除元字符：<code>\</code> <code>&quot; &quot;</code> <code>&#39; &#39;</code></li>
<li>因为反斜杠是元字符的一种，所以在激活转义字符的时候需要消除转义字符中的反斜杠的影响</li>
<li></li>
</ul>
<h5 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h5><ul>
<li><code>ls ~</code>        显示当前用户主目录的内容</li>
</ul>
<h5 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h5><ul>
<li><code>cd</code>    回到<code>HOME</code>变量所设置的主目录</li>
</ul>
<ul>
<li>Linux文件名长度限制是255个字符</li>
</ul>
<h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5><ul>
<li><code>Ctrl-L</code></li>
<li><code>\033c</code></li>
</ul>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><ul>
<li><h1 id="元字符-1"><a href="#元字符-1" class="headerlink" title="元字符"></a>元字符</h1></li>
<li><p>`command`命令替换符</p>
</li>
</ul>
<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>随机数学</title>
    <url>/2020/04/03/%20Math/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="随机事件及其概率"><a href="#随机事件及其概率" class="headerlink" title="随机事件及其概率"></a>随机事件及其概率</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>随机试验，简称为试验；若均满足：<strong>可重复性；可观测性；随机性。</strong></p>
<p>$E:$    试验</p>
<p>$w$:    样本点</p>
<p>$\Omega = ${ $w_1,w_2…w_i$ } :    样本空间</p>
<p>$A$，其中$A\subseteqq \Omega$:    事件</p>
<p>{$w_i$} :    基本事件</p>
<p>$\Omega$:    必然事件</p>
<p>$\phi$:    不可能事件</p>
<p>若 试验结果 $w\in A$,则称事件A发生</p>
<h3 id="事件的关系"><a href="#事件的关系" class="headerlink" title="事件的关系"></a>事件的关系</h3><p>$A\subseteqq B $:    包含</p>
<p>$A=B$:    相等</p>
<p>互斥：    不能同时发生</p>
<p>$\bar{A}=B$:    互逆，对立</p>
<h3 id="事件的运算"><a href="#事件的运算" class="headerlink" title="事件的运算"></a>事件的运算</h3><p>$A\cup B=${$w|w\in A或w\in B$}</p>
<p>$A\cap B或AB=${$w|w\in A或w\in B$}</p>
<p>$A-B=${$w|w\in A且 w\notin B$}</p>
<p>$\overline {A\cup B}=\overline A\cap \overline B$</p>
<p>$\overline {A\cap B}=\overline A\cup \overline B$</p>
<p>$n_A$:    事件A发生的频数</p>
<p>$f_n(A)$:    事件A发生的频率</p>
<p>$其中 f_n(A)=\frac{n_A}{n}$</p>
<p><strong>减法公式：</strong>$P(B-A)=P(B)-P(AB)$</p>
<p><strong>加法公式：</strong>$P(A\cup B)=P(A)+P(B)-P(AB)$</p>
<h3 id="古典概型：有限个样本点；基本事件发生的可能性相同。"><a href="#古典概型：有限个样本点；基本事件发生的可能性相同。" class="headerlink" title="古典概型：有限个样本点；基本事件发生的可能性相同。"></a>古典概型：有限个样本点；基本事件发生的可能性相同。</h3><h2 id="几何概型"><a href="#几何概型" class="headerlink" title="几何概型"></a>几何概型</h2><h2 id="条件概型"><a href="#条件概型" class="headerlink" title="条件概型"></a>条件概型</h2><p>$P(B|A)=\frac{P(AB)}{P(A)} \Longrightarrow P(AB)=P(A)P(B|A)$</p>
<p>条件概型的性质：非负性；<strong>规范性：$P(\Omega |A)=1$</strong>；可列可加性：对于<strong>不相容</strong>的事件$B_1,B_2,\cdot \cdot \cdot $有</p>
<script type="math/tex; mode=display">
P((\cup_{i=1}^\infty B_i )|A)=\sum_{i=1}^\infty P(B_i|A)</script><p><strong>全概率公式：</strong></p>
<script type="math/tex; mode=display">
P(B)=\sum\limits_{i=1}^nP(A_i)P(B|A_i)</script><p>其中：</p>
<script type="math/tex; mode=display">
\cup _{i=1} ^n A_i=\Omega 且 \cap _{i=1} ^n A_i=\Phi</script><p><em>推导：</em></p>
<p><em>对任意事件B，有</em></p>
<script type="math/tex; mode=display">
B=B\cap \Omega =B\cap (\cup _{i=1} ^n A_i)=\cup _{i=1} ^n {A_iB}</script><p><img src="https://i.loli.net/2020/04/08/lSNC6yKmUEb7RgW.jpg" alt="概率_25.jpg"></p>
<p>由条件概型的性质可得全概率公式。若某问题可画出概率树，那么该问题属于条件概型，甚至符合全概率公式。</p>
<p><strong>贝叶斯公式：</strong></p>
<script type="math/tex; mode=display">
P(A_j|B)=\frac{P(A_jB)}{P(B)}=\frac{P(B|A_j)P(A_j)}{\sum_{i=1}^nP(A_i)P(B|A_i)}</script><h2 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h2><p>如果</p>
<script type="math/tex; mode=display">
P(AB)=P(A)P(B)\\
P(\overline{A}B)=P(\overline{A})P(B)\\
P(\overline{A}\overline{B})=P(\overline{A})P(\overline{B})</script><p>则称事件A与事件B相互独立。</p>
<h2 id="伯努利"><a href="#伯努利" class="headerlink" title="伯努利"></a>伯努利</h2><p>若某试验$E$是n重伯努利试验，即试验$E$只有两个对立的结果，将其进行n次。设$P(A)=p$。</p>
<p>有</p>
<script type="math/tex; mode=display">
P_n(k)=(_k^n)p^k(1-p)^{n-k}=C_n^kp^k(1-p)^{n-k}</script><h1 id="随机变量及其概率分布"><a href="#随机变量及其概率分布" class="headerlink" title="随机变量及其概率分布"></a>随机变量及其概率分布</h1><h2 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h2><p>性质：</p>
<p>$P${$a&lt;X\leq b$}$=P{ X\leq b}-P{ X\leq a}=F(b)-F(a)$</p>
<p>单调不减</p>
<p>$F(-\infty )=lim_{x\rightarrow -\infty }F(x)=0$</p>
<p>$F(+\infty )=lim_{x\rightarrow +\infty }F(x)=1$</p>
<p>F(x)是右连续的，即$F(x^{+})=F(x)$</p>
<h2 id="离散型随机变量"><a href="#离散型随机变量" class="headerlink" title="离散型随机变量"></a>离散型随机变量</h2><p>两点分布</p>
<p>二项分布，伯努利试验记作$X ~B(n,p) X在(n+1)p处取得最大值$</p>
<p>几何分布</p>
<p>泊松分布：</p>
<script type="math/tex; mode=display">
P\{ X=k\}=\frac{\lambda ^ke^{-\lambda}}{k!}\\
其中，\lambda为服从参数,记作X P(\lambda)</script><h2 id="连续型随机变量"><a href="#连续型随机变量" class="headerlink" title="连续型随机变量"></a>连续型随机变量</h2><h3 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h3><script type="math/tex; mode=display">
f(x)=\left\{    \begin{array}{lr}        \frac{1}{b-a},a<x<b\\        0,其他            \end{array}\right.\\</script><h3 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h3><script type="math/tex; mode=display">
f(x)=\left\{    \begin{array}{lr}        \lambda e^{-\lambda x} &x>0,\\        0&x\leq 0            \end{array}\right.\\F(x)=\left\{    \begin{array}{lr}    1-e^{-\lambda x}&x>0\\    0&x\leq0\\    \end{array}    \right.\\其中，\lambda>0是常数，称为X服从参数为\lambda的指数分布\\</script><h3 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3><p>$N(\mu ,\sigma^2)$有概率密度函数</p>
<script type="math/tex; mode=display">
f(x)=\frac{1}{\sqrt{2\pi }\sigma}e^{-\frac{(x-u)^2}{2\sigma^2}},-\infty <x<+\infty\\F(\mu)=\frac{1}{2}\\f(\mu)=\frac{1}{\sqrt{2\pi}\sigma}</script><h4 id="标准正态分布"><a href="#标准正态分布" class="headerlink" title="标准正态分布"></a>标准正态分布</h4><p>$N(\mu,\sigma^2)=N(0,1)$</p>
<script type="math/tex; mode=display">
f(x)=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}</script><p>其中$u,\sigma$为服从参数。当$u,\sigma$分布为0，1时，则称$X$服从标准正态分布</p>
<script type="math/tex; mode=display">
F(x)=\Phi (\frac{x-\mu}{\sigma})</script><h1 id="二维连续型随机变量"><a href="#二维连续型随机变量" class="headerlink" title="二维连续型随机变量"></a>二维连续型随机变量</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><script type="math/tex; mode=display">
F(x,y)=\int_{-\infty}^{x}\int_{-\infty}^yf(u,v)dudv\\其中F(x,y)为概率分布函数,f(x,y)为联合概率密度。\\</script><script type="math/tex; mode=display">
1.f(x,y)\ge 0\\
2. \int_{-\infty}^{+\infty}\int_{-\infty}^{+\infty}f(u,v)dudv=1\\
3.若G是xOy上的一个区域，则,P\{(X,Y)\in G\}=\displaystyle\iint_{G}f(x,y)dxdy\\
4.关于Y的边缘概率密度函数f_Y(y)=\displaystyle\int_{-\infty}^{+\infty}f(x,y)dx\\</script><p><strong>独立性</strong></p>
<p>随机变量X和Y相互独立的充要条件：</p>
<ul>
<li>$f(x,y)=f_X(x)f_Y(y)$</li>
<li>$F(x,y)=F_X(x)F_Y(y)$</li>
<li>$P(X,Y)=P_X(X)P_Y(Y)$</li>
<li>$E(XY)=E(X)E(Y)$</li>
</ul>
<p>若$X_1,X_2$相互独立，那么$F_1(x)F_2(x)$一定是某一随机变量的分布密度，但$f_1(x)f_2(x)$不一定为概率密度</p>
<h2 id="连续型"><a href="#连续型" class="headerlink" title="连续型"></a>连续型</h2><h3 id="均匀分布-1"><a href="#均匀分布-1" class="headerlink" title="均匀分布"></a>均匀分布</h3><script type="math/tex; mode=display">
设D是xOy面上的有界区域，其面积为A，若\\f(x,y)=\left\{    \begin{array}{lr}        \frac{1}{A}&(x,y)\in D,\\        0&其他            \end{array}\right.\\则称(X,Y)在区域D上服从均匀分布。</script><h3 id="正态分布-1"><a href="#正态分布-1" class="headerlink" title="正态分布"></a>正态分布</h3><script type="math/tex; mode=display">
f(x,y)=\frac{1}{2\pi \sigma_1 \sigma_2 \sqrt{1-\rho^2} }\cdot e^{\frac{-1}{2(1-\rho^2)}[\frac{(x-\mu_1)^2}{\sigma_1^2}-2\rho \frac{(x-\mu_1)(y-\mu_2)}{\sigma_1\sigma_2}+\frac{(y-\mu_2)^2}{\sigma_2^2}]},(x,y)\in R^2\\其中\sigma_i>0,-1<\rho<1,记作(X,Y) ~N(\mu_1,\mu_2,\sigma_1^2,\sigma_2^2,\rho)</script><h2 id="条件分布"><a href="#条件分布" class="headerlink" title="条件分布"></a>条件分布</h2><script type="math/tex; mode=display">
离散型：P\{X=x_i|Y=y_j\}=\frac{P{X=x_i,Y=y_j}}{P{Y=y_j}}=\frac{p_{ij}}{p_{\cdot j}}\\
连续型条件Y=y下X的条件概率密度函数f_{X|Y}(x|y)=\frac{f(x,y)}{f_Y{y}}</script><h2 id="连续型函数分布​"><a href="#连续型函数分布​" class="headerlink" title="连续型函数分布​"></a>连续型函数分布​</h2><script type="math/tex; mode=display">
有Z=X+Y\\公式法f_Z(z)=\displaystyle \int _{-\infty}^{+\infty}f(x,z-x)dx=\displaystyle \int _{-\infty} ^{+\infty}f(z-y,y)dy\\分布函数法\\
Z=X+Y,若X和Y相互独立\\f_Z(z)=\displaystyle \int _{-\infty} ^{+\infty}f_X(x)f_Y(z-x)dx\\</script><p>$这个公式称为f_X(x)与f_Y(y)的$<strong>卷积公式</strong></p>
<p>$Z=max{X,Y},X与Y相互独立$</p>
<p>$F_Z(z)=F_X(x)F_Y(y)$</p>
<p>$Z=min{X,Y},X与Y相互独立$</p>
<p>$F_Z(z)=1-[1-F_X(z)][1-F_Y(z)]$</p>
<h1 id="数字特征"><a href="#数字特征" class="headerlink" title="数字特征"></a>数字特征</h1><h2 id="数学期望"><a href="#数学期望" class="headerlink" title="数学期望"></a>数学期望</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><strong>离散型数学期望的定义</strong></p>
<ul>
<li><p>其随机变量$X$的分布律为$P{X=x_k}=p_k,(k=1,2,…)$，</p>
<p>若级数</p>
<script type="math/tex; mode=display">
\sum _{k=1}^{\infty}x_kp_k绝对收敛，记作E(X)=\sum _{k=1}^{\infty} x_kp_k</script></li>
</ul>
<p><strong>连续型数学期望的定义</strong></p>
<ul>
<li><p>随机变量$X$的概率密度为$f(x)$</p>
<p>若</p>
<script type="math/tex; mode=display">
\sum _{-\infty}^{+\infty}xf(x)dx绝对收敛，记作E(X)=\int _{-\infty}^{+\infty}x(x)</script></li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>$Y=g(X)$</p>
<ul>
<li><p>离散 $E(Y)=\sum g(x_k)p_k$</p>
</li>
<li><p>连续</p>
<script type="math/tex; mode=display">
E(Y)=\int g(x_k)f(x)dx</script></li>
</ul>
<h2 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h2><ul>
<li>$D(X)=E(X^2)-[E(X)]^2$</li>
<li>$D(X\pm Y)=D(X)+D(Y)\pm 2Cov(X,Y)$</li>
</ul>
<h3 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h3><ul>
<li><script type="math/tex; mode=display">
Cov(X,Y)=E(XY)-E(X)E(Y)</script></li>
<li><p>$Cov(aX,bY)=abCov(X,Y)$</p>
</li>
<li><p>$Cov(X+Y,Z)=Cov(X,Z)+Cov(Y,Z)$</p>
</li>
<li></li>
</ul>
<h3 id="相关系数"><a href="#相关系数" class="headerlink" title="相关系数"></a>相关系数</h3><ul>
<li><script type="math/tex; mode=display">
\rho_{XY}=\frac{Cov(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}
那么\rho 为X和Y的相关系数</script></li>
<li><p>若$\rho_{XY}=0,称X与Y不相关，但不一定独立$</p>
</li>
<li><p>$|\rho _{XY}|\leq 1$</p>
</li>
<li><p>若X与Y相互独立，则$\rho _{XY}=0$</p>
</li>
<li><p>$|\rho|=1的充分必要条件为存在常数a,b使得P{a+bX}=1$</p>
</li>
</ul>
<h4 id="相关性"><a href="#相关性" class="headerlink" title="相关性"></a>相关性</h4><p>下列命题等价</p>
<ul>
<li>$Cov(X,Y)=0$</li>
<li>$X,Y不相关$</li>
<li>$E(XY)=E(X)E(Y)$</li>
<li>$D(X+Y)=D(X)+D(Y)$</li>
<li>$D(X-Y)=D(X)+D(Y)$</li>
<li>$\rho _{XY}=0$</li>
</ul>
<h1 id="样本函数及其概率分布"><a href="#样本函数及其概率分布" class="headerlink" title="样本函数及其概率分布"></a>样本函数及其概率分布</h1><script type="math/tex; mode=display">
设X ~{ N(\mu,\sigma^2)},X_1,X_2,...X_n是来自总体的样本，\overline{X}为样本均值，则随机变量\\
u=\frac{\overline{X}-\mu}{\sigma/\sqrt{n}}为N(0,1)分布</script>]]></content>
      <categories>
        <category>随机数学</category>
      </categories>
  </entry>
  <entry>
    <title>Java核心技术i</title>
    <url>/2020/04/02/%20Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFi/</url>
    <content><![CDATA[<p>$\lambda 表达式形式：参数，箭头 (-&gt;) 以及一个表达式$</p>
<p>无需指定$\lambda 表达式的返回类型$</p>
<p>只有当$\lambda$表达式的体只调用一个方法而不做其他操作时，才能把$\lambda$表达式重写为方法。page248</p>
<p>$\lambda$就是闭包</p>
<p>$\lambda$捕获的变量是事实最终变量$effectively\ final$</p>
<p>$exception\ handing ,异常处理 \ throw\ 抛出\ exception\ handler\ 异常处理器$</p>
<p>$只需要声明\ IOException,检查型(checked)异常$</p>
<p>$i.找到一个合适的异常类\ ii.创建这个类的一个对象\ iii.将对象抛出$</p>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="迭代器·Iterator接口"><a href="#迭代器·Iterator接口" class="headerlink" title="迭代器·Iterator接口"></a>迭代器·Iterator接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interator</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemain</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>实现方式</p>
<ul>
<li>循环数组</li>
<li>链表</li>
</ul>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><ul>
<li>字节流在直接在文件中操作，字符流需要使用缓冲区</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Linux复习</title>
    <url>/2020/04/02/%20Linux%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><ul>
<li>计算机分类<ol>
<li>巨型计算机</li>
<li>大型计算机</li>
<li>小型计算机</li>
<li>微型计算机</li>
</ol>
</li>
<li>计算机基本组成<ol>
<li>输入</li>
<li>处理</li>
<li>输出</li>
<li>存储</li>
</ol>
</li>
<li>计算机的硬件模块<ol>
<li>输入设备</li>
<li>处理器单元<ul>
<li>算术逻辑单元</li>
<li>寄存器</li>
<li>控制单元</li>
</ul>
</li>
<li>内存<ul>
<li>随机存储器 <code>RAM Random Access Memory</code>，不能提供永久存储，当电源中断时，内容丢失</li>
<li>只读存储器 <code>ROM Read Only Memory</code>，用于永久保存产商放置在系统中的程序和数据，不能修改</li>
</ul>
</li>
<li>外部存储器</li>
<li>输出设备</li>
</ol>
</li>
<li>操作系统模型<ol>
<li>硬件</li>
<li>内核</li>
<li>服务层</li>
<li>命令层<code>shell</code></li>
<li>用户层</li>
</ol>
</li>
</ul>
<h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><ul>
<li><p><code>UNIX</code>最初用汇编语言开发</p>
</li>
<li><p>汇编语言编写的程序是与机器相关的</p>
</li>
<li><p>1973年,<code>Ken</code>和<code>Dennis</code>成功用C语言重写了<code>UNIX</code>，其中95%为C语言，只有很少部分是汇编语言代码</p>
</li>
<li><p><code>UNIX</code>2个主要版本</p>
<ol>
<li><code>AT&amp;T UNIX</code>系统V，本书讨论的命令适用于<code>SVR4,UNIX System V Release 4</code></li>
<li><code>Berkeley UNIX</code>，其版本称为<code>BSD,Berkeley Software Distribution</code></li>
</ol>
<p>其他的<code>UNIX</code>变种都是基于这两个版本</p>
</li>
<li><p>一些其他的变种，几乎所有的变种都是基于系统<code>V</code></p>
<ol>
<li>AIX -&gt;IBM公司开发</li>
<li>HP-UX-&gt;惠普公司</li>
<li>LINUX-&gt;芬兰赫尔辛基大学的学生<code>Linux Torvalds</code>的想法</li>
<li>Solaris也称SunOS-&gt;Sun公司基于V第2版和BSD4.3开发</li>
<li><code>UnixWare</code>，Novell 公司开发，后来卖给了Santa Cruz Operation公司</li>
</ol>
</li>
<li><p><code>UNIX</code>模型</p>
<ol>
<li>内核</li>
<li>常驻模块</li>
<li>工具层，<code>Shell</code></li>
<li>虚拟计算机</li>
<li>进程</li>
</ol>
</li>
<li><p><code>UNIX</code>特性</p>
<ol>
<li>可移植</li>
<li>多用户</li>
<li>多任务</li>
<li>多级文件系统</li>
<li>与设备独立的输入输出操作</li>
<li>用户界面<code>Shell</code></li>
</ol>
</li>
</ul>
<h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><ul>
<li><p>登录</p>
<ol>
<li>修改口令 <code>passwd</code></li>
</ol>
</li>
<li><p>口令格式</p>
<ol>
<li>新口令与旧口令3个字符不同</li>
<li>长度至少6个字符，至少2个字母和1个数字</li>
<li>不能与用户标识相同</li>
</ol>
</li>
<li><p>退出系统 <code>[Ctrl-d]</code></p>
</li>
<li><p>在没有退出系统前关闭终端电源并没有结束用户与UNIX系统的交互</p>
</li>
<li><p>基本的命令行格式</p>
<ol>
<li>命令名</li>
<li>命令选项</li>
<li>命令参数</li>
</ol>
<p>字段间用1个或多个空格隔开</p>
</li>
<li><p><code>UNIX系统</code>对大小写敏感</p>
</li>
</ul>
<h2 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h2><ul>
<li><code>who</code>，列出当前登录系统的所用用户登录名，终端号，登录时间</li>
<li><code>who am i</code>，显示本终端用户的信息</li>
<li><code>cal</code>显示日历表<ol>
<li><code>cal 2 2001</code>显示2001年2月的日历表</li>
<li><code>cal 2001</code>显示2001年的日历表</li>
<li><code>learn</code> 包括若干课程的计算机辅助教学程序</li>
<li><code>help</code> 提供多级菜单来引导用户学习命令</li>
<li><code>man</code> 显示在线系统文档的内容，<code>man cal</code>可以查找<code>cal</code>的帮助信息</li>
</ol>
</li>
<li>中断程序运行，<code>[Del]</code>或[<code>Ctrl-c</code>]中断键</li>
</ul>
<h2 id="Shell种类"><a href="#Shell种类" class="headerlink" title="Shell种类"></a>Shell种类</h2><ul>
<li><code>Bourne shell</code></li>
<li><code>Korn shell</code>是<code>Bourne shell</code>的超集</li>
<li><code>C shell</code>是<code>BSD UNIX</code>的一部分</li>
</ul>
<h2 id="登录过程"><a href="#登录过程" class="headerlink" title="登录过程"></a>登录过程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: UNIX系统启动，操作系统的内核装入内存</span><br><span class="line">op1=&gt;operation: 用户登录，shell 程序装入内存</span><br><span class="line">op2=&gt;operation: init程序为系统的每一个终端端口激活getty程序</span><br><span class="line">op3=&gt;operation: getty程序在相应终端上显示login，并等待用户输入</span><br><span class="line">op4=&gt;operation: 若登录成功，进入shell程序</span><br><span class="line">op5=&gt;operation: 若用户退出程序，shell终止</span><br><span class="line">op6=&gt;operation: UNIX在终端启动一个新的getty程序并等待新用户登录</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line"></span><br><span class="line">st-&gt;op2-&gt;op3-&gt;op4-&gt;op1-&gt;op5-&gt;op6-&gt;e</span><br></pre></td></tr></table></figure>
<h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><ul>
<li>vi编辑器</li>
</ul>
<ul>
<li>编辑器<ol>
<li>行编辑器，如emacs，ex</li>
<li>全屏编辑器，如vi</li>
</ol>
</li>
<li>发展过程<code>ed-&gt;ex-&gt;vi</code>，其中<code>vi</code>由<code>ex</code>发展而来</li>
</ul>
<ul>
<li><code>vi</code>的两个版本<ol>
<li><code>view</code>编辑器</li>
<li><code>vedit</code>编辑器</li>
</ol>
</li>
<li><code>vi</code>的工作模式<ol>
<li>命令模式</li>
<li>文本输入模式</li>
</ol>
</li>
</ul>
<ul>
<li><p>缩写<code>ab</code></p>
<ol>
<li>缩写的指定是临时的，它们只是在当前编辑会话中有效</li>
</ol>
</li>
<li><p>宏<code>map</code></p>
<ol>
<li><code>map</code>给用户在命令模式下的捷径</li>
<li>供用户可用的键只有少数几个<code>K</code>,<code>q</code>,<code>V</code>,<code>[Ctrl-e]</code>,<code>[Ctrl-e]</code></li>
<li>宏的指定是临时的，它们只是在当前编辑会话中有效</li>
</ol>
</li>
<li><p>设置<code>.exrc</code></p>
<ol>
<li><p>欲设置编辑器环境启动有效，则将设置的环境写到<code>.exrc</code>中，其启动原理为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.用户打开vi编辑器</span><br><span class="line">2.vi根据当前工作目录的.exrc文件设置编辑环境(若无则查找用户主目录,否则为默认环境)</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>在<code>vi</code>编辑器中允许<code>UNIX Shell</code>命令，<code>: !</code>+<code>命令</code></p>
</li>
<li>行连接<code>J</code></li>
<li>搜索和替换</li>
</ul>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h2 id><a href="#" class="headerlink" title></a><img src="https://i.loli.net/2020/06/13/LPZjoiwgb6xflBc.jpg" alt="IMG_1308_20200613-122112_.PNG"></h2><p><img src="https://i.loli.net/2020/06/17/GHsQd38TivOm5EF.jpg" alt="IMG_1322_20200617-135032_.PNG"></p>
<h2 id="文本输入模式"><a href="#文本输入模式" class="headerlink" title="文本输入模式"></a>文本输入模式</h2><p><img src="https://i.loli.net/2020/06/13/L9tziUZ2d3e6OvB.jpg" alt="IMG_1309_20200613-122125_.PNG"></p>
<h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><ul>
<li>文件系统</li>
</ul>
<ul>
<li>分类<ol>
<li>规则文件</li>
<li>目录文件</li>
<li>特殊文件，即，设备</li>
</ol>
</li>
</ul>
<ul>
<li>一些奇怪的目录说法<ol>
<li>用户主目录</li>
<li>根目录，根目录用<code>/</code>命名</li>
<li>工作目录</li>
</ol>
</li>
<li>文件名<ol>
<li>最大长度取决于<code>UNIX</code>的版本和系统厂商</li>
<li>所有<code>UNIX</code>系统允许至少14个字符长的文件名，大多数可支持长达255个字符的长度</li>
<li>字母数字组合</li>
</ol>
</li>
<li>输出重定向</li>
<li>输入重定向</li>
<li></li>
</ul>
<p><img src="https://i.loli.net/2020/06/17/lhg1CDsJXaYrxAE.jpg" alt="IMG_1324_20200617-160425_.PNG"></p>
<p><img src="https://i.loli.net/2020/06/17/sLBHSoxr1wdjvPJ.jpg" alt="IMG_1326_20200617-164445_.PNG"></p>
<p><img src="https://i.loli.net/2020/06/17/Z3lVfoCUxOWAgea.jpg" alt="IMG_1327_20200617-164459_.PNG"></p>
<p><img src="https://i.loli.net/2020/06/17/hpovxurS5U7VTgY.jpg" alt="IMG_1328_20200617-164511_.PNG"></p>
<p><img src="https://i.loli.net/2020/06/17/sLBHSoxr1wdjvPJ.jpg" alt="IMG_1326_20200617-164445_.PNG"></p>
<h1 id="0x06-shell"><a href="#0x06-shell" class="headerlink" title="0x06 shell"></a>0x06 shell</h1><ul>
<li><p><code>UNIX</code>操作系统组成</p>
<ol>
<li>内核</li>
<li>应用</li>
</ol>
</li>
<li><p>用户与操作系统通过<code>shell</code>进行通信，而基于硬件的操作由内核完成。</p>
</li>
<li><p><code>shell</code>主要特征</p>
<ul>
<li>命令执行</li>
<li>文件名替换</li>
<li><code>I/O</code>重定向</li>
<li>管道</li>
<li>环境控制</li>
<li>后台计算</li>
<li><code>shell</code>脚本</li>
</ul>
</li>
<li><p>引用字符，用于消除元字符的特殊含义</p>
<ul>
<li>反斜杠<code>\</code></li>
<li>双引号<code>&quot; &quot;</code>：不可消除<code>$</code>，单引号，双引号，<code>!</code></li>
<li>单引号<code>&#39;&#39;</code>：不可消除单引号</li>
</ul>
</li>
<li><p><code>shell</code>变量</p>
<ul>
<li>环境变量，即标准变量</li>
<li>局部变量</li>
<li>若变量中有空格，需要使用引用字符</li>
<li>一些<code>shell</code>变量<ul>
<li><code>PATH</code>变量设置<code>shell</code>在定位命令时所查找的目录名</li>
<li><code>PS1</code>变量设置用户提示符字符串</li>
<li><code>PS2</code>变量设置用户尚未键入完整命令前安回车键的命令提示符</li>
<li><code>CDPATH</code>变量设置<code>cd</code>命令所查找的的目录</li>
<li><code>SHELL</code>变量设置用户登录<code>shell</code>的完整路径</li>
<li><code>TERM</code>变量设置用户终端类型</li>
<li><code>TZ</code>变量设置用户所在时区</li>
</ul>
</li>
</ul>
</li>
<li><p>更多的元字符</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  - `;`，可以键入多个命令用分号隔开</span><br><span class="line">  - `( )`，命令编组</span><br><span class="line">  - `&amp;`，后台计算，一个命令其后紧跟`&amp;`</span><br><span class="line"></span><br><span class="line">- 更多的`UNIX`系统工具</span><br><span class="line"></span><br><span class="line">  - 延时计时，`sleep`命令</span><br><span class="line"></span><br><span class="line">  - `ps`，显示PID</span><br><span class="line"></span><br><span class="line">  - `nohup`</span><br><span class="line"></span><br><span class="line">  - `kill`，终止一个进程，即向指定的线程发送一个信号</span><br><span class="line"></span><br><span class="line">  - `tee`，分离输出</span><br><span class="line"></span><br><span class="line">    - ep</span><br><span class="line"></span><br><span class="line">      ```shell</span><br><span class="line">      sort phone.list | tee phone.sort</span><br></pre></td></tr></table></figure>
<ul>
<li>解释：管道将<code>sort</code>命令的输出给tee，tee显示到终端和保存到<code>phone.sort</code></li>
</ul>
</li>
<li><p><code>grep</code>，文件搜索</p>
</li>
<li><p><code>sort</code>，文本文件排序，按行将指定文件内容排序。若有2行第一个字符相同，则比较第2个字符…以此类推</p>
</li>
<li><p><code>export</code>，将本<code>shell</code>变量可用于其子<code>shell</code></p>
</li>
<li><p><code>echo</code>，其中<code>-e</code>激活转义字符</p>
</li>
</ul>
</li>
<li><p>启动文件</p>
<ul>
<li><p>即用户在登录时，<code>shell</code>查看这2个特殊文件，并执行2个文件中的命令</p>
</li>
<li><p>系统策略<code>/etc/profile</code></p>
</li>
<li>用户策略，位于用户主目录的<code>.profile</code>文件</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/06/19/L125ze876EbmcHU.jpg" alt="IMG_1335_20200619-141526_.PNG"></p>
<p><a href="https://imgchr.com/i/NuzruQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/19/NuzruQ.md.jpg" alt="NuzruQ.md.jpg" style="zoom:200%;"></a></p>
<p><img src="https://i.loli.net/2020/06/19/NKCWV3UlqJ9H5FL.jpg" alt="IMG_1337_20200619-141552_.PNG" style="zoom:200%;"></p>
<h1 id="0x07-shell-编程"><a href="#0x07-shell-编程" class="headerlink" title="0x07 shell 编程"></a>0x07 shell 编程</h1><ul>
<li><p><code>shell</code>会忽略以<code>#</code>开头的行</p>
</li>
<li><p>执行脚本</p>
<ul>
<li>使用<code>sh</code>命令，即调用另外一个<code>shell</code>来读取文件，执行命令</li>
<li>将脚本:footprints:变成可执行文件，<code>chmod</code>命令</li>
</ul>
</li>
<li><p>转义字符</p>
</li>
<li><p>执行命令<code>.</code>，使用户在当前<code>shell</code>允许程序，而不创建新的子进程。</p>
</li>
<li><p>想使用的<code>PATH</code>长期有效，则将改变后的<code>PAHT</code>放到<code>.profile</code>中。</p>
</li>
<li><p>读取输入<code>read</code></p>
</li>
<li><p>命令行参数</p>
<ul>
<li><p>使用特殊<code>shell</code>位置变量</p>
<p><img src="https://i.loli.net/2020/06/19/btow6OkYhf9J31A.jpg" alt="IMG_1340_20200619-153021_.PNG"></p>
</li>
<li><p>赋值<code>set</code>命令</p>
<p><img src="https://i.loli.net/2020/06/19/oXHQe3Y2qIUz5FD.jpg" alt="IMG_1341_20200619-153444_.PNG"></p>
</li>
</ul>
</li>
<li><p><code>exit n</code>，终止程序，若没有提供退出值<code>n</code>，那么通常赋值最后一个命令的退出值</p>
<h2 id="条件与试验"><a href="#条件与试验" class="headerlink" title="条件与试验"></a>条件与试验</h2><ul>
<li><code>if-then</code>结构</li>
<li><code>[  ]</code>必须用<code>[]</code>方括号括起来，必须有空格包围</li>
<li><code>if-then-else</code></li>
<li><code>if-then-elif</code></li>
</ul>
</li>
<li><p><code>test</code>命令，若表达式为真，则<code>test</code>为0，否则返回非0</p>
</li>
<li><p>参数替换<code>{}</code>，即简单版的<code>if-else</code>结构</p>
</li>
<li><p>算术运算符<code>expr 1 + 2</code>，运算符与运算元素之间必须有空格</p>
<ul>
<li>单独使用会把最终答案输出到屏幕上</li>
<li>可以用于数字与字母的<code>ASCII</code>码的比较</li>
</ul>
</li>
<li><p>算术操作<code>let (ksh)</code></p>
<ul>
<li><code>let</code>自动使用变量的值，直接键入<code>x</code>不需要<code>$x</code></li>
<li><code>let</code>不需要<code>\</code>来消除<code>* %</code>的特殊含义</li>
</ul>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li><code>for-in-done</code>结构</li>
<li><code>while</code>结构</li>
<li><code>let</code>的命令缩写，下面版本仅适用于<code>ksh</code>，<code>(( ))</code></li>
</ul>
</li>
</ul>
<ul>
<li>调试<code>shell</code></li>
</ul>
<p><img src="https://s1.ax1x.com/2020/06/19/NK5EQ0.jpg" alt="NK5EQ0.jpg"><br><img src="https://s1.ax1x.com/2020/06/19/NK5kzq.jpg" alt="NK5kzq.jpg"></p>
<h1 id="0x08-磁盘"><a href="#0x08-磁盘" class="headerlink" title="0x08 磁盘"></a>0x08 磁盘</h1><ul>
<li>最大文件数目由以下决定<ul>
<li>未用存储空间大小</li>
<li>用于保存索引节点的存储空间大小</li>
</ul>
</li>
</ul>
<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><ul>
<li><p>字节，8位，适合存储字符</p>
</li>
<li><p>字，一种字节组合，在不同系统中字的大小不同</p>
</li>
<li><p><code>[Spacebar]</code>:一个空格</p>
</li>
<li><p><code>[Tab]</code>:8个空格</p>
</li>
<li><p><code>UNIX</code>中文件时字节序列</p>
</li>
<li><p><code>.</code>表示当前目录</p>
</li>
<li><p><code>..</code>表示父目录</p>
</li>
<li><p>显示当前<code>shell</code>的名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>:x</code>可以保存文件并退出vi编辑器</p>
</li>
<li><p>绝大多数<code>UNIX</code>命令是保存在磁盘上的程序，称之为系统工具。</p>
</li>
<li><p><code>shell</code>变量名可使用字母；数字；下划线，但第一个必须为字母</p>
</li>
<li><p>关于<code>KORN shell</code>的内容请参考<code>Page 165</code></p>
</li>
<li><p>将值存入变量时，等号两边不允许有空格</p>
</li>
<li><p><code>date</code></p>
<p><img src="https://i.loli.net/2020/06/19/kSIMnzYJcV8BRCw.jpg" alt="IMG_1342_20200619-161810_.PNG"></p>
</li>
<li><p><code>if [ ]</code>，<code>[ ]</code>与任何东西都需要有空格，包括<code>if</code></p>
</li>
</ul>
<p><a href="https://yanbin.blog/" target="_blank" rel="noopener">https://yanbin.blog/</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>OS教程</title>
    <url>/2020/03/31/%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/OS%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>1 <em>中断</em>，在程序运行过程中出现某种紧急事件，必须中止当前正在运行的程序，转去处理此事件，然后再恢复原来运行的程序。有$\begin{Bmatrix} 强迫性中断\ 自愿性中断\  \end {Bmatrix}$。</p>
<p>2 <em>中断系统</em>，中断装置+中断处理程序</p>
<p>3 <em>中断装置</em>，识别中断源$\Longrightarrow$ 保存现场$(运行的物理环境：地址寄存器，通用寄存器，浮点寄存器，SP，PSW，PC，文件表)\Longrightarrow $引出中断程序</p>
<p>1 进程互斥；进程同步；进程饥饿；进程死机；进程饿死</p>
<p>2 $吞吐量=\frac{任务数量}{处理时间}$</p>
<p>3 $PCB,process\  control\ block $，进程控制块，是标志进程存在的数据结构，其中包含系统对进程进行管理所需要的全部信息。</p>
<p>4 $TCB,thread\  control\ block$，线程控制块，是标志线程存在的数据结构，其中包含系统对线程进行管理所需要的全部信息。</p>
<p>5 $PSW,program\ status\ word$，程序状态字，表示当前程序的运行环境，状态</p>
<p>6 $JCB\ ,Job\ Control\ Block$，作业控制块，是标志作业存在的数据结构，其中包含系统对作业进行管理所需要的全部信息。</p>
<p>7 $PC$，指令计数。</p>
<p>8 $FCB,file\ control \ block$，文件控制块</p>
<p>1 $FCFS,first\ come\ first\ service $，先到先服务。</p>
<p>。。。</p>
<p><strong>程序并发执行的条件</strong></p>
<p>满足$Bernstein 条件$</p>
<p>$race\ condition,竞争条件，多个进程在访问变量时，因实际交叉次序不同而导致执行结果不同$</p>
<h1 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h1><h2 id="软件实现互斥"><a href="#软件实现互斥" class="headerlink" title="软件实现互斥"></a>软件实现互斥</h2><h3 id="Dekker"><a href="#Dekker" class="headerlink" title="Dekker"></a>Dekker</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数id为当前的线程号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dekker_Lock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	flag[id]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> id0=(id+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span>(flag[id0]==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(turn==id0)&#123;</span><br><span class="line">			flag[id]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(turn==id0)&#123;</span><br><span class="line">				;<span class="comment">//do nothing</span></span><br><span class="line">			&#125;</span><br><span class="line">			flag[id]=<span class="number">1</span>;<span class="comment">//为了防止其他进程进入临界区</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dekker_unLock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	turn=(id+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">	flag[id]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Peterson"><a href="#Peterson" class="headerlink" title="Peterson"></a>Peterson</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Peterson_Lock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	flag[id]=<span class="number">1</span>;</span><br><span class="line">	turn=(id+<span class="number">1</span>)%<span class="number">2</span>;<span class="comment">//让给对方，判断对方是否需要</span></span><br><span class="line">	<span class="keyword">while</span>(flag[<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;turn==(id+<span class="number">1</span>)%<span class="number">2</span>)	;<span class="comment">//do nothing</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Peterson_unLock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	flag[id]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Lamport"><a href="#Lamport" class="headerlink" title="Lamport"></a>Lamport</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_max</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> max_flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g_totalThreads;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(number[i]&gt;number[max_flag]) max_flag=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> max_flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">If_choose</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g_totalThreads;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(choosing[i]==<span class="number">1</span>)	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Lamport_Lock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	choosing[id]=<span class="number">1</span>;</span><br><span class="line">	number[id]=find_max()+<span class="number">1</span>;</span><br><span class="line">	choosing[id]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;g_totalThreads;j++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(If_choose()==<span class="literal">false</span>)	;</span><br><span class="line">		<span class="keyword">while</span>(number[j]!=<span class="number">0</span></span><br><span class="line">              &amp;&amp;(number[j]&lt;number[id]</span><br><span class="line">                 ||(number[j]==number[id]&amp;&amp;j&lt;id))) ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Lamport_unLock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	number[id]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Eisenberg-Mcguire"><a href="#Eisenberg-Mcguire" class="headerlink" title="Eisenberg_Mcguire"></a>Eisenberg_Mcguire</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eisenberg_Mcguire_Lock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line">		flag[id]=want_in;</span><br><span class="line">		j=turn;</span><br><span class="line">		<span class="keyword">while</span>(j!=id)&#123;</span><br><span class="line">			<span class="keyword">if</span>(flag[j]!=idle)&#123;</span><br><span class="line">				j=turn;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				j=(j+<span class="number">1</span>)%g_totalThreads;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		flag[id]=in_cs;</span><br><span class="line">		j=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((j&lt;g_totalThreads)&amp;&amp;(j==id||Flag[j]!=in_cs))&#123;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;<span class="comment">//判断所有其他进程是否in_cs</span></span><br><span class="line">	&#125;<span class="keyword">while</span> (j!=g_totalThreads);</span><br><span class="line">	turn=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eisenberg_Mcguire_unLock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j=(turn+<span class="number">1</span>)%g_totalThreads;</span><br><span class="line">	<span class="keyword">while</span>(flag[j]==idle)&#123;</span><br><span class="line">		j=(j+<span class="number">1</span>)%g_totalThreads;</span><br><span class="line">	&#125;</span><br><span class="line">	turn=j;</span><br><span class="line">	flag[id]=idle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$bus \ request\ protocol,总线请求协议$</p>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>$synchronization,同步$</p>
<p>$process\ cooperation,进程合作$</p>
<p>$cooperation\ process,合作进程$</p>
<p>$semaphore,信号量；PV$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    pointer_to_PCB <span class="built_in">queue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$primitive,原语，不可间断的程序$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P</span><span class="params">(semaphore *s)</span></span>&#123;</span><br><span class="line">    s-&gt;value--;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;value&lt;<span class="number">0</span>)</span><br><span class="line">        asleep(s-&gt;<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">V</span><span class="params">(semphore *s)</span></span>&#123;</span><br><span class="line">    s-&gt;value++;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;value&gt;=<span class="number">0</span>)</span><br><span class="line">        wakeup(s-&gt;<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$e.g$</p>
<ul>
<li>司机-售票员问题，同步</li>
<li>生产者-消费者问题，单资源管理</li>
<li>读者-写者问题，互斥同时提高并发性</li>
<li>吸烟者问题，多资源管理</li>
</ul>
<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="死锁的避免"><a href="#死锁的避免" class="headerlink" title="死锁的避免"></a>死锁的避免</h2><h3 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;<span class="comment">//进程总数</span></span><br><span class="line"><span class="keyword">int</span> m;<span class="comment">//资源类的总数</span></span><br><span class="line"><span class="keyword">int</span> Available[m];<span class="comment">//当前可用资源数，初始化为资源总量</span></span><br><span class="line"><span class="keyword">int</span> Claim[n,m];<span class="comment">//进程i最多需要j种资源的数量</span></span><br><span class="line"><span class="keyword">int</span> Allocation[n,m];<span class="comment">//进程i现在占有j种资源的数量，初始化为0</span></span><br><span class="line"><span class="keyword">int</span> Need[n,m];<span class="comment">//进程i还需要j种资源的数量，初始化为Claim[i][j]</span></span><br><span class="line"><span class="keyword">int</span> Request[n,m];<span class="comment">//进程i当前申请j种资源的数量</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//进程i发出资源申请</span></span><br><span class="line">	<span class="keyword">if</span>(Request[i]&gt;Need[i])	<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//大于尚需资源</span></span><br><span class="line">	<span class="keyword">if</span>(Request[i]&gt;Available[i])	<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//大于当前资源数</span></span><br><span class="line">	<span class="comment">//资源预分配</span></span><br><span class="line">	Available=Available-Request[i];</span><br><span class="line">	Allocation[i]=Allocation[i]+Request[i];</span><br><span class="line">	Need[i]=Need[i]-Request[i];</span><br><span class="line">	<span class="keyword">return</span> g();<span class="comment">//检测算法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">g</span><span class="params">()</span></span>&#123;<span class="comment">//判断是否会发生死锁状态</span></span><br><span class="line">	<span class="keyword">int</span> Work[m];</span><br><span class="line">	Work=Available;<span class="comment">//防止影响到原来的Availabe</span></span><br><span class="line">	<span class="keyword">bool</span> Finish[n]=<span class="literal">false</span>;<span class="comment">//有哪些已经完成了</span></span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">    	flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(Finish[i]==<span class="literal">false</span>&amp;&amp;Need[i]&lt;=Work[i])&#123;<span class="comment">//i可执行</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                注意再Shoshami和Coffman所提出的是</span></span><br><span class="line"><span class="comment">                Finish[i]==false&amp;&amp;Request[i]&lt;=Work[i]</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                Work=Work+Allocation[i];<span class="comment">//恢复资源</span></span><br><span class="line">        		Finish[i]=<span class="literal">true</span>;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Finish[i]==<span class="literal">false</span>)	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Shoshamin-amp-amp-Coffman的死锁检测算法"><a href="#Shoshamin-amp-amp-Coffman的死锁检测算法" class="headerlink" title="Shoshamin&amp;&amp;Coffman的死锁检测算法"></a>Shoshamin&amp;&amp;Coffman的死锁检测算法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Work[m]=Available;</span><br><span class="line">    <span class="keyword">bool</span> Finish[n]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">        flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Finish[i]==<span class="literal">false</span>&amp;&amp;Request[i]&lt;=Work)&#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                Finish=<span class="literal">true</span>;</span><br><span class="line">                Work=Work+Allocation[i];<span class="comment">//恢复</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Finish[i]==<span class="literal">false</span>)	<span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="主存储器管理"><a href="#主存储器管理" class="headerlink" title="主存储器管理"></a>主存储器管理</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h3><ul>
<li>静态分区</li>
<li>动态分区</li>
</ul>
<h3 id="内存区分配"><a href="#内存区分配" class="headerlink" title="内存区分配"></a>内存区分配</h3><ul>
<li>first fit，FF，最先适应</li>
<li>best fit，BF，最佳适应</li>
<li>worst fit，WF，最坏适应</li>
</ul>
<h2 id="页式存储"><a href="#页式存储" class="headerlink" title="页式存储"></a>页式存储</h2><ul>
<li>EAT,effective access time 内存的有效访问时间<script type="math/tex; mode=display">
EAT=快表命中率\cdot (快表访问时间+内存访问时间)+(1-快表命中率)\cdot (快表访问时间+2\cdot 内存访问时间)\\
其中，不命中时，访问页表计入内存访问一次</script></li>
</ul>
<h1 id="虚拟存储系统"><a href="#虚拟存储系统" class="headerlink" title="虚拟存储系统"></a>虚拟存储系统</h1><h2 id="外存储器管理技术"><a href="#外存储器管理技术" class="headerlink" title="外存储器管理技术"></a>外存储器管理技术</h2><h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><ul>
<li>平均分配</li>
<li>按进程程序长度分配</li>
<li>按进程优先级的比例分配</li>
<li>按进程长度和优先级的比例分配</li>
<li>ee</li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
  </entry>
  <entry>
    <title>计算机系统结构</title>
    <url>/2020/03/31/%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>1字节=1 byte=1 B</li>
<li>1KB=$1^{10}$B</li>
<li></li>
</ul>
<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p><em>系统结构，组成，实现</em></p>
<ol>
<li>计算机系统结构：计算机系统的软，硬件的界面。</li>
<li>计算机组成：计算机系统结构的逻辑实现。</li>
<li>计算机实现：计算机组成的物理实现</li>
</ol>
<p>换句话来说，我们设计计算机的时间轴为：$系统结构\longrightarrow 组成\longrightarrow 实现$</p>
<p>$t_{cpu}:$执行一段程序所用的CPU时间。</p>
<p>$IC:$该段程序的指令条数，取决于指令集<em>结构</em> 和编译技术。</p>
<p>$CPI,Cycle \ Per \ Instruction:$平均每一条指令所需要的时钟周期，取决于<em>组成</em>和指令集<em>结构</em></p>
<p>$T:$时钟周期，取决于<em>实现</em> 和<em>组成</em></p>
<h4 id="3-流水线"><a href="#3-流水线" class="headerlink" title="3 流水线"></a>3 流水线</h4><p><em>以静态，线性，顺序流水线为例</em></p>
<p>$吞吐率\ ThroughPut\ TP=\frac{n}{T_k}=\frac{任务数量}{运行时间}=\frac{n}{(k+n-1)\Delta t}$</p>
<p>$加速比\ Speedup\ S=\frac{T_s}{T_k}=\frac{顺序执行时间}{运行时间}=\frac{nk}{k+m-1}$</p>
<p>$效率\ Efficiency\ E=\frac{n\Delta t}{T_k}=\frac{设备实际使用时间}{运行时间*设备数目}=\frac{n}{k+n-1}$</p>
<p><strong>dependence 相关</strong>，<em>两条指令之间存在某种依赖关系</em></p>
<p><strong>真数据相关，data dependence</strong>，$①指令j使用指令i产生的结果;②指令j与指令k数据相关，指令k又与指令i数据相关$</p>
<p><strong>名相关，name dependence</strong>，如果两条指令使用相同的名，但是它们之间没有数据流动</p>
<p>$anti-dependence,反相关，指令j写的名与指令i读的名相同；\ output\ dependence,输出相关,指令j与指令i写的名相同。 $</p>
<p><strong>控制相关，control dependence </strong>，有分支指令引起的相关。</p>
<p><strong>流水线冲突 pipline hazards</strong>，<em>由于相关的存在，使得下一条指令不能再指定的时钟周期执行</em></p>
<p><strong>结构冲突</strong></p>
<p><strong>数据冲突</strong>，相关的指令靠得足够近。</p>
<p>$RAM,Read \ After \ Write ,写后读冲突，真数据相关$</p>
<p>$WAW,Write \ After \ Write ，写后写冲突，输出相关，在五段流水线(MIPS)中不会发生$</p>
<p>$WAR,Write \ After  \ Read,读后写冲突.反相关$</p>
<p>仅发生在这样的情况：有些指令的写操作被提前了，有些操作的读操作被滞后了，即指令被重新排序了,在五段流水线(MIPS)中不会发生</p>
<h4 id="4-指令级并行​"><a href="#4-指令级并行​" class="headerlink" title="4 指令级并行​"></a>4 指令级并行​</h4><script type="math/tex; mode=display">
ILP,Instruction-Level\ Parallelism,指令级并行\left\{    \begin{array}{lr}        基于硬件（代码执行中）的动态开发方法\\        基于软件（代码执行前）的静态开发方法            \end{array}\right.\\</script><p>$CPI<em>{实际流水线}=CPI</em>{理想}+停顿<em>{结构冲突}+停顿</em>{数据冲突}+停顿_{控制冲突}$</p>
<p>$IPC,Instructions \ Per\  Cycle,每个时钟周期完成的指令条数$</p>
<p>$CDB,Common\ Data \ Bus,公共数据总线$</p>
<p>$IS,Issue,流出阶段：指令译码，检查是否存在结构冲突。$</p>
<p>$RO,Read\ Operands,读操作数：检测数据冲突$</p>
<p>$BHT,Branch\ History\ Table\ ,Branch\ Predicition\ Buffer,分支历史表，分支预测缓冲器\是最简单的动态分支预测方法$</p>
<p>$BTB,Branch\ Target\ Buffer,分支目标缓冲器，也称分支目标Cache$</p>
<p>$branch\ folding,分支折叠$</p>
<p>$speculation,前瞻执行$</p>
<p>$ROB,ReOrder\ Buffer，再定序缓冲器，为了在猜错的情况下能够恢复现场$</p>
<p>$Tomasulo算法$</p>
<p>$基于硬件的前瞻算法，顺序流出，乱序执行，顺序确认$</p>
<h1 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h1><p><img src="计算机系统结构.assets/image-20200416180748349.png" alt="image-20200416180748349"></p>
<h2 id="局部性原理-principle-of-locality"><a href="#局部性原理-principle-of-locality" class="headerlink" title="局部性原理  principle of locality"></a>局部性原理  principle of locality</h2><ul>
<li>空间局部性：程序将要用到的信息很有可能于正在使用的信息相邻</li>
<li>时间局部性：程序将要用到的信息很可能就是现在正在使用的信息</li>
</ul>
<h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><h3 id="Cache命中：CPU能在缓存中访问到"><a href="#Cache命中：CPU能在缓存中访问到" class="headerlink" title="Cache命中：CPU能在缓存中访问到"></a>Cache命中：CPU能在缓存中访问到</h3><h3 id="存储层次的四个基本问题"><a href="#存储层次的四个基本问题" class="headerlink" title="存储层次的四个基本问题"></a>存储层次的四个基本问题</h3><ol>
<li>映像规则</li>
<li>查找算法</li>
<li>替换算法<ol>
<li>随机法</li>
<li>FIFO,First-In-First-Out 先入先出法</li>
<li>LRU,Least-Recently-Used 最近最少使用法</li>
</ol>
</li>
<li>写策略<ol>
<li>写直达</li>
<li>写回</li>
<li>按写分配</li>
<li>不按写分配</li>
</ol>
</li>
</ol>
<h3 id="映像规则"><a href="#映像规则" class="headerlink" title="映像规则"></a>映像规则</h3><ul>
<li>fully associative mapping 全相联映像</li>
<li>direct mapping 直接映像 $j=i\  mod M$</li>
<li>set associative n路组相联映像 n为每一组的块数</li>
</ul>
<h3 id="Cache性能分析"><a href="#Cache性能分析" class="headerlink" title="Cache性能分析"></a>Cache性能分析</h3><ul>
<li><p>平均访存时间=命中时间+不命中率*不命中开销</p>
</li>
<li><p>CPU时间=（CPU执行周期数+访存次数$<em>$不命中率$</em>$不命中开销）$*$时钟周期时间</p>
<h4 id="性能改进"><a href="#性能改进" class="headerlink" title="性能改进"></a>性能改进</h4><ol>
<li><p>降低不命中率</p>
<ul>
<li><p>减少强制性不命中—增加块的大小 ，<u>增加命中时间</u></p>
</li>
<li><p>减少容量不命中—增加Cache容量，<u>成本增加，命中时间增加，一般用于片外Cache</u></p>
</li>
<li><p>减少冲突不命中—提高相联度，<u>增加命中时间</u></p>
</li>
<li>伪相联组</li>
</ul>
<p><img src="计算机系统结构.assets/image-20200416205726717.png" alt="image-20200416205726717"></p>
</li>
<li><p>降低不命中开销</p>
<ul>
<li>让读不命中优先于写不命中</li>
<li>写缓冲合并</li>
<li>请求字处理技术</li>
<li>非阻塞Cache</li>
</ul>
</li>
<li><p>减少命中时间</p>
<ul>
<li>简单小Cache</li>
<li>虚拟Cache</li>
<li>Cache访问流水化</li>
<li><p>踪迹Cache</p>
</li>
<li><p>伪相联组</p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="并行主存系统"><a href="#并行主存系统" class="headerlink" title="并行主存系统"></a>并行主存系统</h2><ul>
<li>性能指标<ol>
<li>延迟，存储器的访问时间，启动一次存储器到完成该操作所需要的时间</li>
<li>带宽，单位时间内存储器存取的信息量</li>
</ol>
</li>
<li>普通存储器：单体单字宽存储器</li>
<li>并行主存：<ul>
<li>提高存储带宽</li>
<li>种类：单体多字存储器和多体交叉存储器</li>
</ul>
</li>
</ul>
<h3 id="单体m字"><a href="#单体m字" class="headerlink" title="单体m字"></a>单体m字</h3><ul>
<li>一个存储体，给一个地址，在一个存储周期，取m个CPU字</li>
<li>$B_M=m*\frac{W}{T_M}$，带宽为单体单字的m倍</li>
<li>主要用于主存与Cache</li>
</ul>
<h3 id="多体交叉存储器"><a href="#多体交叉存储器" class="headerlink" title="多体交叉存储器"></a>多体交叉存储器</h3><ul>
<li>高位交叉编址</li>
<li>低位交叉编址</li>
<li>提高带宽</li>
</ul>
<h1 id="输入-输出系统"><a href="#输入-输出系统" class="headerlink" title="输入/输出系统"></a>输入/输出系统</h1><p>$MTTF,Mean\ Time\ To\ Failure,平均失效前时间$</p>
<p>$MTTR,Mean\ Time\ To \ Repair，平均修复时间$</p>
<p>$MTBF=MTTF+MTTR,Mean\ Time\ Between\ Failure,平均失效间隔时间$</p>
<p>$reliability,可靠性$</p>
<script type="math/tex; mode=display">
衡量标准：MTTF,其中失效率=\frac{1}{MTTF}</script><p>$availability,可用性$</p>
<script type="math/tex; mode=display">
可用性=\frac{MTTF}{MTTR+MTTF}</script><p>$dependability,可信性，不可度量$</p>
<p>提高系统组成部件可靠性的方法：$valid\ construction,有效构建方法；error\ correction,纠错方法$</p>
<p><a href="[https://baike.baidu.com/item/%E6%80%BB%E7%BA%BF%E4%BB%B2%E8%A3%81/10538148?fr=aladdin](https://baike.baidu.com/item/总线仲裁/10538148?fr=aladdin">仲裁</a>)</p>
<p><a href="[https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/7716839?fr=aladdin](https://baike.baidu.com/item/程序查询方式/7716839?fr=aladdin">程序查询方式</a>)</p>
<h3 id="通道流量分析"><a href="#通道流量分析" class="headerlink" title="通道流量分析"></a>通道流量分析</h3><ul>
<li>$T_S,设备选择时间$</li>
<li>$T_D,传送一个字节所用的时间$</li>
<li>$p:在一个通道上连接的设备数目，且这些设备都同时在工作$</li>
<li>$n:每台设备传送的字节数$</li>
<li>$k:数组多路通道传输一个数据块中包含的字节数。一般情况下，k&lt;n$</li>
<li>$T:通道完成全部数据传送工作所需要的时间$</li>
</ul>
<h5 id="EG"><a href="#EG" class="headerlink" title="EG"></a>EG</h5><p>$e.g.1$</p>
<p><img src="https://i.loli.net/2020/04/08/7rioSuvb5ew9sGK.png" alt="image-20200308150608490.png"></p>
<p>解</p>
<p>不妨设加速比为S</p>
<p>那么有</p>
<script type="math/tex; mode=display">
S=\frac {time_前}{time_后}=\frac{11.1\%*2+33.3\%*20+38.9\%*10+16.7\%*4}{11.1\%*1+33.3\%*15+38.9\%*3+16.7\%*1}=\frac{11.44}{6.44}=1.77</script><p>$e.g.2$</p>
<p>考虑条件分支指令的两种不同设计方法：<br>（1）CPUA：通过比较指令设置条件码，然后测试条件码进行分支。<br>（2）CPUB：在分支指令中包括比较过程。<br>在这两种CPU中，条件分支指令都占用2个时钟周期，而所有其他指令占用1个时钟周期。对于CPUA，执行的指令中分支指令占20%；由于每条分支指令之前都需要有比较指令，因此比较指令也占20%。不妨假设其他指令条数相同。由于CPUA在分支时不需要比较，因此CPUB的时钟周期时间是CPUA的1.25倍。问：<strong>哪一个CPU更快</strong>？如果CPUB的时钟周期时间只是CPUA的1.1倍，哪一个CPU更快呢？</p>
<p>$t_{cpu}=IC<em>CPI</em>T$</p>
<p>那么有</p>
<script type="math/tex; mode=display">
t_{cpuA}=IC*(0.4*2+0.6*1)*T \\
t_{cpuB}=IC*(2/8*2+6/8*1)*1.25T</script><p>最后即可得答案。</p>
]]></content>
      <categories>
        <category>计算机系统结构</category>
      </categories>
  </entry>
  <entry>
    <title>state machine&amp;Euclidean Alg</title>
    <url>/2020/03/21/%20MachineLearning/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%AC4%E8%AE%B2/</url>
    <content><![CDATA[<p><em>state machine</em></p>
<p><a href="https://leetcode-cn.com/problems/water-and-jug-problem/" target="_blank" rel="noopener">水壶问题</a></p>
<p>有两个容量分别为 <em>x</em>升 和 <em>y</em>升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 <em>z</em>升 的水？</p>
<p>如果可以，最后请用以上水壶中的一或两个来盛放取得的 <em>z升</em> 水。</p>
<p>你允许：</p>
<ul>
<li>装满任意一个水壶</li>
<li>清空任意一个水壶</li>
<li>从一个水壶向另外一个水壶倒水，直到装满或者倒空</li>
</ul>
<p><strong>示例 1:</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: x = 3, y = 5, z = 4</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: x = 2, y = 6, z = 5</span><br><span class="line">输出: False</span><br></pre></td></tr></table></figure>
<p>我们不妨将每一次两个水壶中所拥有的水的体积作为该时刻的状态。</p>
<p><strong>状态表示</strong>为$P(n)=(a,b)$。</p>
<p>其中，$a$表示容量为$x$升的水壶所有的水，$b$表示容量为$y$升的水壶所有的水。</p>
<p><strong>状态转移</strong>有装满一个水壶；清空一个水壶；从一个水壶向另外一个水壶倒水，知道装满或者倒空。</p>
<p><strong>最终状态</strong>必然有$a_0+b_0=z$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结论：ans=GCD(x,y)|z</span><br></pre></td></tr></table></figure>
<p>容易推理出若$m|a_0,m|b_0,则有m|z$</p>
<p>那么我们需要寻找这样的状态$(a_0,b_0)$</p>
<script type="math/tex; mode=display">
证明：m|x且m|y\Longrightarrow m|a且m|b</script><p>不妨设$m|x且m|y$。</p>
<p>显然$P(0)=(0,0),任意m|0符合(1)式$</p>
<p>设$P(n)=(a,b),m|a且m|b$</p>
<p>证明$P(n+1)=(a_1,b_1),m|a_1,m|b_1$</p>
<p>根据状态转移有</p>
<script type="math/tex; mode=display">
P(n+1)=\left\{
\begin{array}{lr}
(a,0)\\
(0,b)\\
(x,b)\\
(a,y)\\
(a-(y-b),y)\\
(0,a+b)\\
(x,b-(x-a))\\
(a+b,0)\\
\end{array}
\right.</script><p>只证$(2)式$的每一个数字都能被$m$整除，答案是显然的。</p>
<p>那么我们就可以得到最终的状态$(a_0,b_0)必然有m|a_0,m|b_0,那么有m|z$。</p>
<p>为了保证每一个$m$的取值都能满足以上推论。</p>
<p>必然需要满足$GCD(x,y)|z$</p>
<p>所以有$z\%GCD(x,y)==0$</p>
<p><em>Euclidean Alg</em></p>
<script type="math/tex; mode=display">
GCD(a,b)=GCD(Remainder(b,a),a)\\
其中，Remainder(b,a)=b-q*a=b\%a\geq0\ \ \ \ \ a,b,q均为正整数</script><p>证明$m|a且m|b\Longrightarrow m|Remainder(b,a)且m|a$</p>
<p>答案是显然的。</p>
<p>现只需证明$m|Remainder(b,a) 且m|a\Longrightarrow  m|b$</p>
<script type="math/tex; mode=display">
已知b-qa=k_1m,a=k_2m\\
有b=(k_1+k_2q)m\\
有m|b</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GCD</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">0</span>||b==<span class="number">0</span>)  <span class="keyword">return</span> max(a,b);</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="keyword">while</span>(b%a!=<span class="number">0</span>)&#123;</span><br><span class="line">            c=b%a;</span><br><span class="line">            b=a;</span><br><span class="line">            a=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canMeasureWater</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">0</span>)    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(z&gt;x+y)<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">int</span> m=GCD(x,y);</span><br><span class="line">        <span class="keyword">if</span>(z%m==<span class="number">0</span>)  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>离散数学</category>
      </categories>
  </entry>
  <entry>
    <title>算法设计与分析</title>
    <url>/2020/02/13/%20%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E5%8F%8A%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>证明$f(n)=O(g(n))$，有</p>
<script type="math/tex; mode=display">
\exists c,n_0,对于\forall n\geq n_0 有 f(n)\leq c*g(n)</script><p>即$g(n)$时$f(n)$的渐近上限。</p>
<p>证明$f(n)=\Omega (g(n))$，有</p>
<script type="math/tex; mode=display">
\exists c,n_0,对于\forall n\geq n_0 有 f(n)\geq c*g(n)</script><p>即$g(n)$时$f(n)$的渐近下限。</p>
<p>若同时满足$(1),(2)$</p>
<p>则有</p>
<script type="math/tex; mode=display">
f(n)=\Theta (g(n)),且g(n)=\theta (f(n))</script><h3 id="3-贪心方法"><a href="#3-贪心方法" class="headerlink" title="3 贪心方法"></a>3 贪心方法</h3><h4 id="1-一般方法"><a href="#1-一般方法" class="headerlink" title="1 一般方法"></a>1 一般方法</h4><script type="math/tex; mode=display">
n个输入,可行解为n个输入的子集\\
约束条件\Longrightarrow 可行解 根据目标函数\Longrightarrow最优解</script><h4 id="核心：选取能产生最优解的量度标准"><a href="#核心：选取能产生最优解的量度标准" class="headerlink" title="核心：选取能产生最优解的量度标准"></a>核心：选取能产生最优解的量度标准</h4><h4 id="2背包"><a href="#2背包" class="headerlink" title="2背包"></a>2背包</h4><p><strong>定理5.1</strong></p>
<ul>
<li>如果$p_1 /w_1 ≥ p_2 /w_2 ≥ … ≥ p_n /w_n $，则算法<br>GREEDY-KNAPSACK 对于给定的背包问题实例<br>生成一个最优解。</li>
</ul>
<p><strong>证明</strong></p>
<p>​    设$X=(x_1,…,x_n)$是算法生成的解</p>
<p>1.若所有的$x_i$=1,显然这个解就是最优解。</p>
<p>2.否则，设j是使得$x_j!=1$的最小下标，那么由算法可知</p>
<ul>
<li>对于$1\leq i&lt;j$，$x_i=1$</li>
<li>对于$j&lt;i\leq n$，$x_i=0$</li>
<li>对于$i=j$，$0\leq x_i&lt;1$</li>
</ul>
<p>3.若$X$不是最优解，那么必然存在一个最优解$Y=(y_1…y_n),使得\sum p_i y_i&gt;\sum p_ix_i,那么必然有\sum w_iy_i=M$</p>
<p>设$k$是使得$y_k!=x_k$的最小下标，这样的$k$必然存在</p>
<ul>
<li>$k&lt;j$时，由于$x_k=1$,必然有$y_k&lt; x_k$</li>
<li>$k=j$时，若$y_k&gt;x_k$，那么必然有$\sum w_i y_i&gt;M$，矛盾，故必然有$y_k&lt;x_k$</li>
<li>$k&gt;j$时，若$y_k&gt;x_k$，那么必然有$\sum w_i y_i&gt;M$，矛盾，故必然有$y_k&lt;x_k$</li>
</ul>
<p>故有$y_k&lt;x_k$。</p>
<p>4.现在使得$y<em>k=x_k$,那么其代价为$y</em>{k+1},…y_n$必须减去同样多的重量，使得总容量为$M$,那么导致了新解$Z$。<br>有</p>
<script type="math/tex; mode=display">
\sum _{k<i\leq n}w_i(y_i-z_i)=w_k(z_k-y_k)</script><p>5.那么有</p>
<script type="math/tex; mode=display">
\sum _{1\leq i\leq n}p_iz_i=\sum _{1\leq i \leq n}p_iy_i+(z_k-y_k)p_k-\sum _{k< i\leq n}p_i(y_i-z_i)
\geq \sum _{1\leq i\leq n}p_iy_i</script><p>6.那么必然有</p>
<script type="math/tex; mode=display">
\sum _{1\leq i\leq n}p_iz_i=
\sum _{1\leq i\leq n}p_iy_i</script><ul>
<li><p>若此时</p>
<script type="math/tex; mode=display">
\sum _{1\leq i\leq n}p_iz_i=
\sum _{1\leq i\leq n}p_ix_i\\
则证毕</script></li>
<li><p>否则，重复上面讨论，必然最终得到</p>
<script type="math/tex; mode=display">
\sum _{1\leq i\leq n}p_iz_i=
\sum _{1\leq i\leq n}p_ix_i\\</script></li>
</ul>
<p>证毕</p>
<p><strong>定理5.2</strong>，设$I为最优解，J为贪心解$<br>1.证明$I,J$是互不包含的关系</p>
<ul>
<li>若$I=J$，则证毕</li>
<li>若$I\subset J$，与$I$为最优解矛盾</li>
<li>若$J\subset I$，那么必然存在$b\in I且b\notin J$，设$J^{’}\subset J$，因为$I$是可行解，那么根据算法，当$J^{‘}考虑到b时，此时J^{‘}\cup {b}$必然也是可行解，与算法矛盾，那么证明其不成立完毕。</li>
</ul>
<p>2.证明$I=J$，设$I!=J$</p>
<ul>
<li>设有$A={a|a\in J且a\notin I},B={b|b\in I且b\notin J}，P_a=max{P_i|i\in A},P_b=max{P_i|i\in B}$，证明$P_a\geq P_b$: 若$P_b&gt;P_a$,那么当$J^{‘}考虑到b时，此时J^{‘}\cup {b}必然时可行解$，与算法矛盾。</li>
</ul>
<p>证毕</p>
<p><strong>定理5.3</strong></p>
<ul>
<li>若$\delta $可行，那么$J$必然存在$\delta$这样的排列可行，必要性证毕</li>
<li>现在证明充分性，若$J$可行，证明$\delta可行$，若$J$可行，必然有$a 为可行解$，现在证明$\delta$时可行解。设$\delta=i_1,i_2,…i_k;a=r_1,r_2,…r_k$令$a是使得r_a!=i_a$的最小下标，必然有$r_b=i_a$,显然$b&gt;a$,那么在$a$中将$r_a与r_b$互换，，这样的互换不违反期限。通过不断的互换，可以得到$\delta$</li>
</ul>
<p>证毕</p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><ul>
<li>多阶段过程</li>
<li>满足最优性原理</li>
<li>建立递推关系式</li>
</ul>
<h1 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h1><ul>
<li>DFS<ul>
<li>搜索结构</li>
<li>界限函数</li>
</ul>
</li>
<li>BFS</li>
<li>D-检索方法</li>
</ul>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
  </entry>
  <entry>
    <title>Warshall&amp;All_componet</title>
    <url>/2019/11/18/%20Algorithm/Warshall/</url>
    <content><![CDATA[<h5 id="Warshall-amp-All-componet"><a href="#Warshall-amp-All-componet" class="headerlink" title="Warshall &amp; All_componet"></a>Warshall &amp; All_componet</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> VerAdj;</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">    Edge*link;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> VerName;</span><br><span class="line">    Edge*adjacent;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> VerName;</span><br><span class="line">    node*link;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> graphsize;</span><br><span class="line"><span class="keyword">int</span> edgesize;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1e2</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(Vertex S[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;graphsize,&amp;edgesize);</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">int</span> from,to,cost;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[i].adjacent=<span class="literal">NULL</span>;</span><br><span class="line">        S[i].VerName=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=edgesize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        Edge*p=<span class="keyword">new</span> Edge;</span><br><span class="line">        p-&gt;cost=<span class="number">0</span>;</span><br><span class="line">        p-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;VerAdj=to;</span><br><span class="line">        Edge*q=S[from].adjacent;</span><br><span class="line">        <span class="keyword">if</span>(q==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            S[from].adjacent=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(q-&gt;VerAdj&gt;=p-&gt;VerAdj)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(q-&gt;VerAdj&gt;p-&gt;VerAdj)</span><br><span class="line">                &#123;</span><br><span class="line">                    p-&gt;link=q;</span><br><span class="line">                    S[from].adjacent=p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(q-&gt;cost&gt;p-&gt;cost)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">delete</span> q;</span><br><span class="line">                        S[from].adjacent=p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">delete</span> p;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(q-&gt;link!=<span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(q-&gt;link-&gt;VerAdj&gt;=p-&gt;VerAdj)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q=q-&gt;link;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(q-&gt;link==<span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    p-&gt;link=q-&gt;link;</span><br><span class="line">                    q-&gt;link=p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(q-&gt;link-&gt;VerAdj==p-&gt;VerAdj)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(q-&gt;link-&gt;cost&gt;p-&gt;cost)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Edge*q0=q-&gt;link;</span><br><span class="line">                            p-&gt;link=q0-&gt;link;</span><br><span class="line">                            q-&gt;link=p;</span><br><span class="line">                            <span class="keyword">delete</span> q0;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">delete</span> p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        p-&gt;link=q-&gt;link;</span><br><span class="line">                        q-&gt;link=p;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Warshall</span><span class="params">(Vertex S[],<span class="keyword">int</span> WSM[MAX][MAX])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    Edge*p;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)</span><br><span class="line">                WSM[i][j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                WSM[i][j]=<span class="number">0</span>;</span><br><span class="line">                WSM[j][i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=S[i].adjacent;</span><br><span class="line">        a=S[i].VerName;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            WSM[a][p-&gt;VerAdj]=<span class="number">1</span>;</span><br><span class="line">            p=p-&gt;link;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;graphsize;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(WSM[i][k]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    WSM[i][j]=(WSM[i][j])||(WSM[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">All_componet</span><span class="params">(Vertex S[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> WSM[MAX][MAX];</span><br><span class="line">    <span class="keyword">int</span> markedList[MAX];</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">        markedList[i]=<span class="number">0</span>;</span><br><span class="line">    Warshall(S,WSM);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;graphsize;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(markedList[v]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            markedList[v]=<span class="number">1</span>;</span><br><span class="line">            node*scList=<span class="keyword">new</span> node;</span><br><span class="line">            scList-&gt;VerName=v;</span><br><span class="line">            scList-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">            node*q=scList;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=v&amp;&amp;WSM[v][i]==<span class="number">1</span>&amp;&amp;WSM[i][v]==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    markedList[i]=<span class="number">1</span>;</span><br><span class="line">                    node*p=<span class="keyword">new</span> node;</span><br><span class="line">                    p-&gt;VerName=i;</span><br><span class="line">                    p-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">                    q-&gt;link=p;</span><br><span class="line">                    q=q-&gt;link;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"t:%d\n"</span>,t);</span><br><span class="line">            t=t+<span class="number">1</span>;</span><br><span class="line">            q=scList;</span><br><span class="line">            node*q0;</span><br><span class="line">            <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,q-&gt;VerName);</span><br><span class="line">                q0=q;</span><br><span class="line">                q=q-&gt;link;</span><br><span class="line">                <span class="keyword">delete</span> q0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 7</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">0 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vertex S[MAX];</span><br><span class="line">    Init(S);</span><br><span class="line">    All_componet(S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Prim</title>
    <url>/2019/11/13/%20Algorithm/Prim/</url>
    <content><![CDATA[<h5 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1e6</span>;</span><br><span class="line">edge E[MAX];</span><br><span class="line">edge TE[MAX];</span><br><span class="line"><span class="keyword">int</span> graphsize;</span><br><span class="line"><span class="keyword">int</span> edgesize;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LV</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Lowcost;</span><br><span class="line">    <span class="keyword">int</span> Vex;</span><br><span class="line">&#125;;</span><br><span class="line">LV closedge[MAX];</span><br><span class="line"><span class="keyword">int</span> Edge[<span class="number">5010</span>][<span class="number">5010</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//稠密图，使用邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;graphsize,&amp;edgesize);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Edge[i][j]=<span class="number">1e9</span>;</span><br><span class="line">            Edge[j][i]=<span class="number">1e9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;edgesize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;E[i].head,&amp;E[i].tail,&amp;E[i].cost);</span><br><span class="line">        <span class="comment">//防止重边</span></span><br><span class="line">        <span class="keyword">if</span>(E[i].cost&lt;Edge[E[i].head<span class="number">-1</span>][E[i].tail<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Edge[E[i].head<span class="number">-1</span>][E[i].tail<span class="number">-1</span>]=E[i].cost;</span><br><span class="line">        Edge[E[i].tail<span class="number">-1</span>][E[i].head<span class="number">-1</span>]=E[i].cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        closedge[i].Lowcost=Edge[<span class="number">0</span>][i];</span><br><span class="line">        closedge[i].Vex=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    closedge[<span class="number">0</span>].Vex=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;graphsize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Min=<span class="number">1e9</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> v=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(closedge[j].Vex!=<span class="number">-1</span>&amp;&amp;closedge[j].Lowcost&lt;Min)</span><br><span class="line">            &#123;</span><br><span class="line">                v=j;</span><br><span class="line">                Min=closedge[j].Lowcost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=ans+closedge[v].Lowcost;</span><br><span class="line">            TE[count].head=closedge[v].Vex;</span><br><span class="line">            TE[count].tail=v;</span><br><span class="line">            TE[count].cost=closedge[v].Lowcost;</span><br><span class="line">            count++;</span><br><span class="line">            closedge[v].Lowcost=<span class="number">0</span>;</span><br><span class="line">            closedge[v].Vex=<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">//进行一些操作使得它们保持最小</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;graphsize;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(closedge[j].Vex!=<span class="number">-1</span>&amp;&amp;Edge[v][j]&lt;closedge[j].Lowcost)</span><br><span class="line">                &#123;</span><br><span class="line">                    closedge[j].Lowcost=Edge[v][j];</span><br><span class="line">                    closedge[j].Vex=v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//prim</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 10</span></span><br><span class="line"><span class="comment">0 1 1</span></span><br><span class="line"><span class="comment">0 2 4</span></span><br><span class="line"><span class="comment">0 3 7</span></span><br><span class="line"><span class="comment">1 2 4</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">1 5 2</span></span><br><span class="line"><span class="comment">2 5 5</span></span><br><span class="line"><span class="comment">2 4 3</span></span><br><span class="line"><span class="comment">3 4 6</span></span><br><span class="line"><span class="comment">4 5 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Prim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Kmeans</title>
    <url>/2019/11/13/%20MachineLearning/Kmeans/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#基于聚类算法(kmeans)的图像分割</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">导入所需要的模块：</span></span><br><span class="line"><span class="string">1.用于处理二维矩阵的数学库</span></span><br><span class="line"><span class="string">2.随机生成数的模块</span></span><br><span class="line"><span class="string">3.用于将图片(JPG)转换为矩阵以及把矩阵转换为图片(JPG)的模块</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 导入数据，file_path是图像的存储位置</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    f = open(file_path, <span class="string">"rb"</span>)  <span class="comment"># 以二进制的方式打开图像文件</span></span><br><span class="line">    data = []</span><br><span class="line">    im = Image.open(f)  <span class="comment"># 导入图片</span></span><br><span class="line">    m, n = im.size  <span class="comment"># 得到图片的大小</span></span><br><span class="line">    <span class="keyword">print</span> (m), (n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            tmp = []</span><br><span class="line">            x, y, z = im.getpixel((i, j))</span><br><span class="line">            tmp.append(x / <span class="number">256.0</span>)</span><br><span class="line">            tmp.append(y / <span class="number">256.0</span>)</span><br><span class="line">            tmp.append(z / <span class="number">256.0</span>)</span><br><span class="line">            data.append(tmp)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> np.mat(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(vecA, vecB)</span>:</span></span><br><span class="line">    <span class="string">'''计算vecA与vecB之间的欧式距离的平方</span></span><br><span class="line"><span class="string">    input:  vecA(mat)A点坐标</span></span><br><span class="line"><span class="string">        vecB(mat)B点坐标</span></span><br><span class="line"><span class="string">    output: dist[0, 0](float)A点与B点距离的平方</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    dist = (vecA - vecB) * (vecA - vecB).T</span><br><span class="line">    <span class="keyword">return</span> dist[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randCent</span><span class="params">(data, k)</span>:</span></span><br><span class="line">    <span class="string">'''随机初始化聚类中心</span></span><br><span class="line"><span class="string">    input:  data(mat):训练数据</span></span><br><span class="line"><span class="string">        k(int):类别个数</span></span><br><span class="line"><span class="string">    output: centroids(mat):聚类中心</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    n = np.shape(data)[<span class="number">1</span>]  <span class="comment"># 属性的个数</span></span><br><span class="line">    centroids = np.mat(np.zeros((k, n)))  <span class="comment"># 初始化k个聚类中心</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):  <span class="comment"># 初始化聚类中心每一维的坐标</span></span><br><span class="line">        minJ = np.min(data[:, j])</span><br><span class="line">        rangeJ = np.max(data[:, j]) - minJ</span><br><span class="line">        <span class="comment"># 在最大值和最小值之间随机初始化</span></span><br><span class="line">        centroids[:, j] = minJ * np.mat(np.ones((k , <span class="number">1</span>))) + np.random.rand(k, <span class="number">1</span>) * rangeJ</span><br><span class="line">    <span class="keyword">return</span> centroids</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmeans</span><span class="params">(data, k, centroids)</span>:</span></span><br><span class="line">    <span class="string">'''根据KMeans算法求解聚类中心</span></span><br><span class="line"><span class="string">    input:  data(mat):训练数据</span></span><br><span class="line"><span class="string">        k(int):类别个数</span></span><br><span class="line"><span class="string">        centroids(mat):随机初始化的聚类中心</span></span><br><span class="line"><span class="string">    output: centroids(mat):训练完成的聚类中心</span></span><br><span class="line"><span class="string">        subCenter(mat):每一个样本所属的类别</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m, n = np.shape(data)  <span class="comment"># m：样本的个数，n：特征的维度</span></span><br><span class="line">    subCenter = np.mat(np.zeros((m, <span class="number">2</span>)))  <span class="comment"># 初始化每一个样本所属的类别</span></span><br><span class="line">    change = <span class="literal">True</span>  <span class="comment"># 判断是否需要重新计算聚类中心</span></span><br><span class="line">    <span class="keyword">while</span> change == <span class="literal">True</span>:</span><br><span class="line">        change = <span class="literal">False</span>  <span class="comment"># 重置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            minDist = np.inf  <span class="comment"># 设置样本与聚类中心之间的最小的距离，初始值为争取穷</span></span><br><span class="line">            minIndex = <span class="number">0</span>  <span class="comment"># 所属的类别</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k):</span><br><span class="line">                <span class="comment"># 计算i和每个聚类中心之间的距离</span></span><br><span class="line">                dist = distance(data[i, ], centroids[j, ])</span><br><span class="line">                <span class="keyword">if</span> dist &lt; minDist:</span><br><span class="line">                    minDist = dist</span><br><span class="line">                    minIndex = j</span><br><span class="line">            <span class="comment"># 判断是否需要改变</span></span><br><span class="line">            <span class="keyword">if</span> subCenter[i, <span class="number">0</span>] != minIndex:  <span class="comment"># 需要改变</span></span><br><span class="line">                change = <span class="literal">True</span></span><br><span class="line">                subCenter[i, ] = np.mat([minIndex, minDist])</span><br><span class="line">        <span class="comment"># 重新计算聚类中心</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(k):</span><br><span class="line">            sum_all = np.mat(np.zeros((<span class="number">1</span>, n)))</span><br><span class="line">            r = <span class="number">0</span>  <span class="comment"># 每个类别中的样本的个数</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> subCenter[i, <span class="number">0</span>] == j:  <span class="comment"># 计算第j个类别</span></span><br><span class="line">                    sum_all += data[i, ]</span><br><span class="line">                    r += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    centroids[j, z] = sum_all[<span class="number">0</span>, z] / r</span><br><span class="line">                    <span class="keyword">print</span> (r)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">print</span> (<span class="string">" r is zero"</span>)</span><br><span class="line">    <span class="keyword">return</span> subCenter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_result</span><span class="params">(file_name, source)</span>:</span></span><br><span class="line">    <span class="string">'''保存source中的结果到file_name文件中</span></span><br><span class="line"><span class="string">    input:  file_name(string):文件名</span></span><br><span class="line"><span class="string">        source(mat):需要保存的数据</span></span><br><span class="line"><span class="string">    output:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m, n = np.shape(source)</span><br><span class="line">    f = open(file_name, <span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            tmp.append(str(source[i, j]))</span><br><span class="line">        f.write(<span class="string">"\t"</span>.join(tmp) + <span class="string">"\n"</span>)</span><br><span class="line">    f.close()</span><br><span class="line"><span class="comment"># --------------------------------------------------</span></span><br><span class="line">FLOAT_MAX = <span class="number">1e100</span>  <span class="comment"># 设置一个较大的值作为初始化的最小的距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nearest</span><span class="params">(point, cluster_centers)</span>:</span></span><br><span class="line">    <span class="string">'''计算point和cluster_centers之间的最小距离</span></span><br><span class="line"><span class="string">    input:  point(mat):当前的样本点</span></span><br><span class="line"><span class="string">        cluster_centers(mat):当前已经初始化的聚类中心</span></span><br><span class="line"><span class="string">    output: min_dist(float):点point和当前的聚类中心之间的最短距离</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    min_dist = FLOAT_MAX</span><br><span class="line">    m = np.shape(cluster_centers)[<span class="number">0</span>]  <span class="comment"># 当前已经初始化的聚类中心的个数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="comment"># 计算point与每个聚类中心之间的距离</span></span><br><span class="line">        d = distance(point, cluster_centers[i, ])</span><br><span class="line">        <span class="comment"># 选择最短距离</span></span><br><span class="line">        <span class="keyword">if</span> min_dist &gt; d:</span><br><span class="line">            min_dist = d</span><br><span class="line">    <span class="keyword">return</span> min_dist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_centroids</span><span class="params">(points, k)</span>:</span></span><br><span class="line">    <span class="string">'''KMeans++的初始化聚类中心的方法</span></span><br><span class="line"><span class="string">    input:  points(mat):样本</span></span><br><span class="line"><span class="string">        k(int):聚类中心的个数</span></span><br><span class="line"><span class="string">    output: cluster_centers(mat):初始化后的聚类中心</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    m, n = np.shape(points)</span><br><span class="line">    cluster_centers = np.mat(np.zeros((k , n)))</span><br><span class="line">    <span class="comment"># 1、随机选择一个样本点为第一个聚类中心</span></span><br><span class="line">    index = np.random.randint(<span class="number">0</span>, m)</span><br><span class="line">    cluster_centers[<span class="number">0</span>, ] = np.copy(points[index, ])</span><br><span class="line">    <span class="comment"># 2、初始化一个距离的序列</span></span><br><span class="line">    d = [<span class="number">0.0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t初始化一个距离序列"</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">" k="</span>,k)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k):</span><br><span class="line">        print(i)</span><br><span class="line">        sum_all = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="comment"># 3、对每一个样本找到最近的聚类中心点</span></span><br><span class="line">            d[j] = nearest(points[j, ], cluster_centers[<span class="number">0</span>:i, ])</span><br><span class="line">            <span class="comment"># 4、将所有的最短距离相加</span></span><br><span class="line">            sum_all += d[j]</span><br><span class="line">        <span class="comment"># 5、取得sum_all之间的随机值</span></span><br><span class="line">        sum_all *= random()</span><br><span class="line">        <span class="comment"># 6、获得距离最远的样本点作为聚类中心点</span></span><br><span class="line">        <span class="keyword">for</span> j, di <span class="keyword">in</span> enumerate(d):</span><br><span class="line">            sum_all -= di</span><br><span class="line">            <span class="keyword">if</span> sum_all &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cluster_centers[i] = np.copy(points[j, ])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> cluster_centers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_kmeanspp</span><span class="params">(data, k)</span>:</span></span><br><span class="line">    <span class="comment"># 1、KMeans++的聚类中心初始化方法</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t---------- 1.K-Means++ generate centers ------------"</span>)</span><br><span class="line">    centroids = get_centroids(data, k)</span><br><span class="line">    <span class="comment"># 2、聚类计算</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t---------- 2.kmeans ------------"</span>)</span><br><span class="line">    subCenter = kmeans(data, k, centroids)</span><br><span class="line">    <span class="comment"># 3、保存所属的类别文件</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t---------- 3.save subCenter ------------"</span>)</span><br><span class="line">    save_result(<span class="string">"sub_pp"</span>, subCenter)</span><br><span class="line">    <span class="comment"># 4、保存聚类中心</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\t---------- 4.save centroids ------------"</span>)</span><br><span class="line">    save_result(<span class="string">"center_pp"</span>, centroids)</span><br><span class="line"><span class="comment">#--------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">4</span>                       <span class="comment">#聚类中心的个数</span></span><br><span class="line"><span class="comment"># 1、导入数据</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"---------- 1.load data ------------"</span>)</span><br><span class="line">data = load_data(<span class="string">"Pic_B.jpg"</span>)</span><br><span class="line"><span class="comment"># 2、利用kMeans++聚类</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"---------- 2.run kmeans++ ------------"</span>)</span><br><span class="line">run_kmeanspp(data, k)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>BinTree</title>
    <url>/2019/10/27/%20Algorithm/BinTree/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">BinTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinTreeNode&lt;T&gt;*left;</span><br><span class="line">    BinTreeNode&lt;T&gt;*right;</span><br><span class="line">    T data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinTreeNode(<span class="keyword">const</span> T&amp;item,BinTreeNode&lt;T&gt;*L=<span class="literal">NULL</span>,BinTreeNode&lt;T&gt;*R=<span class="literal">NULL</span>):data(item),left(L),right(R)&#123;&#125;</span><br><span class="line">    BinTreeNode&lt;T&gt;*GetLeft()<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    BinTreeNode&lt;T&gt;*GetRight()<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetLeft</span><span class="params">(BinTreeNode&lt;T&gt;*L)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        left=L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetRight</span><span class="params">(BinTreeNode&lt;T&gt;*R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        right=R;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">GetData</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> data;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetData</span><span class="params">(<span class="keyword">const</span> T&amp;item)</span></span>&#123;data=item;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">BinTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinTreeNode&lt;T&gt;*root;</span><br><span class="line">    T stop;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinTree(BinTreeNode&lt;T&gt;*t=<span class="literal">NULL</span>):root(t)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NorecPreOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NorecInOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NorecPostOrder</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span><span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CreateBinTree</span><span class="params">(T tostop)</span></span>;</span><br><span class="line">    BinTreeNode&lt;T&gt;* Create();</span><br><span class="line">    BinTreeNode&lt;T&gt;*CopyTree(BinTreeNode&lt;T&gt;*t);</span><br><span class="line">    BinTreeNode&lt;T&gt;*Father(BinTreeNode&lt;T&gt;*t,BinTreeNode&lt;T&gt;*p);</span><br><span class="line">    BinTreeNode&lt;T&gt;*Find(BinTreeNode&lt;T&gt;*t,<span class="keyword">const</span> T&amp;item)<span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InsertLeft</span><span class="params">(T item,BinTreeNode&lt;T&gt;*t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InsertRight</span><span class="params">(T item,BinTreeNode&lt;T&gt;*s)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DelSubtree</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span></span>;</span><br><span class="line">    BinTreeNode&lt;T&gt;*GetRoot()&#123;<span class="keyword">return</span> root;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetRoot</span><span class="params">(BinTreeNode&lt;T&gt;*t)</span></span>&#123;root=t;&#125;</span><br><span class="line">    <span class="function">T <span class="title">getStop</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> stop;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetStop</span><span class="params">(T tostop)</span></span>&#123;stop=tostop;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> root==<span class="literal">NULL</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:PreOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        PreOrder(t-&gt;GetLeft());</span><br><span class="line">        PreOrder(t-&gt;GetRight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:InOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        InOrder(t-&gt;GetLeft());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        InOrder(t-&gt;GetRight());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:PostOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PostOrder(t-&gt;GetLeft());</span><br><span class="line">        PostOrder(t-&gt;GetRight());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:NorecInOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BinTreeNode&lt;T&gt;*&gt;S;</span><br><span class="line">    <span class="keyword">while</span>(t!=<span class="literal">NULL</span>||S.empty()==<span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            S.push(t);</span><br><span class="line">            t=t-&gt;GetLeft();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S.empty()==<span class="literal">true</span>)<span class="keyword">return</span> ;</span><br><span class="line">        t=S.top();</span><br><span class="line">        S.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        t=t-&gt;GetRight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:NorecPreOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BinTreeNode&lt;T&gt;*&gt;S;</span><br><span class="line">    S.push(t);</span><br><span class="line">    <span class="keyword">while</span>(S.empty()==<span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=S.top();</span><br><span class="line">        S.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;GetRight()!=<span class="literal">NULL</span>) S.push(t-&gt;GetRight());</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;GetLeft()!=<span class="literal">NULL</span>) S.push(t-&gt;GetLeft());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:NorecPostOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    pair&lt;BinTreeNode&lt;T&gt;*,<span class="keyword">int</span>&gt; p;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> ;</span><br><span class="line">    p=make_pair(t,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">stack</span>&lt;pair&lt;BinTreeNode&lt;T&gt;*,<span class="keyword">int</span>&gt;&gt;S;</span><br><span class="line">    S.push(p);</span><br><span class="line">    <span class="keyword">while</span>(S.empty()==<span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=S.top();</span><br><span class="line">        S.pop();</span><br><span class="line">        <span class="keyword">if</span>(p.second==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p.second++;</span><br><span class="line">            S.push(p);</span><br><span class="line">            <span class="keyword">if</span>((p.first)-&gt;GetLeft()!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p.first=(p.first)-&gt;GetLeft();</span><br><span class="line">                p.second=<span class="number">0</span>;</span><br><span class="line">                S.push(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(p.second==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p.second++;</span><br><span class="line">                S.push(p);</span><br><span class="line">                <span class="keyword">if</span>((p.first)-&gt;GetRight()!=<span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    p.first=(p.first)-&gt;GetRight();</span><br><span class="line">                    p.second=<span class="number">0</span>;</span><br><span class="line">                    S.push(p);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;p.first-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:LevelOrder(BinTreeNode&lt;T&gt;*t)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;BinTreeNode&lt;T&gt;*&gt;Q;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> ;</span><br><span class="line">    BinTreeNode&lt;T&gt; *p=t;</span><br><span class="line">    Q.push(p);</span><br><span class="line">    <span class="keyword">while</span>(Q.empty()==<span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;GetData()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;GetLeft()!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(p-&gt;GetLeft());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;GetRight()!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(p-&gt;GetRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:CreateBinTree(T tostop)</span><br><span class="line">&#123;</span><br><span class="line">    SetStop(tostop);</span><br><span class="line">    root=Create();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BinTreeNode</span>&lt;T&gt;* <span class="title">BinTree</span>&lt;T&gt;:</span>:Create()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    BinTreeNode&lt;T&gt;*t,*t1,*t2;</span><br><span class="line">    T item;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;item;</span><br><span class="line">    <span class="keyword">if</span>(item==stop)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    t=<span class="keyword">new</span> BinTreeNode&lt;T&gt;(item,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    t1=Create();</span><br><span class="line">    t-&gt;SetLeft(t1);</span><br><span class="line">    t2=Create();</span><br><span class="line">    t-&gt;SetRight(t2);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BinTreeNode</span>&lt;T&gt;*<span class="title">BinTree</span>&lt;T&gt;:</span>:CopyTree(BinTreeNode&lt;T&gt;*t)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    BinTreeNode&lt;T&gt;*L=<span class="literal">nullptr</span>,*R=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;GetLeft()!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L=CopyTree(t-&gt;GetLeft());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;GetRight()!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        R=CopyTree(t-&gt;GetRight());</span><br><span class="line">    &#125;</span><br><span class="line">    BinTreeNode&lt;T&gt;*nod=<span class="keyword">new</span> BinTreeNode&lt;T&gt;(t-&gt;GetData(),L,R);</span><br><span class="line">    <span class="keyword">return</span> nod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BinTreeNode</span>&lt;T&gt;*<span class="title">BinTree</span>&lt;T&gt;:</span>:Father(BinTreeNode&lt;T&gt;*t,BinTreeNode&lt;T&gt;*p)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    BinTreeNode&lt;T&gt;*q;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>||p==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;GetLeft()==p||t-&gt;GetRight()==p) <span class="keyword">return</span> t;</span><br><span class="line">    q=Father(t-&gt;GetLeft(),p);</span><br><span class="line">    <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)<span class="keyword">return</span> q;</span><br><span class="line">    <span class="keyword">return</span> Father(t-&gt;GetRight(),p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BinTreeNode</span>&lt;T&gt;*<span class="title">BinTree</span>&lt;T&gt;:</span>:Find(BinTreeNode&lt;T&gt;*t,<span class="keyword">const</span> T&amp;item)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    BinTreeNode&lt;T&gt;*p;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;data==item) <span class="keyword">return</span> t;</span><br><span class="line">    p=Find(t-&gt;GetLeft(),item);</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) <span class="keyword">return</span> p;</span><br><span class="line">    p=Find(t-&gt;GetRight(),item);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:Del(BinTreeNode&lt;T&gt;*t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Del(t-&gt;GetLeft());</span><br><span class="line">        Del(t-&gt;GetRight());</span><br><span class="line">        <span class="keyword">delete</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:InsertLeft(T item,BinTreeNode&lt;T&gt;*s)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    BinTreeNode&lt;T&gt;*p=<span class="keyword">new</span> BinTreeNode&lt;T&gt;(item);</span><br><span class="line">    p-&gt;SetLeft(s-&gt;GetLeft());</span><br><span class="line">    p-&gt;SetRight(<span class="literal">NULL</span>);</span><br><span class="line">    s-&gt;SetLeft(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:InsertRight(T item,BinTreeNode&lt;T&gt;*s)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    BinTreeNode&lt;T&gt;*p=<span class="keyword">new</span> BinTreeNode&lt;T&gt;(item);</span><br><span class="line">    p-&gt;SetRight(s-&gt;GetRight());</span><br><span class="line">    s-&gt;SetRight(p);</span><br><span class="line">    p-&gt;SetLeft(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">BinTree</span>&lt;T&gt;:</span>:DelSubtree(BinTreeNode&lt;T&gt;*t)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(t==root)</span><br><span class="line">    &#123;</span><br><span class="line">        Del(t);</span><br><span class="line">        root=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    BinTreeNode&lt;T&gt;*f=Father(root,t);</span><br><span class="line">    <span class="keyword">if</span>(f!=<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f-&gt;GetLeft()==t) f-&gt;SetLeft(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(f-&gt;GetRight()==t)f-&gt;SetRight((<span class="literal">NULL</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    Del(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    BinTree&lt;<span class="keyword">int</span>&gt; t;</span><br><span class="line">    t.CreateBinTree(<span class="number">-1</span>);</span><br><span class="line">    BinTreeNode&lt;<span class="keyword">int</span>&gt;*t2=t.Find(t.root,<span class="number">4</span>);</span><br><span class="line">    t.InsertRight(<span class="number">6</span>,t2);</span><br><span class="line">    t.InOrder(t.root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 2 4 -1 5 -1 -1 -1 3 -1 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>EulerSieve</title>
    <url>/2019/10/21/%20Algorithm/EulerSieve/</url>
    <content><![CDATA[<h3 id="EulerSieve"><a href="#EulerSieve" class="headerlink" title="EulerSieve"></a>EulerSieve</h3><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>​    O(n)</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10100</span>;   </span><br><span class="line"><span class="keyword">int</span> prime[maxn], pNum = <span class="number">0</span>;              <span class="comment">// prime记录素数，pNum记录素数个数</span></span><br><span class="line">                                        <span class="comment">//保存的值为0~pNum-1</span></span><br><span class="line"><span class="keyword">bool</span> p[maxn] = &#123;<span class="literal">false</span>&#125;;                 <span class="comment">// p记录当前数是否被筛去</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EulerSieve</span><span class="params">(<span class="keyword">int</span> n)</span>                  <span class="comment">// 查找记录2-n的素数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p[i] == <span class="literal">false</span>)              <span class="comment">// 如果未被筛过，则为素数</span></span><br><span class="line">			prime[pNum++] = i;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; pNum; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i * prime[j] &gt; n)       <span class="comment">// 当要标记的合数超出范围时跳出</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			p[i * prime[j]] = <span class="literal">true</span>;     <span class="comment">// 将已经记录的素数的倍数进行标记</span></span><br><span class="line">			<span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)      <span class="comment">//关键步骤</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><p><a href="https://www.cnblogs.com/cicos/p/10258703.html" target="_blank" rel="noopener">时间复杂度证明</a></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>qpow</title>
    <url>/2019/10/21/%20Algorithm/qpow/</url>
    <content><![CDATA[<h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><h5 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h5><p>​    求x^n的值</p>
<h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>​    O(log n)</p>
<h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><p>​    通过加大底数的权重来使得乘法次数更少</p>
<p>​    1.假设n为奇数：x^n=x*x^(n-1)            则将x计入结果</p>
<p>​    2.假设n为偶数：x^n=x^(n/2)*x^(n/2)    则将x的权重变为x^2</p>
<h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*快速幂运算 log 2 n*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL n, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LL result = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n!=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">			result = (result * a) % mod;<span class="comment">//计入结果</span></span><br><span class="line">		a = (a * a) % mod;<span class="comment">//权重变大</span></span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;<span class="comment">//n=n/2;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Kruskal</title>
    <url>/2019/10/10/%20Algorithm/Kruskal/</url>
    <content><![CDATA[<h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><blockquote>
<p>Kruskal总是维护无向连通图的最小生成森林</p>
<p>最终得到该图的最小生成树</p>
</blockquote>
<h5 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h5><p>​    <strong>Kruskal算法</strong>是一种用来查找<a href="https://baike.baidu.com/item/最小生成树" target="_blank" rel="noopener">最小生成树</a>的贪心算法，由Joseph Kruskal在1956年发表。</p>
<h5 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h5><p>​    有n个点m条无向边的图，且已知每一条边(x,y,z)，代表点x和点y之间有哦权值为z的无向边。    </p>
<h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>​    O(m log m)</p>
<h5 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h5><p>​    并查集        <del>先挖坑</del></p>
<h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><p>​        在遍历所给无向连通图的过程中，kruskal 总是维护着最小生成森林。</p>
<p>​    最终得到最小生成树。</p>
<p>​        有以下步骤：</p>
<p>​    1.初始化并查集，每一个点各自构成一个集合</p>
<p>​    2.对边集S进行从小到大排序</p>
<p>​    3.从S中取出一条边（注意：现在是从S中从小到大取出，判断这条边的两个端点是否属于同一个集合（使用并查集维护），不是则将端点x和端点y使用并查集combine起来。且将边加入最小生成森林。</p>
<p>​    4.不断重复S直至访问完所有边</p>
<h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以边集来保存图，假设有m条边</span></span><br><span class="line"><span class="comment">//时间复杂度为mlogm</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">11010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">&#125;;<span class="comment">//代表x和y两点之间有路且权值为z</span></span><br><span class="line">edge S[MAX];</span><br><span class="line"><span class="keyword">int</span> Father[MAX];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> edge&amp;a,<span class="keyword">const</span> edge&amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a.z&lt;b.z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;S[i].x,&amp;S[i].y,&amp;S[i].z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//并查集找父亲</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x!=Father[x])</span><br><span class="line">        x=Father[x];</span><br><span class="line">    <span class="keyword">return</span> x;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//combine</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       Father[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        Father[i]=i;</span><br><span class="line">    sort(S+<span class="number">1</span>,S+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=Find(S[i].x);</span><br><span class="line">        y=Find(S[i].y);</span><br><span class="line">        <span class="keyword">if</span>(x!=y)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=ans+S[i].z;</span><br><span class="line">            combine(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1233" target="_blank" rel="noopener">模板题</a></p>
</blockquote>
<p>​    回顾学习算法的第四天。<del>戒掉可乐的第四天</del></p>
<p>​        Orz</p>
<p>​        Orz</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>细品西瓜-前传</title>
    <url>/2019/10/10/%20MachineLearning/%E8%A5%BF%E7%93%9C1/</url>
    <content><![CDATA[<blockquote>
<p>学习是系统通过经验提升性能的过程</p>
</blockquote>
<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p><img src="https://i.loli.net/2020/05/21/QFJ72DNUGHBapCu.png" alt="OPVZRH_GXENVFBGWT__V_KU.png"></p>
<ul>
<li>假设空间</li>
<li>版本空间</li>
</ul>
<h1 id="模型评估与选择"><a href="#模型评估与选择" class="headerlink" title="模型评估与选择"></a>模型评估与选择</h1><ul>
<li>过拟合：将训练样本自身的一些特点作为所有样本的一般特性，导致泛化性能下降，学习能力过于强大。</li>
<li>欠拟合：学习能力不足。</li>
<li>模型选择泛化误差最小的模型</li>
<li>ROC,Receiver Operating Characteristic 受试者工作特征</li>
<li>AUC,Area Under ROC Curve ROC曲线下的面积</li>
</ul>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>iterator</title>
    <url>/2019/10/09/%20%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h3 id="C-迭代器"><a href="#C-迭代器" class="headerlink" title="C++ 迭代器"></a>C++ 迭代器</h3><ul>
<li>定义：可以是概念本身，可以是迭代器类型，可以是某个迭代器对象。</li>
<li>总之，它能使我们能访问容器的元素或者改变某个元素。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Vec;</span><br><span class="line"><span class="keyword">auto</span> it=Vec.begin();</span><br><span class="line"><span class="keyword">while</span>(it!=Vec.end())&#123;							</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;							<span class="comment">//解引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> it=Vec.cbegin();					</span><br><span class="line"><span class="keyword">while</span>(it!=Vec.cend())&#123;					</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;					</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>其中<code>end</code>成员我们称之为尾后迭代器<code>of-the-end iterator</code>，其为尾元素的下一个位置。</li>
<li>其中<code>Vec.cbegin()</code>的返回值<code>vector&lt;int&gt;::const_iterator</code>，为<code>C++11</code>新标准引入的函数。</li>
<li><strong>迭代器失效</strong>，若向迭代器所属的容器中添加元素，那么迭代器失效。</li>
<li>运算<ul>
<li>所有容器均支持递增运算<code>it++</code>，也支持<code>==</code>和<code>!=</code>比较</li>
<li>其中<code>string</code>和<code>vector</code>支持的运算更多</li>
</ul>
</li>
</ul>
<h3 id="Java-Iterator"><a href="#Java-Iterator" class="headerlink" title="Java Iterator"></a>Java Iterator</h3><ul>
<li><p>定义：是集合类的接口</p>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; C;</span><br><span class="line">Iterator&lt;String&gt; iter=C.iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">    String element =iter.next();</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>垃圾场</category>
      </categories>
  </entry>
  <entry>
    <title>Manacher</title>
    <url>/2019/10/09/%20Algorithm/Manacher/</url>
    <content><![CDATA[<h3 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h3><p>​    1975年，一个叫Manacher的人发明了一个Manacher算法</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​    给定一个字符串S，求出其最大回文子串</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><blockquote>
<p>O(n)</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>对称性</p>
</blockquote>
<h5 id="1-字符串处理"><a href="#1-字符串处理" class="headerlink" title="1.字符串处理"></a>1.字符串处理</h5><p>​    由于回文分为偶回文（比如 bccb）和奇回文（比如 bcacb），而在处理奇偶问题上会比较繁琐，所以这里我们使用一个技巧，具体做法是：在字符串首尾，及各字符间各插入一个字符（前提这个字符未出现在串里）。</p>
<p>​    Example：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>原串S</th>
<th>a</th>
<th>c</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>转换后的串T</td>
<td>#</td>
<td>a</td>
<td>#</td>
<td>c</td>
<td>#</td>
<td>a</td>
<td>#</td>
<td>b</td>
<td>#</td>
<td>a</td>
<td>#</td>
</tr>
</tbody>
</table>
</div>
<p>​    为了防止越界，做出以下修改，使得T变成$#a#a#a#b#a#@</p>
<h5 id="2-Len数组"><a href="#2-Len数组" class="headerlink" title="2.Len数组"></a>2.Len数组</h5><p>​    设有字符串T上的位置i，Len[i]表示以i为中心的回文串的半径，和KMP算法相比，这里的数组并非只是预处理的作用，而是在线的处理</p>
<p>​    可得：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>i</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
</tr>
</thead>
<tbody>
<tr>
<td>T[i]</td>
<td>#</td>
<td>a</td>
<td>#</td>
<td>c</td>
<td>#</td>
<td>a</td>
<td>#</td>
<td>b</td>
<td>#</td>
<td>a</td>
<td>#</td>
</tr>
<tr>
<td>Len[i]</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>​    如何得到Len数组？</p>
<p>​    <del>（先挖坑）</del></p>
<p>​    主要思想是利用对称性</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">110000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> S[MAX];<span class="comment">//原串</span></span><br><span class="line"><span class="keyword">char</span> tmp[MAX*<span class="number">2</span>+<span class="number">10</span>];<span class="comment">//辅助字符串T</span></span><br><span class="line"><span class="keyword">int</span> Len[MAX*<span class="number">2</span>+<span class="number">10</span>];<span class="comment">//Len数组</span></span><br><span class="line"><span class="keyword">int</span> N1;<span class="comment">//原串S的长度</span></span><br><span class="line"><span class="keyword">int</span> N2;<span class="comment">//T的长度</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,N1=<span class="built_in">strlen</span>(S);</span><br><span class="line">    N2=N1*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    tmp[<span class="number">0</span>]=<span class="string">'$'</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*N1;i=i+<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=<span class="string">'#'</span>;</span><br><span class="line">        tmp[i+<span class="number">1</span>]=S[i/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tmp[i]=<span class="string">'#'</span>;</span><br><span class="line">    tmp[i+<span class="number">1</span>]=<span class="string">'@'</span>;</span><br><span class="line">    <span class="comment">//这样处理的原因是优化后面的操作，比如这样的情况 "bb"</span></span><br><span class="line">    tmp[i+<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到最大的回文串长度</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetLen();</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> po=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mx&gt;i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//对称性,两者取最小</span></span><br><span class="line">            <span class="keyword">if</span>((mx-i)&lt;Len[<span class="number">2</span>*po<span class="number">-1</span>])</span><br><span class="line">                Len[i]=mx-i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Len[i]=Len[<span class="number">2</span>*po<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//第三种情况</span></span><br><span class="line">            Len[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//不断向外扩展，巧妙</span></span><br><span class="line">        <span class="keyword">while</span>(tmp[i-Len[i]]==tmp[i+Len[i]])</span><br><span class="line">            Len[i]++;</span><br><span class="line">        <span class="comment">//更新值</span></span><br><span class="line">        <span class="keyword">if</span>(Len[i]+i&gt;mx)</span><br><span class="line">        &#123;</span><br><span class="line">            mx=Len[i]+i;</span><br><span class="line">            po=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Len[i]&gt;ans)</span><br><span class="line">            ans=Len[i];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> ans<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Manacher</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()&lt;<span class="number">2</span>)    <span class="keyword">return</span> s;</span><br><span class="line">        String t=<span class="string">"$"</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s.length();i++)   t+=<span class="string">"#"</span>+s.charAt(i);</span><br><span class="line">        t+=<span class="string">"#@"</span>;</span><br><span class="line">        <span class="keyword">int</span> n=t.length();</span><br><span class="line">        <span class="keyword">int</span> [] p=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            p[i]=mx&gt;i ? Math.min(mx-i,p[<span class="number">2</span>*id-i]):<span class="number">1</span>;<span class="comment">//第一种情况+第二种情况：第三种情况</span></span><br><span class="line">            <span class="keyword">while</span>(t.charAt(i+p[i])==t.charAt(i-p[i]))   p[i]++;<span class="comment">//无论哪一种都可以进行拓展</span></span><br><span class="line">            <span class="keyword">if</span>(mx&lt;i+p[i])   &#123;<span class="comment">//更新右边界以及右边界的中心</span></span><br><span class="line">                mx=i+p[i];</span><br><span class="line">                id=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(maxLength&lt;p[i]-<span class="number">1</span>)&#123;<span class="comment">//更新最长回文串长度</span></span><br><span class="line">                maxLength=p[i]-<span class="number">1</span>;</span><br><span class="line">                index=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start=(index-maxLength)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start,start+maxLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    <a href="https://blog.csdn.net/dyx404514/article/details/42061017" target="_blank" rel="noopener">https://blog.csdn.net/dyx404514/article/details/42061017</a></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>KMP</title>
    <url>/2019/10/01/%20Algorithm/KMP/</url>
    <content><![CDATA[<h3 id="名字由来"><a href="#名字由来" class="headerlink" title="名字由来"></a>名字由来</h3><p>​    由<strong>K</strong>nuth，<strong>M</strong>orris,<strong>P</strong>ratt三人所设计的线性时间字符串匹配算法</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>​    设有长度为n的文本串S和长度为m的匹配串P，求匹配串成功匹配文本串字串的首地址</p>
<p>​    O(n+m)</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h5 id="引出"><a href="#引出" class="headerlink" title="引出"></a>引出</h5><p>​    对匹配串预处理生成一种失配的映射（或者称为函数，其实称为函数会更加恰当），我们姑且把这个函数成为Next函数。当匹配串对文本串进行匹配时，不妨想象一下，我们在失配的时候对应的失配位置<strong>i</strong>，都会有相同的移动位移，这样就会产生一个关于<strong>i</strong>的函数，我们姑且把这样的函数称之为Next(i)，那么这个函数的返回值是什么呢？在不同的博客上它的返回值是不一样的，比如，有些直接返回P下一个需要比较的位置，有些是返回P需要移动的距离（自行脑补一下），有些是返回最大该位置的最大的前后缀一样的字串的字符数，有些的Next函数是经过优化过的，自然返回值和原来的有些不一样。不过它们的使用方法都大同小异。</p>
<p>​    我们以返回值为P下一个需要匹配的位置为例。</p>
<h5 id="Next函数的产生"><a href="#Next函数的产生" class="headerlink" title="Next函数的产生"></a>Next函数的产生</h5><p>​    <del>先挖坑</del></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">int</span> Next[],<span class="keyword">char</span> P[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pLen=<span class="built_in">strlen</span>(P);</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    Next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;pLen<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>||P[k]==P[j])</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            j++;</span><br><span class="line">            Next[j]=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k=Next[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="NextPro数组的产生"><a href="#NextPro数组的产生" class="headerlink" title="NextPro数组的产生"></a>NextPro数组的产生</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetProNext</span><span class="params">(<span class="keyword">int</span> Next[],<span class="keyword">char</span> P[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pLen=<span class="built_in">strlen</span>(P);</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    Next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;pLen<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>||P[k]==P[j])</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="comment">//只是比Next数组多了一个判断罢了</span></span><br><span class="line">            <span class="keyword">if</span>(P[j]!=P[k])</span><br><span class="line">                Next[j]=k;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Next[j]=Next[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            k=Next[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="KMPSearch代码"><a href="#KMPSearch代码" class="headerlink" title="KMPSearch代码"></a>KMPSearch代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">char</span> P[MAX];</span><br><span class="line"><span class="keyword">char</span> S[MAX];</span><br><span class="line"><span class="keyword">int</span> Next[MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KmpSearch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetProNext();<span class="comment">//只需要在这里预处理P的Next数组即可</span></span><br><span class="line">    <span class="keyword">int</span> sLen=<span class="built_in">strlen</span>(S);</span><br><span class="line">    <span class="keyword">int</span> pLen=<span class="built_in">strlen</span>(P);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;sLen&amp;&amp;j&lt;pLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||S[i]==P[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j=Next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==pLen)</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="这个讲解很棒"><a href="#这个讲解很棒" class="headerlink" title="这个讲解很棒"></a>这个讲解很棒</h3><p><a href="https://blog.csdn.net/v_JULY_v/article/details/7041827" target="_blank" rel="noopener">https://blog.csdn.net/v_JULY_v/article/details/7041827</a></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
</search>
